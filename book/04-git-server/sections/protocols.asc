//////////////////////////
=== The Protocols
//////////////////////////
=== プロトコル

//////////////////////////
Git can use four major protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
Here we'll discuss what they are and in what basic circumstances you would want (or not want) to use them.
//////////////////////////
Git では、データ転送用のプロトコルとして Local、HTTP、Secure Shell (SSH)、Git の四つを使用できます。
ここでは、それぞれがどんなものなのかとどんな場面で使うべきか (使うべきでないか) を説明します。

//////////////////////////
==== Local Protocol
//////////////////////////
==== Local プロトコル

(((protocols, local)))
//////////////////////////
The most basic is the _Local protocol_, in which the remote repository is in another directory on disk.
This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.
The latter wouldn't be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.
//////////////////////////
一番基本的なプロトコルが _Local プロトコル_ です。これは、リモートリポジトリをディスク上の別のディレクトリに置くものです。
これがよく使われるのは、たとえばチーム全員がアクセスできる共有ファイルシステム (NFS など) がある場合です。あるいは、あまりないでしょうが全員が同じコンピューターにログインしている場合にも使えます。
後者のパターンはあまりお勧めできません。すべてのコードリポジトリが同じコンピューター上に存在することになるので、何か事故が起こったときに何もかも失ってしまう可能性があります。

//////////////////////////
If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
To clone a repository like this or to add one as a remote to an existing project, use the path to the repository as the URL.
For example, to clone a local repository, you can run something like this:
//////////////////////////
共有ファイルシステムをマウントしているのなら、それをローカルのファイルベースのリポジトリにクローンしたりお互いの間でプッシュやプルをしたりすることができます。
この手のリポジトリをクローンしたり既存のプロジェクトのリモートとして追加したりするには、リポジトリへのパスを URL に指定します。
たとえば、ローカルリポジトリにクローンするにはこのようなコマンドを実行します。

[source,console]
----
$ git clone /opt/git/project.git
----

//////////////////////////
Or you can do this:
//////////////////////////
あるいは次のようにすることもできます。

[source,console]
----
$ git clone file:///opt/git/project.git
----

//////////////////////////
Git operates slightly differently if you explicitly specify `file://` at the beginning of the URL.
If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network which is generally a lot less efficient method of transferring the data.
The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out – generally after an import from another version-control system or something similar (see <<_git_internals>> for maintenance tasks).
We'll use the normal path here because doing so is almost always faster.
//////////////////////////
URL の先頭に `file://` を明示するかどうかで、Git の動きは微妙に異なります。
`file://` を明示せずパスだけを指定した場合、Git は必要なオブジェクトにハードリンクを張るか、そのままコピーしようとします。
一方 `file://` を指定した場合は、Git がプロセスを立ち上げ、そのプロセスが (通常は) ネットワーク越しにデータを転送します。一般的に、直接のコピーに比べてこれは非常に非効率的です。
`file://` プレフィックスをつける最も大きな理由は、関係のない参照やオブジェクト(他のバージョン管理システムからインポートしたときなどにあらわれることが多いです。詳細は <<_git_internals>> を参照してください) を除いたクリーンなコピーがほしいということです。
本書では通常のパス表記を使用します。そのほうがたいていの場合に高速となるからです。

//////////////////////////
To add a local repository to an existing Git project, you can run something like this:
//////////////////////////
ローカルのリポジトリを既存の Git プロジェクトに追加するには、このようなコマンドを実行します。

[source,console]
----
$ git remote add local_proj /opt/git/project.git
----

//////////////////////////
Then, you can push to and pull from that remote as though you were doing so over a network.
//////////////////////////
そうすれば、このリモートとの間のプッシュやプルを、まるでネットワーク越しにあるのと同じようにすることができます。

//////////////////////////
===== The Pros
//////////////////////////
===== 利点

//////////////////////////
The pros of file-based repositories are that they're simple and they use existing file permissions and network access.
If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
We'll discuss how to export a bare repository copy for this purpose in <<_git_on_the_server>>.
//////////////////////////
ファイルベースのリポジトリの利点は、シンプルであることと既存のファイルアクセス権やネットワークアクセスを流用できることです。
チーム全員がアクセスできる共有ファイルシステムがすでに存在するのなら、リポジトリを用意するのは非常に簡単です。
ベアリポジトリのコピーをみんながアクセスできるどこかの場所に置き、読み書き可能な権限を与えるという、ごく普通の共有ディレクトリ上での作業です。
この作業のために必要なベアリポジトリをエクスポートする方法については <<_git_on_the_server>> で説明します。

//////////////////////////
This is also a nice option for quickly grabbing work from someone else's working repository.
If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you pulling down.
//////////////////////////
もうひとつ、ほかの誰かの作業ディレクトリの内容をすばやく取り込めるのも便利なところです。
同僚と作業しているプロジェクトで相手があなたに作業内容を確認してほしい言ってきたときなど、わざわざリモートのサーバーにプッシュしてもらってそれをプルするよりは単に `git pull /home/john/project` のようなコマンドを実行するほうがずっと簡単です。

//////////////////////////
===== The Cons
//////////////////////////
===== 欠点

//////////////////////////
The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
If you want to push from your laptop when you're at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.
//////////////////////////
この方式の欠点は、メンバーが別の場所にいるときに共有アクセスを設定するのは一般的に難しいということです。
自宅にいるときに自分のラップトップからプッシュしようとしたら、リモートディスクをマウントする必要があります。これはネットワーク越しのアクセスに比べて困難で遅くなるでしょう。

//////////////////////////
It's also important to mention that this isn't necessarily the fastest option if you're using a shared mount of some kind.
A local repository is fast only if you have fast access to the data.
A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.
//////////////////////////
また、何らかの共有マウントを使用している場合は、必ずしもこの方式が最高速となるわけではありません。
ローカルリポジトリが高速だというのは、単にデータに高速にアクセスできるからというだけの理由です。
NFS 上に置いたリポジトリは、同じサーバーで稼動しているリポジトリに SSH でアクセスしたときよりも遅くなりがちです。SSH でアクセスしたときは、各システムのローカルディスクにアクセスすることになるからです。

//////////////////////////
==== The HTTP Protocols
//////////////////////////
==== HTTPプロトコル

//////////////////////////
Git can communicate over HTTP in two different modes.
Prior to Git 1.6.6 there was only one way it could do this which was very simple and generally read-only.
In version 1.6.6 a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
In the last few years, this new HTTP protocol has become very popular since it's simpler for the user and smarter about how it communicates.
The newer version is often referred to as the ``Smart'' HTTP protocol and the older way as ``Dumb'' HTTP.
We'll cover the newer ``smart'' HTTP protocol first.
//////////////////////////
HTTP を使って Git でやりとりをする場合、2つのモードが使えます。
以前のバージョンでは、単純で読み取り専用のモードしかありませんでした。
しかしバージョン 1.6.6 でより高機能なプロトコルが導入されました。これは、SSH の場合と同じように、HTTP でのデータのやりとりも Git が賢く処理できるようにするためのものでした。
ここ数年で、新しいほうの HTTP プロトコル はとても多く使われるようになりました。ユーザーからすればこちらのほうがシンプルですし、通信方法としても優れているからです。
新しいほうは ``smart'' HTTP プロトコルと呼ばれていて、古いほうは「ダム」（dumb）HTTP プロトコルと呼ばれています。
まずは ``smart'' HTTP プロトコルのほうから説明しましょう。

===== Smart HTTP

(((protocols, smart HTTP)))
//////////////////////////
The ``smart'' HTTP protocol operates very similarly to the SSH or Git protocols but runs over standard HTTP/S ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password basic authentication rather than having to set up SSH keys.
//////////////////////////
 ``smart'' HTTP プロトコルの動きは SSH や Git プロトコルと似ていますが、HTTP/S の標準ポートを使って通信します。また、HTTP 認証の仕組みをいくつも使うことができます。
よって、ユーザーにとっては SSH などよりも簡単であることが多いです。というのも、ユーザー名とパスワードを使ったベーシック認証を、SSH 鍵認証の代わりに使えるからです。

//////////////////////////
It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol. Instead of having to set up different URLs for these things, you can now use a single URL for both. If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password. The same goes for read access.
//////////////////////////
いまでは、Git で一番使われているのがこの方法だと思います。
というのも、 `git://` プロトコルが提供する匿名での読み込み機能と、SSH プロトコルが提供する認証・暗号化を経た書き込み機能の両方が、これひとつで実現できるからです。
これまでこういったことをするにはそれぞれに URL を用意する必要がありました。
いまでは、ひとつの URL で双方を実現できます。
プッシュしようとしたリポジトリで認証が必要であれば（通常であればそうすべきです）、サーバーはユーザー名とパスワードを要求することができます。
また、同じことが、読み込みについても言えます。

//////////////////////////
In fact, for services like GitHub, the URL you use to view the repository online (for example, ``https://github.com/schacon/simplegit[]'') is the same URL you can use to clone and, if you have access, push over.
//////////////////////////
実際のところ、GitHub のようなサービスの場合、ブラウザでリポジトリを見るときに使う URL （ ``https://github.com/schacon/simplegit[]'' など）と同じものを使って、リポジトリをクローンすることができます。書き込み権限があるなら、プッシュする場合も同じ URL が使えます。

===== Dumb HTTP

(((protocols, dumb HTTP)))
//////////////////////////
If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler ``dumb'' HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of the Dumb HTTP protocol is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (See <<_git_hooks>>).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this:
//////////////////////////
Git の smart HTTP プロトコルにサーバーが応答しない場合、Git クライアントは簡易な ``dumb'' HTTP プロトコルへフォールバックします。
Dumb プロトコルでは、Git のベアリポジトリが通常のファイルと同じように ウェブサーバーから配信されます。
これのいいところは、セットアップがとても簡単な点です。
ベースとして必要になるのは、ベアリポジトリを HTTP ドキュメントのルートに配置することと、特定の `post-update` フックを設定することだけです（詳しくは <<_git_hooks>> を参照）。
それができれば、リポジトリを配置したサーバーにアクセスできる人なら誰でも、そのリポジトリをクローンできます。
HTTP を使ったリポジトリへのアクセスは、以下のようにすると許可できます。

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

//////////////////////////
That's all.(((hooks, post-update)))
The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like
//////////////////////////
これだけです。(((hooks, post-update)))
Git に標準でついてくる `post-update` フックは、適切なコマンド (`git update-server-info`) を実行して HTTP でのフェッチとクローンをうまく動くようにします。
このコマンドが実行されるのは、このリポジトリに対して SSH 越しでのプッシュがあったときです。その他の人たちがクローンする際には次のようにします。

[source,console]
----
$ git clone https://example.com/gitproject.git
----

//////////////////////////
In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server – just put the bare repository in its path.
The Git data is served as basic static files (see <<_git_internals>> for details about exactly how it's served).
//////////////////////////
今回の例ではたまたま `/var/www/htdocs` (一般的な Apache の標準設定) を使用しましたが、別にそれに限らず任意のウェブサーバーを使うことができます。
単にベアリポジトリをそのパスに置けばよいだけです。
Git のデータは、普通の静的ファイルとして扱われます (実際のところどのようになっているかの詳細は <<_git_internals>> を参照ください)。

//////////////////////////
Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner. It's rare to run a mix of the two services.
//////////////////////////
なお、構築するサーバーを選択する際は、読み書きが可能な Smart HTTP か、読み込み専用でファイルを配信する Dumb HTTP かのいずれかのサーバーを選ぶことになるでしょう。両方を混ぜあわせたものを構築することはめったにありません。

//////////////////////////
===== The Pros
//////////////////////////
===== 利点

//////////////////////////
We'll concentrate on the pros of the Smart version of the HTTP protocol.
//////////////////////////
ここでは、Smart HTTP プロトコルに限った範囲で利点について説明します。

//////////////////////////
The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one.
//////////////////////////
ひとつの URL で全アクセスを処理できること、サーバーが入力を求めてくるのは認証が必要なときだけ、という2点があれば、エンドユーザーは Git をとても簡単に使えるようになります。
また、ユーザー名とパスワードを使って認証を受けられるのも、SSH と比べた場合大きな利点です。それができれば、SSH 鍵を生成したり公開鍵をサーバーへアップロードしなくても、サーバーとやりとりできるからです。
中～上級者以外、または SSH があまり使われていないシステムのユーザーにとって、これはユーザビリティの点で大きな利点になります。
それに、HTTP プロトコルは SSH のようにとても早くて効率もよいです。

//////////////////////////
You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.
//////////////////////////
HTTPS で読み込み専用のリポジトリを公開することもできます。
これで、転送されるコンテンツを暗号化したりクライアント側で特定の署名つき SSL 証明書を使わせたりすることができるようになります。

//////////////////////////
Another nice thing is that HTTP/S are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.
//////////////////////////
もうひとつの利点としてあげられるのは、HTTP が非常に一般的なプロトコルであるということです。たいていの企業のファイアウォールはこのポートを通すように設定されています。

//////////////////////////
===== The Cons
//////////////////////////
===== 欠点

//////////////////////////
Git over HTTP/S can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over the ``Smart'' HTTP protocol for serving Git.
//////////////////////////
HTTP/S で Git を使えるようサーバーを設定するのは、SSH とは違ってやっかいなケースがあります。
それを除けば、他のプロトコルが ``Smart'' HTTP プロトコルより Git 用として優れてる点はほとんどありません。

//////////////////////////
If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH. There are however several credential caching tools you can use, including Keychain access on OSX and Credential Manager on Windows, to make this pretty painless. Read <<_credential_caching>> to see how to set up secure HTTP password caching on your system.
//////////////////////////
上述のやっかいなケースとは、HTTP を認証が必要なプッシュに用いるケースです。その場合、認証情報を入力するのは SSH 鍵を用いるより複雑になりがちです。
とはいえ、認証情報をキャッシュしてくれるツール（OSX の Keychain や Windows の資格情報マネージャーなど）を使えば、それも問題ではなくなります。<<_credential_caching>> を読めば、HTTP パスワードキャッシュを各システムで有効にする方法がわかるでしょう。

//////////////////////////
==== The SSH Protocol
//////////////////////////
==== SSH プロトコル

(((protocols, SSH)))
//////////////////////////
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places – and if it isn't, it's easy to do.
SSH is also an authenticated network protocol; and because it's ubiquitous, it's generally easy to set up and use.
//////////////////////////
Git サーバーを自分でホスティングしているなら、転送プロトコルのうち一般的なのは SSH です。
SSH によるサーバーへのアクセスは、ほとんどの場面で既に用意されているからです。仮にまだ用意されていなかったとしても、導入するのは容易なことです。
SSH は認証付きのネットワークプロトコルでもあります。あらゆるところで用いられているので、環境を準備するのも容易です。

//////////////////////////
To clone a Git repository over SSH, you can specify ssh:// URL like this:
//////////////////////////
Git リポジトリを SSH 越しにクローンするには、次のように ssh:// URL を指定します。

[source,console]
----
$ git clone ssh://user@server/project.git
----

//////////////////////////
Or you can use the shorter scp-like syntax for the SSH protocol:
//////////////////////////
あるいは、SCPコマンドのような省略形を使うこともできます｡

[source,console]
----
$ git clone user@server:project.git
----

//////////////////////////
You can also not specify a user, and Git assumes the user you're currently logged in as.
//////////////////////////
ユーザー名も省略することもできます。その場合、Git は現在ログインしているユーザーでの接続を試みます。

//////////////////////////
===== The Pros
//////////////////////////
===== 利点


//////////////////////////
The pros of using SSH are many.
First, SSH is relatively easy to set up – SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure – all data transfer is encrypted and authenticated.
Last, like the HTTP/S, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.
//////////////////////////
SSH を使う利点は多数あります。
まず、一般的に SSH 環境の準備は容易です。SSH デーモンはごくありふれたツールなので、ネットワーク管理者の多くはその使用経験があります。また、多くの OS に標準で組み込まれており、管理用ツールが付属しているものもあります。
さらに、SSH 越しのアクセスは安全です。すべての転送データは暗号化され、信頼できるものとなります。最後に、HTTP/S、Git、Local プロトコルと同程度に効率的です。転送するデータを可能な限りコンパクトにすることができます。

//////////////////////////
===== The Cons
//////////////////////////
===== 欠点

//////////////////////////
The negative aspect of SSH is that you can't serve anonymous access of your repository over it.
People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn't make SSH access conducive to open source projects.
If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch over.
//////////////////////////
SSH の欠点は、リポジトリへの匿名アクセスを許可できないということです。
たとえ読み込み専用であっても、リポジトリにアクセスするには SSH 越しでのマシンへのアクセス権限が必要となります。つまり、オープンソースのプロジェクトにとっては SSH はあまりうれしくありません。
特定の企業内でのみ使用するのなら、SSH はおそらく唯一の選択肢となるでしょう。
あなたのプロジェクトに読み込み専用の匿名アクセスを許可しつつ自分は SSH を使いたい場合は、リポジトリへのプッシュ用に SSH を用意するのとは別にプル用の環境として別のプロトコルを提供する必要があります。

//////////////////////////
==== The Git Protocol
//////////////////////////
==== Git プロトコル

(((protocols, git)))
//////////////////////////
Next is the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file – the daemon won't serve a repository without that file in it – but other than that there is no security.
Either the Git repository is available for everyone to clone or it isn't.
This means that there is generally no pushing over this protocol.
You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project's URL could push to your project.
Suffice it to say that this is rare.
//////////////////////////
次は Git プロトコルです。
これは Git に標準で付属する特別なデーモンです。専用のポート (9418) をリスンし、SSH プロトコルと同様のサービスを提供しますが、認証は行いません。
Git プロトコルを提供するリポジトリを準備するには、`git-daemon-export-ok` というファイルを作らなければなりません (このファイルがなければデーモンはサービスを提供しません)。ただ、このままでは一切セキュリティはありません。
Git リポジトリをすべての人に開放し、クローンさせることができます。
しかし、一般に、このプロトコルでプッシュさせることはありません。
プッシュアクセスを認めることは可能です。しかし認証がないということは、その URL を知ってさえいればインターネット上の誰もがプロジェクトにプッシュできるということになります。
これはありえない話だと言っても差し支えないでしょう。

//////////////////////////
===== The Pros
//////////////////////////
===== 利点

//////////////////////////
The Git protocol is often the fastest network transfer protocol available.
If you’re serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it’s likely that you'll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.
//////////////////////////
Git プロトコルは、もっとも高速なネットワーク転送プロトコルであることが多いです。
公開プロジェクトで大量のトラフィックをさばいている場合、あるいは巨大なプロジェクトで読み込みアクセス時のユーザー認証が不要な場合は、Git デーモンを用いてリポジトリを公開するとよいでしょう。
このプロトコルは SSH プロトコルと同様のデータ転送メカニズムを使いますが、暗号化と認証のオーバーヘッドがないのでより高速です。

//////////////////////////
===== The Cons
//////////////////////////
===== 欠点

//////////////////////////
The downside of the Git protocol is the lack of authentication.
It's generally undesirable for the Git protocol to be the only access to your project.
Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
It's also probably the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` configuration or the like, which isn't always a walk in the park.
It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.
//////////////////////////
Git プロトコルの弱点は、認証の仕組みがないことです。
Git プロトコルだけでしかプロジェクトにアクセスできないという状況は、一般的に望ましくありません。
SSH や HTTP と組み合わせ、プッシュ (書き込み) 権限を持つ一部の開発者には SSH を使わせてそれ以外の人には `git://` での読み込み専用アクセスを用意することになるでしょう。
また、Git プロトコルは準備するのがもっとも難しいプロトコルでもあります。
まず、独自のデーモンを起動しなければなりません。そのためには `xinetd` やそれに類するものの設定も必要になりますが、これはそんなにお手軽にできるものではありません。
また、ファイアウォールでポート 9418 のアクセスを許可する必要もあります。これは標準のポートではないので、企業のファイアウォールでは許可されなていないかもしれません。
大企業のファイアウォールでは、こういったよくわからないポートは普通ブロックされています。
