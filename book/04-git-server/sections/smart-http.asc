=== Smart HTTP

(((serving repositories, HTTP)))
//////////////////////////
We now have authenticated access though SSH and unauthenticated access through `git://`, but there is also a protocol that can do both at the same time.
Setting up Smart HTTP is basically just enabling a CGI script that is provided with Git called `git-http-backend` on the server.((git commands, "http-backend"))
This CGI will read the path and headers sent by a `git fetch` or `git push` to an HTTP URL and determine if the client can communicate over HTTP (which is true for any client since version 1.6.6).
If the CGI sees that the client is smart, it will communicate smartly with it, otherwise it will fall back to the dumb behavior (so it is backward compatible for reads with older clients).
//////////////////////////
これまでの説明で、SSH を使った認証ありのプロトコルと `git://` を使った認証なしのプロトコルについてわかったと思います。続いて、それら両方を実現してしまうプロトコルについて説明しましょう。
Smart HTTP のセットアップは、単に CGI スクリプトをひとつ、Git サーバー上で有効にすればおしまいです。Git に同梱されている `git-http-backend` というスクリプトを使います。((git commands, "http-backend"))
この CGI は、パスやヘッダー情報（`git fetch` や `git push` で特定の HTTP URL 宛に送られてきたデータ）を読み込み、クライアントが HTTP を使ってやりとりできるかどうか判断します（バージョン 1.6.6 以降の Git クライアントであれば対応しています）。
そして、CGI の判断が「このクライアントは Smart HTTP に対応している」だった場合は Smart HTTP が使われ、そうでなかった場合はリードオンリー（``dumb''）にフォールバックします（後方互換という意味では、読み込みについては古いクライアントにも対応しています）。

//////////////////////////
Let's walk though a very basic setup. We'll set this up with Apache as the CGI server. If you don't have Apache setup, you can do so on a Linux box with something like this:(((Apache)))
//////////////////////////
では、標準的なセットアップ方法について説明しましょう。ここでは、Apache を CGI サーバーとして使います。Apache がインストールされていない場合は、Linux サーバー上で以下のようなコマンドを実行してください。(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

//////////////////////////
This also enables the `mod_cgi`, `mod_alias`, and `mod_env` modules, which are all needed for this to work properly.
//////////////////////////
そうすれば、`mod_cgi`、`mod_alias`、`mod_env` も有効になります。いずれも、Smart HTTP の動作に必要なものです。

//////////////////////////
Next we need to add some things to the Apache configuration to run the `git-http-backend` as the handler for anything coming into the `/git` path of your web server.
//////////////////////////
次に、Apache の設定をします。`git-http-backend` をハンドラにして、Web サーバーの `/git` パスにアクセスがあった場合にそれに処理させるための設定です。

[source,console]
----
SetEnv GIT_PROJECT_ROOT /opt/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/
----

//////////////////////////
If you leave out `GIT_HTTP_EXPORT_ALL` environment variable, then Git will only serve to unauthenticated clients the repositories with the `git-daemon-export-ok` file in them, just like the Git daemon did.
//////////////////////////
環境変数 `GIT_HTTP_EXPORT_ALL` を設定しない場合、クライアントからのアクセスは読み込み専用になり、読み込めるのは `git-daemon-export-ok` ファイルが保存されたリポジトリだけになります。Git デーモンと同様の挙動です。

//////////////////////////
Then you'll have to tell Apache to allow requests to that path with something like this:
//////////////////////////
続いて、さきほど設定したパスへのアクセスを許可する設定をします。以下はその一例です。

[source,console]
----
<Directory "/usr/lib/git-core*">
   Options ExecCGI Indexes
   Order allow,deny
   Allow from all
   Require all granted
</Directory>
----

//////////////////////////
Finally you'll want to make writes be authenticated somehow, possibly with an Auth block like this:
//////////////////////////
最後の設定は、書き込みに認証を求めるためのものです。Auth ブロックを使う場合、以下のようにして設定できます。

[source,console]
----
<LocationMatch "^/git/.*/git-receive-pack$">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /opt/git/.htpasswd
    Require valid-user
</LocationMatch>
----

//////////////////////////
That will require you to create a `.htaccess` file containing the passwords of all the valid users. Here is an example of adding a ``schacon'' user to the file:
//////////////////////////
さらに、対象ユーザー全員のパスワードが記述された `.htaccess` ファイルが必要です。ユーザー ``schacon'' を追加したい場合は、このようなコマンドを実行します。

[source,console]
----
$ htdigest -c /opt/git/.htpasswd "Git Access" schacon
----

//////////////////////////
There are tons of ways to have Apache authenticate users, you'll have to choose and implement one of them. This is just the simplest example we could come up with. You'll also almost certainly want to set this up over SSL so all this data is encrypted.
//////////////////////////
ユーザー認証を Apache で実施する方法はたくさんあります。
ひとつ選んで設定してください。
ここでは、思いつく限り一番シンプルな方法を説明しました。
また、HTTP 通信が SSL 経由で行われるように設定しましょう。
そうすれば、データはすべて暗号化されます。

//////////////////////////
We don't want to go too far down the rabbit hole of Apache configuration specifics, since you could well be using a different server or have different authentication needs. The idea is that Git comes with a CGI called `git-http-backend` that when invoked will do all the negotiation to send and receive data over HTTP. It does not implement any authentication itself, but that can easily be controlled at the layer of the web server that invokes it. You can do this with nearly any CGI-capable web server, so go with the one that you know best.
//////////////////////////
ここでは、Apache 設定の詳細についてはあえて立ち入らないようにしました。
Apache 以外の Web サーバーを使う場合もあるでしょうし、認証の要求も多様だからです。
覚えておいてほしいのは、Git には `git-http-backend` という CGI スクリプトが付属していることです。
それが実行されると、HTTP 経由でデータを送受信する際のネゴシエーションを処理してくれます。
このスクリプト自体は認証の仕組みを備えてはいませんが、Web サーバーの機能で認証は簡単に管理できます。
CGI に対応している Web サーバーであればどれも使っても構いません。一番使い慣れたものを使うのがよいでしょう。

[NOTE]
//////////////////////////
====
For more information on configuring authentication in Apache, check out the Apache docs here: http://httpd.apache.org/docs/current/howto/auth.html[]
====
//////////////////////////
====
Apacheを使った認証設定の詳細については、Apache の公式ドキュメント http://httpd.apache.org/docs/current/howto/auth.html[] を参照してください。
====
