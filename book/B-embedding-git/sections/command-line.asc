//////////////////////////
=== Command-line Git
//////////////////////////
=== Gitのコマンドラインツールを使う方法

//////////////////////////
One option is to spawn a shell process and use the Git command-line tool to do the work.
This has the benefit of being canonical, and all of Git's features are supported.
This also happens to be fairly easy, as most runtime environments have a relatively simple facility for invoking a process with command-line arguments.
However, this approach does have some downsides.
//////////////////////////
1つ目の方法は、シェルのプロセスを生成して、Gitのコマンドラインツールを使って処理を行うやり方です。
この方法には、標準的な方法であるという利点がありますし、Gitのすべての機能がサポートされています。
また、ほとんどの実行環境には、比較的簡単にコマンドライン引数つきでプロセスを呼び出す機能が備わっているため、非常に簡単でもあります。
ただし、この方法にはいくつか欠点があります。

//////////////////////////
One is that all the output is in plain text.
This means that you'll have to parse Git's occasionally-changing output format to read progress and result information, which can be inefficient and error-prone.
//////////////////////////
一つ目は、出力が全てプレインテキストであるという点です。
これはつまり、処理の進捗や結果を取得したければ、Gitの出力フォーマット（ちょくちょく変わる）を自前でパースする必要があるということです。これは非効率的ですし、エラーも発生しやすくなります。

//////////////////////////
Another is the lack of error recovery.
If a repository is corrupted somehow, or the user has a malformed configuration value, Git will simply refuse to perform many operations.
//////////////////////////
2つ目は、エラーから回復する方法がないという点です。
リポジトリが何らかの形で壊れていたり、ユーザが設定に不正を値を指定していたりした場合、Gitは単に多くの操作を受け付けなくなるだけです。

//////////////////////////
Yet another is process management.
Git requires you to maintain a shell environment on a separate process, which can add unwanted complexity.
Trying to coordinate many of these processes (especially when potentially accessing the same repository from several processes) can be quite a challenge.
//////////////////////////
3つ目は、プロセス管理です。
シェル環境を別プロセスとして管理する必要があるため、処理が不必要に複雑になります。
複数のGitのプロセスを協調動作させるのは（特に、複数のプロセスが同じリポジトリへアクセスする可能性がある場合は）、時に相当な困難を伴います。
