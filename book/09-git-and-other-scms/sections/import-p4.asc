[[r_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))
//////////////////////////
The next system you'll look at importing from is Perforce.
As we discussed above, there are two ways to let Git and Perforce talk to each other: git-p4 and Perforce Git Fusion.
//////////////////////////
次のインポート元としてとりあげるのは Perforce です。
前述の通り、 Git と Perforce を相互接続するには2つの方法があります。 git-p4 と Perforce Git Fusion です。

===== Perforce Git Fusion

//////////////////////////
Git Fusion makes this process fairly painless.
Just configure your project settings, user mappings, and branches using a configuration file (as discussed in <<r_p4_git_fusion>>), and clone the repository.
Git Fusion leaves you with what looks like a native Git repository, which is then ready to push to a native Git host if you desire.
You could even use Perforce as your Git host if you like.
//////////////////////////
Git Fusion を使えば、移行のプロセスに労力はほぼかかりません。（ <<r_p4_git_fusion>> で述べた通り）設定ファイルで、プロジェクトの設定、ユーザのマッピング、およびブランチの設定を行った後、リポジトリをクローンすれば完了です。
Git Fusion がネイティブな Git リポジトリと類似の環境を提供してくれるので、お望みとあればいつでも、本物のネイティブな Git リポジトリへプッシュする準備はできているというわけです。
また、お望みなら、 Perforce を Git のホストとして使用することもできます。

[[r_git_p4]]
//////////////////////////
===== Git-p4
//////////////////////////
===== git-p4

//////////////////////////
Git-p4 can also act as an import tool.
As an example, we'll import the Jam project from the Perforce Public Depot.
To set up your client, you must export the P4PORT environment variable to point to the Perforce depot:
//////////////////////////
git-p4 はインポート用ツールとしても使えます。
例として、 Perforce Public Depot から Jam プロジェクトをインポートしてみましょう。
クライアントをセットアップするには、環境変数 P4PORT をエクスポートして Perforce ディポの場所を指すようにしなければなりません。

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
//////////////////////////
In order to follow along, you'll need a Perforce depot to connect with.
We'll be using the public depot at public.perforce.com for our examples, but you can use any depot you have access to.
//////////////////////////
以降の手順に従うには、アクセスできる Perforce のディポが必要です。
この例では public.perforce.com にある公開ディポを使用していますが、アクセス権があればどんなディポでも使用できます。
====

(((git commands, p4)))
//////////////////////////
Run the `git p4 clone` command to import the Jam project from the Perforce server, supplying the depot and project path and the path into which you want to import the project:
//////////////////////////
`git p4 clone` コマンドを実行して、 Perforce サーバから Jam プロジェクトをインポートします。ディポとプロジェクトのパス、およびプロジェクトのインポート先のパスを指定します。

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

//////////////////////////
This particular project has only one branch, but if you have branches that are configured with branch views (or just a set of directories), you can use the `--detect-branches` flag to `git p4 clone` to import all the project's branches as well.
See <<r_git_p4_branches>> for a bit more detail on this.
//////////////////////////
このプロジェクトにはブランチがひとつしかありませんが、ブランチビューで設定されたブランチ（またはディレクトリ）があるなら、 `git p4 clone` に `--detect-branches` フラグを指定すれば、プロジェクトのブランチすべてをインポートできます。
この詳細については <<r_git_p4_branches>> を参照してください。

//////////////////////////
At this point you're almost done.
If you go to the `p4import` directory and run `git log`, you can see your imported work:
//////////////////////////
この時点で作業はおおむね完了です。
`p4import` ディレクトリへ移動して `git log` を実行すると、インポートした成果物を確認できます。

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

//////////////////////////
You can see that `git-p4` has left an identifier in each commit message.
It's fine to keep that identifier there, in case you need to reference the Perforce change number later.
However, if you'd like to remove the identifier, now is the time to do so – before you start doing work on the new repository.
(((git commands, filter-branch)))
You can use `git filter-branch` to remove the identifier strings en masse:
//////////////////////////
`git-p4` が各コミットメッセージに識別子を追加しているのが分かると思います。
この識別子はそのままにしておいてもかまいません。後で万一 Perforce のチェンジ番号を参照しなければならなくなったときのために使えます。しかし、もし削除したいのなら、新しいリポジトリ上で何か作業を始める前の、この段階で消しておきましょう。
(((git commands, filter-branch)))
`git filter-branch` を使えば、この識別子を一括削除することができます。

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

//////////////////////////
If you run `git log`, you can see that all the SHA-1 checksums for the commits have changed, but the `git-p4` strings are no longer in the commit messages:
//////////////////////////
`git log` を実行すると、コミットの SHA-1 チェックサムは変わりましたが、 `git-p4` という文字列がコミットメッセージから消えたことが分かると思います。

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

//////////////////////////
Your import is ready to push up to your new Git server.
//////////////////////////
これで、インポート結果を新しい Git サーバへプッシュする準備ができました。

