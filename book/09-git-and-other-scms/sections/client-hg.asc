//////////////////////////
==== Git and Mercurial
//////////////////////////
==== Git と Mercurial

(((Interoperation with other VCSs, Mercurial)))
(((Mercurial)))
//////////////////////////
The DVCS universe is larger than just Git.
In fact, there are many other systems in this space, each with their own angle on how to do distributed version control correctly.
Apart from Git, the most popular is Mercurial, and the two are very similar in many respects.
//////////////////////////
DVCSの世界にあるのはGitだけではありません。
事実、Git以外にも様々なシステムが存在し、分散バージョン管理を正しく行う方法について、それぞれが独自の見方を持っています。
Gitを除くと、もっとも広く使われているのは Mercurial です。Git と Mercurialは多くの点で似通っています。

//////////////////////////
The good news, if you prefer Git's client-side behavior but are working with a project whose source code is controlled with Mercurial, is that there's a way to use Git as a client for a Mercurial-hosted repository.
Since the way Git talks to server repositories is through remotes, it should come as no surprise that this bridge is implemented as a remote helper.
The project's name is git-remote-hg, and it can be found at https://github.com/felipec/git-remote-hg[].
//////////////////////////
良いニュースとして、 Git のクライアントサイドの動作がお好みで、しかし作業中のプロジェクトでは Mercurial でソースを管理しているという場合、 Mercurial でホストされているリポジトリのクライアントに Git を使用するという方法があります。
Git はリモートを通してサーバリポジトリとやりとりしているので、このブリッジがリモートヘルパーとして実装されているのは驚くほどのことでもないと思います。
プロジェクト名は git-remote-hg で、 https://github.com/felipec/git-remote-hg[] から取得できます。

===== git-remote-hg

//////////////////////////
First, you need to install git-remote-hg.
This basically entails dropping its file somewhere in your path, like so:
//////////////////////////
まず、 git-remote-hg をインストールする必要があります。 
ここでは基本的に、そのファイルをどこかパスの通った場所に置く必要があります。以下のような感じです。

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

//////////////////////////
…assuming `~/bin` is in your `$PATH`.
Git-remote-hg has one other dependency: the `mercurial` library for Python.
If you have Python installed, this is as simple as:
//////////////////////////
…ここでは `~/bin` が `$PATH` に含まれていることを仮定しています。
git-remote-hg にはもう一つ依存先があります。 Python の `mercurial` ライブラリです。
Python をインストール済みなら、これは次のようにシンプルなコマンドで行えます。

[source,console]
----
$ pip install mercurial
----

//////////////////////////
(If you don't have Python installed, visit https://www.python.org/[] and get it first.)
//////////////////////////
（Python をインストールしていないなら、まず https://www.python.org/[] からPython を入手してください。）

//////////////////////////
The last thing you'll need is the Mercurial client.
Go to http://mercurial.selenic.com/[] and install it if you haven't already.
//////////////////////////
最後に必要なのは Mercurial のクライアントです。
インストール済みでないなら、 http://mercurial.selenic.com/[] から入手してインストールしてください。

//////////////////////////
Now you're ready to rock.
All you need is a Mercurial repository you can push to.
Fortunately, every Mercurial repository can act this way, so we'll just use the "hello world" repository everyone uses to learn Mercurial:
//////////////////////////
これで準備が整いました。
必要なのはプッシュが可能な Mercurial リポジトリだけです。
幸いなことに、 Mercurial リポジトリならどれでもこの操作が可能です。そのため、 Mercurial の使い方を学ぶときにみんなが使う "hello world" リポジトリを使用することにします。

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

//////////////////////////
===== Getting Started
//////////////////////////
===== 使いはじめる

//////////////////////////
Now that we have a suitable ``server-side'' repository, we can go through a typical workflow.
As you'll see, these two systems are similar enough that there isn't much friction.
//////////////////////////
これで、都合のいい ``サーバサイド'' のリポジトリができたので、以降では典型的なワークフローを見ていきます。
これから見ていくように、 Git と Mercurial はよく似ているため、食い違う箇所はそう多くありません。

//////////////////////////
As always with Git, first we clone:
//////////////////////////
Git でいつもやるように、まずクローンをします。

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
You'll notice that working with a Mercurial repository uses the standard `git clone` command.
That's because git-remote-hg is working at a fairly low level, using a similar mechanism to how Git's HTTP/S protocol is implemented (remote helpers).
Since Git and Mercurial are both designed for every client to have a full copy of the repository history, this command makes a full clone, including all the project's history, and does it fairly quickly.
//////////////////////////
標準的な `git clone` コマンドを使用して Mercurial リポジトリを操作しているのが分かると思います。 
これは git-remote-hg が非常に低いレベルで動作しているためです。 git-remote-hg は Git が HTTP/S プロトコルを実装しているのと同じようなメカニズム（リモートヘルパー）を使用しています。
Git と Mercurial は両方とも、すべてのクライアントがリポジトリの歴史の完全なコピーを持つように設計されています。そのためこのコマンドは、プロジェクトのすべての歴史を含む完全なクローンを作成します。また、この処理は非常に高速に行われます。

//////////////////////////
The log command shows two commits, the latest of which is pointed to by a whole slew of refs.
It turns out some of these aren't actually there.
Let's take a look at what's actually in the `.git` directory:
//////////////////////////
git logコマンドは2つのコミットを表示しています。最新のコミットは大量の参照から指されています。
実は、これらの中のいくつかは、実際には存在しません。
`.git` ディレクトリの中に実際には何が入っているか見てみましょう。

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

//////////////////////////
Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it's managing the conceptual mapping between two slightly different systems.
The `refs/hg` directory is where the actual remote refs are stored.
For example, the `refs/hg/origin/branches/default` is a Git ref file that contains the SHA-1 starting with ``ac7955c'', which is the commit that `master` points to.
So the `refs/hg` directory is kind of like a fake `refs/remotes/origin`, but it has the added distinction between bookmarks and branches.
//////////////////////////
git-remote-hg は、物事をより Git 風にしようとしているわけですが、内部的には、2つの微妙に異なるシステムの間のマッピングを管理しています。
`refs/hg` ディレクトリには実際のリモート参照が格納されています。
例えば、 `refs/hg/origin/branches/default` は ``ac7955c'' で始まるSHA-1（ `master` が指しているコミットを表している）を含むGitの参照ファイルです。
そのため、 `refs/hg` ディレクトリは `refs/remotes/origin` の模造品のようなものとも言えます。ただし、ブックマークとブランチの区別が追加されています。

//////////////////////////
The `notes/hg` file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let's explore a bit:
//////////////////////////
`notes/hg` ファイルは、 git-remote-hg が Git のコミットハッシュと Mercurial のチェンジセットIDを対応付ける際の開始点となります。
ちょっと見てみましょう。

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

//////////////////////////
So `refs/notes/hg` points to a tree, which in the Git object database is a list of other objects with names.
`git ls-tree` outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named ``ac9117f'' (the SHA-1 hash of the commit pointed to by `master`), with contents ``0a04b98'' (which is the ID of the Mercurial changeset at the tip of the `default` branch).
//////////////////////////
`refs/notes/hg` は Git オブジェクトデータベース中にあるツリーを指しており、その内容は他のオブジェクトの名前つきリストになっています。
`git ls-tree` はツリー中の要素のモード、タイプ、オブジェクトハッシュ、およびファイル名を出力します。
ツリー中の要素の一つについて掘り下げていくと、その実体は ``ac9117f'' （ `master` が指しているコミットの SHA-1 ハッシュ）という名前の blob で、内容は ``0a04b98'' （ `default` ブランチの先端の Mercurial チェンジセットのID）であることが分かります。

//////////////////////////
The good news is that we mostly don't have to worry about all of this.
The typical workflow won't be very different from working with a Git remote.
//////////////////////////
よいニュースとして、これらすべてのことについて、我々が気にする必要はほとんどありません。
典型的なワークフローは、 Git でリモートに対して作業をする場合と大差ありません。

//////////////////////////
There's one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it's likely you don't want to actually commit a `.gitignore` file into a Mercurial repository.
Fortunately, Git has a way to ignore files that's local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over:
//////////////////////////
以降の話をする前に、もう一つ注意しておかなければならないことがあります。 ignoreファイルです。
Mercurial と Git はこの点について非常に似通ったメカニズムを使用しています。ですが、おそらく実際に `.gitignore` ファイルを Mercurial リポジトリへコミットしたい、ということはないでしょう。
幸いなことに、 Git にはローカルからディスク上のリポジトリへファイルを登録する際に、指定したファイルを無視する方法があります。Mercurial のフォーマットは Git と互換性があるので、単にファイルをコピーするだけで済みます。 

[source,console]
----
$ cp .hgignore .git/info/exclude
----

//////////////////////////
The `.git/info/exclude` file acts just like a `.gitignore`, but isn't included in commits.
//////////////////////////
`.git/info/exclude` ファイルは `.gitignore` と同様の働きをしますが、コミットには含まれません。

<<<<<<< HEAD

//////////////////////////
=======
>>>>>>> upstream/master
===== Workflow
//////////////////////////
===== ワークフロー

//////////////////////////
Let's assume we've done some work and made some commits on the `master` branch, and you're ready to push it to the remote repository.
Here's what our repository looks like right now:
//////////////////////////
現在、何らかの作業をやり終え、 `master` ブランチにはコミットがいくつか作成されており、それをリモートリポジトリへプッシュできる状態にあるとしましょう。 
現時点では、リポジトリは次のような内容になっています。

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Our `master` branch is two commits ahead of `origin/master`, but those two commits exist only on our local machine.
Let's see if anyone else has been doing important work at the same time:
//////////////////////////
`master` ブランチは `origin/master` よりコミット2つぶん進んでいますが、これら2つのコミットはローカルのマシン上にしかありません。 
ここで、誰か他の人が、何か重要な作業をこれと同時に行っていたらどうなるか見てみましょう。

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Since we used the `--all` flag, we see the ``notes'' refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; `origin/master` has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we're not going to do anything fancy.
//////////////////////////
`--all` フラグを指定したため、 ``notes'' 参照が表示されていますが、これは git-remote-hg が内部的に使用しているものなので、無視して構いません。
残りが期待していた内容です。 `origin/master` はコミット1つぶん進んでおり、現在この歴史は枝分かれした状態にあります。
この章で扱っている他のシステムと異なり、 Mercurial にはマージをハンドリングする機能が備わっているので、ややこしいことをする必要は何もありません。

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Perfect.
We run the tests and everything passes, so we're ready to share our work with the rest of the team:
//////////////////////////
完璧です。
テストを実行して、結果はすべて正常でした。これで、成果物をチームの他のメンバーと共有できる状態になりました。

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

//////////////////////////
That's it!
If you take a look at the Mercurial repository, you'll see that this did what we'd expect:
//////////////////////////
これで完了です！
Mercurial リポジトリを見てみれば、期待していた内容が分かるはずです。

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
The changeset numbered _2_ was made by Mercurial, and the changesets numbered _3_ and _4_ were made by git-remote-hg, by pushing commits made with Git.
//////////////////////////
番号 _2_ のチェンジセットは Mercurial が作成したもので、番号 _3_ および _4_ のチェンジセットは Git で作成したコミットを git-remote-hg がプッシュして作成したものです。 

//////////////////////////
===== Branches and Bookmarks
//////////////////////////
===== ブランチとブックマーク

//////////////////////////
Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a ``bookmark,'' and it behaves in much the same way as a Git branch.
//////////////////////////
Git のブランチは1種類しかありません。コミットに合わせて移動する参照です。
Mercurial では、この種の参照は ``ブックマーク'' と呼ばれており、 Git のブランチとほぼ同じように振る舞います。

//////////////////////////
Mercurial's concept of a ``branch'' is more heavyweight.
The branch that a changeset is made on is recorded _with the changeset_, which means it will always be in the repository history.
Here's an example of a commit that was made on the `develop` branch:
//////////////////////////
Mercurial の言う ``ブランチ'' は Git のそれよりもっと重量級の概念です。
ブランチの上でチェンジセットが作成された場合、ブランチは _チェンジセットと一緒に_ 記録されます。つまり、常にリポジトリの歴史に残ります。 
`develop` ブランチの上で作成されたコミットの例を次に示します。

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

//////////////////////////
Note the line that begins with ``branch''.
Git can't really replicate this (and doesn't need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares.
//////////////////////////
``branch'' で始まる行に注目してください。
Git はこれを完全に複製することはできません（また、する必要もありません。いずれのタイプのブランチも Git では参照として表現されるため）が、 Mercurial にとってはこの違いが問題となるため、 git-remote-hg はこの違いを理解している必要があります。

//////////////////////////
Creating Mercurial bookmarks is as easy as creating Git branches.
On the Git side:
//////////////////////////
Mercurial のブックマークを作成するのは、 Git のブランチを作成するのと同様に簡単です。
Git 側では、

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

//////////////////////////
That's all there is to it.
On the Mercurial side, it looks like this:
//////////////////////////
これだけです。
Mercurial 側では、これは次のように見えます。

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
Note the new `[featureA]` tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can't delete a bookmark from the Git side (this is a limitation of remote helpers).
//////////////////////////
リビジョン5に付いている新しいタグ `[featureA]` に注目してください。 
これらの挙動は Git 側から見ると Git のブランチと非常によく似ていますが、一つ例外があります。 Git の側からブックマークを削除することはできません（これはリモートヘルパーの制限によります）。

//////////////////////////
You can work on a ``heavyweight'' Mercurial branch also: just put a branch in the `branches` namespace:
//////////////////////////
``重量級'' の Mercurial のブランチ上で作業をすることもできます。 `branches` 名前空間にブランチを追加します。

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

//////////////////////////
Here's what that looks like on the Mercurial side:
//////////////////////////
Mercurial 側ではこれは次のように見えます。

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

//////////////////////////
The branch name ``permanent'' was recorded with the changeset marked _7_.
//////////////////////////
``permanent'' という名前のブランチが、 _7_ とマークされたチェンジセットと一緒に記録されています。

//////////////////////////
From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn't support rewriting history, only adding to it.
Here's what our Mercurial repository looks like after an interactive rebase and a force-push:
//////////////////////////
Git 側では、いずれのタイプのブランチで作業をするのも変わりません。普段と同じように、チェックアウト、コミット、フェッチ、マージ、プル、プッシュが行えます。
一つ知っておくべきこととして、 Mercurial は歴史の書き換えをサポートしておらず、追記しか行えません。
対話的リベースと強制プッシュを行うと、 Mercurial リポジトリは次のような内容になります。 

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
Changesets _8_, _9_, and _10_ have been created and belong to the `permanent` branch, but the old changesets are still there.
This can be *very* confusing for your teammates who are using Mercurial, so try to avoid it.
//////////////////////////
チェンジセット _8_、 _9_、 _10_ が作成され、 `permanent` ブランチに紐付けられていますが、古いチェンジセットも残っています。
これは Mercurial を使用している他のチームメンバーを *かなり* 混乱させるので、できる限り避けましょう。


//////////////////////////
===== Mercurial Summary
//////////////////////////
===== Mercurial のまとめ

//////////////////////////
Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that's left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial.
//////////////////////////
Git と Mercurial は非常に似通っており、相互に作業してもほとんど苦になりません。
（一般的に推奨されているように）あなたのマシン上にある歴史を変更しないようにさえしていれば、相手側にあるのが Mercurial であることを意識する必要もありません。
