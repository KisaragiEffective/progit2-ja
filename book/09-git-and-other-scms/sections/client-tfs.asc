//////////////////////////
==== Git and TFS
//////////////////////////
==== Git と TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
//////////////////////////
Git is becoming popular with Windows developers, and if you're writing code on Windows, there's a good chance you're using Microsoft's Team Foundation Server (TFS).
TFS is a collaboration suite that includes defect and work-item tracking, process support for Scrum and others, code review, and version control.
There's a bit of confusion ahead: *TFS* is the server, which supports controlling source code using both Git and their own custom VCS, which they've dubbed *TFVC* (Team Foundation Version Control).
Git support is a somewhat new feature for TFS (shipping with the 2013 version), so all of the tools that predate that refer to the version-control portion as ``TFS'', even though they're mostly working with TFVC.
//////////////////////////
Git は Windows を利用する開発者の間でもよく使われるようになってきています。 Windows 上でコードを書いているのなら、 Microsoft の Team Foundation Server (TFS) を使用することもあるでしょう。
TFS はコラボレーションスイートで、不具合および作業成果物に対するトラッキング、 Scrum やその他の開発プロセスのサポート、コードレビュー、そしてバージョン管理といった機能が含まれています。
ここがちょっとややこしいところなのですが、 *TFS* 自体はサーバで、ソースコード管理には、 Git や TFS 専用のバージョン管理システム（ *TFVC* (Team Foundation Version Control) とも呼ばれる）をサポートしています。
TFS の Git サポートは幾分新しい機能（バージョン2013から搭載）なので、それ以前からあったツールはどれも、実際にはほぼ TFVC だけを使用している場合であっても、バージョン管理部分のことを ``TFS'' と呼んでいます。

//////////////////////////
If you find yourself on a team that's using TFVC but you'd rather use Git as your version-control client, there's a project for you.
//////////////////////////
所属しているチームは TFVC を使用しているけれど、あなた自身はバージョン管理のクライアントに Git を使用したいという場合には、そのためのプロジェクトがあります。

//////////////////////////
===== Which Tool
//////////////////////////
===== どちらのツールを使うか

(((git-tf)))(((git-tfs)))
//////////////////////////
In fact, there are two: git-tf and git-tfs.
//////////////////////////
実際には、ツールは2つあります。 git-tf と git-tfs です。

//////////////////////////
Git-tfs (found at https://github.com/git-tfs/git-tfs[]) is a .NET project, and (as of this writing) it only runs on Windows.
To work with Git repositories, it uses the .NET bindings for libgit2, a library-oriented implementation of Git which is highly performant and allows a lot of flexibility with the guts of a Git repository.
Libgit2 is not a complete implementation of Git, so to cover the difference git-tfs will actually call the command-line Git client for some operations, so there are no artificial limits on what it can do with Git repositories.
Its support of TFVC features is very mature, since it uses the Visual Studio assemblies for operations with servers.
This does mean you'll need access to those assemblies, which means you need to install a recent version of Visual Studio (any edition since version 2010, including Express since version 2012), or the Visual Studio SDK.
//////////////////////////
git-tfs （ https://github.com/git-tfs/git-tfs[] から入手できます）は .NET プロジェクトで、（これを書いている時点では）Windows でのみ動作します。
git-tfs は、Git リポジトリに対する操作に libgit2 の .NET バインディングを使用しています。libgit2 はライブラリ指向の Git の実装で、処理性能が高く、また Git の内部に対して柔軟な操作が行えるようになっています。
libgit2 は Git の機能を網羅的に実装してはいないため、その差を埋めるために、 git-tfs の一部の操作では実際にはコマンドライン版の Git クライアントが呼び出されています。そのため、Git リポジトリに対する操作に関して、git-tfs の設計に起因した制約は特にありません。
git-tfs は、 TFS サーバの操作に Visual Studio のアセンブリを使用しているため、TFVC 向け機能は非常に成熟しています。
また、これは Visual Studio のアセンブリにアクセスできる必要があるということでもあります。そのため、比較的新しいバージョンの Visual Studio （Visual Studio 2010以降の任意のエディション。バージョン2012以降の Visual Studio Express でもよい）か、Visual Studio SDK のインストールが必要です。

//////////////////////////
Git-tf (whose home is at https://gittf.codeplex.com[]) is a Java project, and as such runs on any computer with a Java runtime environment.
It interfaces with Git repositories through JGit (a JVM implementation of Git), which means it has virtually no limitations in terms of Git functions.
However, its support for TFVC is limited as compared to git-tfs – it does not support branches, for instance.
//////////////////////////
git-tf （ホームページは https://gittf.codeplex.com[] ）は Java プロジェクトで、Java実行環境のあるあらゆるコンピュータで実行できます。
git-tf は Git リポジトリに対する操作に JGit （JVM 用の Git の実装）を使用しているため、 Git の機能という観点においては事実上制約はありません。
しかし、 TFVC に対するサポートは git-tfs と比較すると限定的です – 例えば、ブランチをサポートしていません。

//////////////////////////
So each tool has pros and cons, and there are plenty of situations that favor one over the other.
We'll cover the basic usage of both of them in this book.
//////////////////////////
どちらのツールにも長所と短所があり、また一方よりもう一方が向いている状況というのはいくらでもあります。
本書では、2つのツールの基本的な使用法について取り上げます。

[NOTE]
====
//////////////////////////
You'll need access to a TFVC-based repository to follow along with these instructions.
These aren't as plentiful in the wild as Git or Subversion repositories, so you may need to create one of your own.
Codeplex (https://www.codeplex.com[]) or Visual Studio Online (http://www.visualstudio.com[]) are both good choices for this.
//////////////////////////
以降の手順に従って操作を行うには、 TFVC ベースのリポジトリへのアクセス権が必要です。
そのようなリポジトリは Git や Subversion のリポジトリほど世の中にありふれたものではないので、自前で作成する必要があるかもしれません。
この場合、 Codeplex (https://www.codeplex.com[]) や Visual Studio Online (http://www.visualstudio.com[]) を利用するのがよいでしょう。
====


//////////////////////////
===== Getting Started: `git-tf`
//////////////////////////
===== 使いはじめる: `git-tf` の場合

//////////////////////////
The first thing you do, just as with any Git project, is clone.
Here's what that looks like with `git-tf`:
//////////////////////////
最初に行うことは、あらゆる Git プロジェクトと同様、クローンです。
 `git-tf` は次のような感じです。

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

//////////////////////////
The first argument is the URL of a TFVC collection, the second is of the form `$/project/branch`, and the third is the path to the local Git repository that is to be created (this last one is optional).
Git-tf can only work with one branch at a time; if you want to make checkins on a different TFVC branch, you'll have to make a new clone from that branch.
//////////////////////////
最初の引数は TFVC コレクションの URL で、2番目の引数は `$/プロジェクト/ブランチ` の形式になっており、3番目の引数はローカルに作成する Git リポジトリのパスです（3番目の引数はオプショナルです）。
git-tf は一度にひとつのブランチしか扱えません。別の TFVC ブランチへチェックインしたい場合は、対象のブランチから新しくクローンを作成する必要があります。

//////////////////////////
This creates a fully functional Git repository:
//////////////////////////
次のコマンドで、フル機能の Git リポジトリが作成できます。

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

//////////////////////////
This is called a _shallow_ clone, meaning that only the latest changeset has been downloaded.
TFVC isn't designed for each client to have a full copy of the history, so git-tf defaults to only getting the latest version, which is much faster.
//////////////////////////
これは _シャロー_ クローンと言われるもので、最新のチェンジセットだけがダウンロードされます。
TFVC は、各クライアントが歴史の完全なコピーを持つようには設計されていません。そのため git-tf は、幾分高速な、最新のバージョンだけを取得する方法をデフォルトとしています。

//////////////////////////
If you have some time, it's probably worth it to clone the entire project history, using the `--deep` option:
//////////////////////////
時間があるなら、プロジェクトの歴史全体をクローンしてみるといいでしょう。 `--deep` オプションを使用します。

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

//////////////////////////
Notice the tags with names like `TFS_C35189`; this is a feature that helps you know which Git commits are associated with TFVC changesets.
This is a nice way to represent it, since you can see with a simple log command which of your commits is associated with a snapshot that also exists in TFVC.
They aren't necessary (and in fact you can turn them off with `git config git-tf.tag false`) – git-tf keeps the real commit-changeset mappings in the `.git/git-tf` file.
//////////////////////////
`TFS_C35189` のような名前のタグに注目してください。これは、Git のどのコミットが、 TFVC のどのチェンジセットに対応しているかを分かりやすくするための機能です。
タグで表現するというのは上手い方法です。簡単な log コマンドだけで、どのコミットが TFVC 中のどのスナップショットに対応しているか確認できます。
なお、このタグ付けは必須ではありません（実際、 `git config git-tf.tag false` で無効にできます） – git-tf では、コミットとチェンジセットとのマッピングは `.git/git-tf` に保存されています。

//////////////////////////
===== Getting Started: `git-tfs`
//////////////////////////
===== 使いはじめる: `git-tfs` の場合

//////////////////////////
Git-tfs cloning behaves a bit differently.
Observe:
//////////////////////////
git-tfs のクローン処理は、 git-tf とは少し異なります。
見てみましょう。

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

//////////////////////////
Notice the `--with-branches` flag.
Git-tfs is capable of mapping TFVC branches to Git branches, and this flag tells it to set up a local Git branch for every TFVC branch.
This is highly recommended if you've ever branched or merged in TFS, but it won't work with a server older than TFS 2010 – before that release, ``branches'' were just folders, so git-tfs can't tell them from regular folders.
//////////////////////////
`--with-branches` フラグに注意してください。
git-tfs では TFVC のブランチを Git のブランチへマッピングできます。ここで `--with-branches` フラグは、 git-tfs に対し、すべての TFVC ブランチについて、対応するブランチをローカルの Git に作成するよう指示しています。
TFS 上で一度でもブランチの作成やマージを行っている場合、このオプションを指定することを強くお勧めします。ただし、このオプションは TFS 2010 より古いバージョンのサーバでは動作しません – それ以前のリリースでは ``ブランチ'' はただのフォルダだったためです。 git-tfs は単なるフォルダからはそのような指示は行えません。

//////////////////////////
Let's take a look at the resulting Git repository:
//////////////////////////
結果の Git リポジトリを見てみましょう。

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

//////////////////////////
There are two local branches, `master` and `featureA`, which represent the initial starting point of the clone (`Trunk` in TFVC) and a child branch (`featureA` in TFVC).
You can also see that the `tfs` ``remote'' has a couple of refs too: `default` and `featureA`, which represent TFVC branches.
Git-tfs maps the branch you cloned from to `tfs/default`, and others get their own names.
//////////////////////////
2つのローカルブランチ `master` と `featureA` があり、それぞれ最初のクローンの開始位置（ TFVC の `Trunk` ）と、子のブランチ（ TFVC の `featureA` ）を表しています。
また ``リモート'' `tfs` にも `default` と `featureA` の2つの参照があり、これは TFVC のブランチを表現しています。
git-tfs はクローン元のブランチを `tfs/default` へマッピングし、それ以外のブランチにはそれぞれのブランチ名を付与します。

//////////////////////////
Another thing to notice is the `git-tfs-id:` lines in the commit messages.
Instead of tags, git-tfs uses these markers to relate TFVC changesets to Git commits.
This has the implication that your Git commits will have a different SHA-1 hash before and after they have been pushed to TFVC.
//////////////////////////
もうひとつ注意すべき点として、コミットメッセージにある `git-tfs-id:` という行があります。
タグとは異なり、このマーカーは git-tfs が TFVC のチェンジセットを Git のコミットへ対応づけるのに使用しています。
これは、TFVC にプッシュする前と後とで Git のコミットの SHA-1 ハッシュが異なるということを暗黙的に意味しています。

//////////////////////////
===== Git-tf[s] Workflow
//////////////////////////
===== git-tf[s] のワークフロー

[NOTE]
====
//////////////////////////
Regardless of which tool you're using, you should set a couple of Git configuration values to avoid running into issues.
//////////////////////////
どちらのツールを使用するにせよ、問題を避けるため、次の2つの Git の設定値をセットする必要があります。

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

//////////////////////////
The obvious next thing you're going to want to do is work on the project.
TFVC and TFS have several features that may add complexity to your workflow:
//////////////////////////
当たり前ですが、次はプロジェクトに対して作業を行いたいことと思います。
TFVC および TFS には、ワークフローをややこしくする機能がいくつかあります。

//////////////////////////
. Feature branches that aren't represented in TFVC add a bit of complexity.
  This has to do with the *very* different ways that TFVC and Git represent branches.
. Be aware that TFVC allows users to ``checkout'' files from the server, locking them so nobody else can edit them.
  This obviously won't stop you from editing them in your local repository, but it could get in the way when it comes time to push your changes up to the TFVC server.
. TFS has the concept of ``gated'' checkins, where a TFS build-test cycle has to complete successfully before the checkin is allowed.
  This uses the ``shelve'' function in TFVC, which we don't cover in detail here.
    You can fake this in a manual fashion with git-tf, and git-tfs provides the `checkintool` command which is gate-aware.
//////////////////////////
. TFVC 上に現れないフィーチャーブランチがあると、ややこしさが増します。
  これには、TFVC と Git とでブランチを表現する方法が *まったく* 異なることが関係しています。
. TFVC では、ユーザがサーバからファイルを ``チェックアウト'' して、他の誰も編集できないようにロックを掛けられることを認識しておいてください。
  ローカルリポジトリ上でファイルを編集する妨げには当然なりませんが、変更を TFVC サーバへプッシュする段になって邪魔になるかもしれません。
. TFS には ``ゲート'' チェックインという概念があります。これは、チェックインが許可されるには、 TFS のビルドとテストのサイクルが正常に終了する必要がある、というものです。
  これは TFVC の ``シェルブ'' 機能を使用していますが、これについてはここでは深入りしません。
    手作業でなら、git-tf でもこの方式をまねることはできます。 git-tfs はこれを考慮した `checkintool` コマンドを提供しています。

//////////////////////////
In the interest of brevity, what we'll cover here is the happy path, which sidesteps or avoids most of these issues.
//////////////////////////
話を簡潔にするため、ここで取り上げるのは、これらの問題を避けたり起こらないようにした、ハッピーな手順です。

//////////////////////////
===== Workflow: `git-tf`
//////////////////////////
===== ワークフロー: `git-tf` の場合

//////////////////////////
Let's say you've done some work, made a couple of Git commits on `master`, and you're ready to share your progress on the TFVC server.
Here's our Git repository:
//////////////////////////
ここでは、いくつか作業を終えて、 `master` に Git のコミットを2つ作成し、作業の成果を TFVC サーバで共有する準備ができているものとします。
Git リポジトリはこんな内容です。

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

//////////////////////////
We want to take the snapshot that's in the `4178a82` commit and push it up to the TFVC server.
First things first: let's see if any of our teammates did anything since we last connected:
//////////////////////////
`4178a82` のコミットでスナップショットを取って、 TFVC サーバへプッシュしたいものとします。
大事なことから先にとりかかりましょう。最後にリポジトリへ接続した後に、チームの他のメンバーが何か作業をしていなかったか見てみます。

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

//////////////////////////
Looks like someone else is working, too, and now we have divergent history.
This is where Git shines, but we have two choices of how to proceed:
//////////////////////////
やはり、他の誰かが作業をしているようです。歴史が分岐しています。
これは Git が得意とするところですが、進め方は2種類あります。

//////////////////////////
. Making a merge commit feels natural as a Git user (after all, that's what `git pull` does), and git-tf can do this for you with a simple `git tf pull`.
  Be aware, however, that TFVC doesn't think this way, and if you push merge commits your history will start to look different on both sides, which can be confusing.
  However, if you plan on submitting all of your changes as one changeset, this is probably the easiest choice.
. Rebasing makes our commit history linear, which means we have the option of converting each of our Git commits into a TFVC changeset.
  Since this leaves the most options open, we recommend you do it this way; git-tf even makes it easy for you with `git tf pull --rebase`.
//////////////////////////
. Git ユーザなら、マージコミットを行うのが自然に感じられるでしょう（ `git pull` が行うのがマージコミットなので）。 git-tf では単に `git tf pull` とすればマージコミットが行えます。
  ですが、ここで注意が必要なのは、 TFVC はこれを自然とは考えないということです。マージコミットをプッシュしたら、歴史は Git 側と TFVC 側とで異なる見た目になりだし、ややこしいことになります。
  一方、すべての変更をひとつのチェンジセットとして送信しようとしているのであれば、おそらくそれがもっとも簡単な選択肢です。
. リベースを行うと、歴史がリニアになります。つまり、 Git のコミットひとつひとつを TFVC のチェンジセットへ変換する選択肢がとれるということです。
  これが、以降の選択肢をもっとも広く取れる方法なので、この方法をお勧めします。git-tf でも、`git tf pull --rebase` で簡単に行えるようになっています。

//////////////////////////
The choice is yours.
For this example, we'll be rebasing:
//////////////////////////
どの方法をとるかはあなた次第です。
この例では、リベースする方法をとったとします。

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

//////////////////////////
Now we're ready to make a checkin to the TFVC server.
Git-tf gives you the choice of making a single changeset that represents all the changes since the last one (`--shallow`, which is the default) and creating a new changeset for each Git commit (`--deep`).
For this example, we'll just create one changeset:
//////////////////////////
さて、これで TFVC サーバへチェックインする準備ができました。
git-tf では、直近のチェンジセット以降のすべての変更を単一のチェンジセットにまとめる（ `--shallow` 、こっちがデフォルト）か、Git のコミットそれぞれに対して新しくチェンジセットを作成する（ `--deep` ）かを選択できます。
この例では、単一のチェンジセットにまとめる方法をとったとします。

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

//////////////////////////
There's a new `TFS_C35348` tag, indicating that TFVC is storing the exact same snapshot as the `5a0e25e` commit.
It's important to note that not every Git commit needs to have an exact counterpart in TFVC; the `6eb3eb5` commit, for example, doesn't exist anywhere on the server.
//////////////////////////
新しくタグ `TFS_C35348` ができています。これは、 TFVC がコミット `5a0e25e` とまったく同じスナップショットを格納していることを意味します。
ここが重要なのですが、Git の各コミットが、すべて TFVC 側と対応づいている必要はありません。例えば、コミット `6eb3eb5` は、 TFVC サーバには存在しません。

//////////////////////////
That's the main workflow.
There are a couple of other considerations you'll want to keep in mind:
//////////////////////////
以上が主なワークフローです。
他にも、考慮すべき点として気をつけるべきものが2つほどあります。

//////////////////////////
* There is no branching.
  Git-tf can only create Git repositories from one TFVC branch at a time.
* Collaborate using either TFVC or Git, but not both.
  Different git-tf clones of the same TFVC repository may have different commit SHA-1 hashes, which will cause no end of headaches.
* If your team's workflow includes collaborating in Git and syncing periodically with TFVC, only connect to TFVC with one of the Git repositories.
<<<<<<< HEAD
//////////////////////////
* ブランチはできません。
  git-tf にできるのは、 TFVC のブランチから、 Git のリポジトリを作ることだけで、それも一度にひとつずつしか作れません。
* 共同作業の際は、 TFVC と Git のいずれかだけを使用し、両方は使用しないでください。
  ひとつの TFVC リポジトリから、 git-tf で複数のクローンを作成した場合、各コミットの SHA-1 ハッシュそれぞれ異なります。コミットが作成されます。これは終わることのない頭痛の種になります。
* チームのワークフローに Git との協調作業が含まれており、定期的に TFVC との同期を取る場合、 TFVC へ接続する Git リポジトリはひとつだけにしてください。

//////////////////////////
===== Workflow: `git-tfs`
//////////////////////////
===== ワークフロー: `git-tfs` の場合

//////////////////////////
Let's walk through the same scenario using git-tfs.
Here are the new commits we've made to the `master` branch in our Git repository:
//////////////////////////
git-tfs を使用した場合と同じシナリオを見ていきましょう。
Git リポジトリには、 `master` ブランチに対して行った新しいコミットが入っています。

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

//////////////////////////
Now let's see if anyone else has done work while we were hacking away:
//////////////////////////
さて、我々が作業している間に、他の誰かが作業をしていなかったか見てみましょう。

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

//////////////////////////
Yes, it turns out our coworker has added a new TFVC changeset, which shows up as the new `aea74a0` commit, and the `tfs/default` remote branch has moved.
//////////////////////////
同僚が新しく TFVC のチェンジセットを追加しており、それが新しいコミット `aea74a0` として表示されている他に、リモートブランチ `tfs/default` が移動されていることがわかりました。

//////////////////////////
As with git-tf, we have two fundamental options for how to resolve this divergent history:
//////////////////////////
git-tf と同様に、この分岐した歴史を処理する基本的な方法は2つあります。

//////////////////////////
. Rebase to preserve a linear history.
. Merge to preserve what actually happened.
//////////////////////////
. 歴史をリニアに保つためにリベースを行う。
. 実際に起こったことを残しておくためマージを行う。

//////////////////////////
In this case, we're going to do a ``deep'' checkin, where every Git commit becomes a TFVC changeset, so we want to rebase.
//////////////////////////
この例では、Git の各コミットが TFVC のチェンジセットになる ``ディープ'' なチェックインを行おうとしているので、リベースをします。

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

//////////////////////////
Now we're ready to complete our contribution by checking in our code to the TFVC server.
We'll use the `rcheckin` command here to create a TFVC changeset for each Git commit in the path from HEAD to the first `tfs` remote branch found (the `checkin` command would only create one changeset, sort of like squashing Git commits).
//////////////////////////
これで、コードを TFVC サーバへチェックインして、 作業を完了する準備ができました。
ここでは `rcheckin` コマンドを使用し、HEAD から始めて最初の `tfs` リモートブランチが見つかるまでの Git の各コミットに対して、 TFVC のチェンジセットを作成します（ `checkin` コマンドでは、 Git のコミットをスカッシュするのと同様に、チェンジセットをひとつだけ作成します）。

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

//////////////////////////
Notice how after every successful checkin to the TFVC server, git-tfs is rebasing the remaining work onto what it just did.
That's because it's adding the `git-tfs-id` field to the bottom of the commit messages, which changes the SHA-1 hashes.
This is exactly as designed, and there's nothing to worry about, but you should be aware that it's happening, especially if you're sharing Git commits with others.
//////////////////////////
TFVC サーバへのチェックインが成功した後に行われている処理に注目してください。 git-tfs は直前の処理結果に対して、残りの作業結果をリベースしています。
これは、コミットメッセージの末尾に `git-tfs-id` フィールドを追記しており、SHA-1 ハッシュが変化するためです。
これは仕様通りの動作であり、何も心配することはありません。ですが、そのような変更がなされていることは（特に、 Git のコミットを他の人と共有している場合は）認識しておいてください。

//////////////////////////
TFS has many features that integrate with its version control system, such as work items, designated reviewers, gated checkins, and so on.
It can be cumbersome to work with these features using only a command-line tool, but fortunately git-tfs lets you launch a graphical checkin tool very easily:
//////////////////////////
TFS には、ワークアイテム、レビュー依頼、ゲートチェックインなど、バージョン管理システムと統合されている機能が数多くあります。
これらの機能をコマンドラインツールだけで使うのは大変ですが、幸いなことに、  git-tfs ではグラフィカルなチェックインツールを簡単に起動できるようになっています。

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

//////////////////////////
It looks a bit like this:
//////////////////////////
だいたいこんな感じで表示されます。

//////////////////////////
.The git-tfs checkin tool.
image::images/git-tfs-ct.png[The git-tfs checkin tool.]
//////////////////////////
.git-tfs のチェックインツール
image::images/git-tfs-ct.png[git-tfs のチェックインツール]

//////////////////////////
This will look familiar to TFS users, as it's the same dialog that's launched from within Visual Studio.
//////////////////////////
TFS ユーザは見慣れていると思いますが、これは Visual Studio から表示されるものと同じダイアログです。

//////////////////////////
Git-tfs also lets you control TFVC branches from your Git repository.
As an example, let's create one:
//////////////////////////
git-tfs では TFVC のブランチを Git のリポジトリから管理することもできます。
例として、ひとつ作成してみましょう。

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

//////////////////////////
Creating a branch in TFVC means adding a changeset where that branch now exists, and this is projected as a Git commit.
Note also that git-tfs *created* the `tfs/featureBee` remote branch, but `HEAD` is still pointing to `master`.
If you want to work on the newly-minted branch, you'll want to base your new commits on the `1d54865` commit, perhaps by creating a topic branch from that commit.
//////////////////////////
TFVC でブランチを作成するということは、そのブランチが存在する場所にチェンジセットを追加するということなので、結果としてそれは Git のコミットへ反映されます。
git-tfs はリモートブランチ `tfs/featureBee` の *作成は* しましたが、 `HEAD` は相変わらず `master` を指していることに注意してください。
新しく作成したブランチ上で作業をしたい場合は、コミット `1d54865` から新しいコミットを作成することになりますが、この場合は恐らくそのコミットから新しくトピックブランチを作成することになるでしょう。

//////////////////////////
===== Git and TFS Summary
//////////////////////////
===== Git と TFS のまとめ

//////////////////////////
Git-tf and Git-tfs are both great tools for interfacing with a TFVC server.
They allow you to use the power of Git locally, avoid constantly having to round-trip to the central TFVC server, and make your life as a developer much easier, without forcing your entire team to migrate to Git.
If you're working on Windows (which is likely if your team is using TFS), you'll probably want to use git-tfs, since its feature set is more complete, but if you're working on another platform, you'll be using git-tf, which is more limited.
As with most of the tools in this chapter, you should choose one of these version-control systems to be canonical, and use the other one in a subordinate fashion – either Git or TFVC should be the center of collaboration, but not both.
//////////////////////////
git-tf と git-tfs は、いずれも TFVC サーバに接続するための優れたツールです。
これらのツールにより、チーム全体を Git へ移行することなしに、ローカルで Git のパワーを享受でき、中央の TFVC サーバを定期的に巡回しなくて済み、開発者としての生活をより楽にすることができます。
Windows 上で作業をしているのなら（チームが TFS を使用しているなら多分そうだと思いますが）、機能がより網羅的な git-tfs を使用したいことと思います。また別のプラットフォーム上で作業をしているのなら、より機能の限られている git-tf を使用することになると思います。
この章で取り上げているほとんどのツールと同様、バージョン管理システムのうちひとつだけを正式なものとして、他は従属的な使い方にしておくべきです – Git か TFVC の両方ではなく、いずれか片方を共同作業の中心に置くべきです。
