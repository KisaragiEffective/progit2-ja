////////////////
=== Scripting GitHub
////////////////
=== スクリプトによる GitHub の操作

////////////////
So now we've covered all of the major features and workflows of GitHub, but any large group or project will have customizations they may want to make or external services they may want to integrate.
////////////////
ここまでで、GitHub の主要な機能や作業の流れはすべて紹介し終えました。
しかし、大規模なグループやプロジェクトでは、もう少しカスタマイズしたり、外部のサービスを組み込んだりしたくなることもあるかもしれません。

////////////////
Luckily for us, GitHub is really quite hackable in many ways. In this section we'll cover how to use the GitHub hooks system and it's API to make GitHub work how we want it to.
////////////////
GitHub は、そういったハックも簡単にできるようになっています。
ここでは、GitHub のフックシステムとその API の使いかたを説明します。GitHub の動きが望みどおりになるようにしてみましょう。

////////////////
==== Hooks
////////////////
==== フック

////////////////
The Hooks and Services section of GitHub repository administration is the easiest way to have GitHub interact with external systems.
////////////////
GitHub のリポジトリのページ上にある Hooks や Services を利用すると、GitHub と外部のシステムとのやりとりを簡単に行えます。

////////////////
===== Services
////////////////
===== サービス

////////////////
First we'll take a look at Services. Both the Hooks and Services integrations can be found in the Settings section of your repository, where we previously looked at adding Collaborators and changing the default branch of your project. Under the ``Webhooks and Services'' tab you will see something like <<_services_hooks>>.
////////////////
まずはサービスから見てみましょう。
フックやサービスの統合は、どちらもリポジトリの設定画面から行えます。
先ほど Collaborator を追加したり、デフォルトのブランチを変更したりしたのと同じ画面です。
``Webhooks and Services'' タブを開くと、<<_services_hooks>> のような表示になるでしょう。

[[_services_hooks]]
////////////////
.Services and Hooks configuration section.
image::images/scripting-01-services.png[Services and hooks]
////////////////
.サービスとフックの設定画面
image::images/scripting-01-services.png[サービスとフック]

////////////////
There are dozens of services you can choose from, most of them integrations into other commercial and open source systems. Most of them are for Continuous Integration services, bug and issue trackers, chat room systems and documentation systems. We'll walk through setting up a very simple one, the Email hook. If you choose ``email'' from the ``Add Service'' dropdown, you'll get a configuration screen like <<_service_config>>.
////////////////
何十種類ものサービスの中から、追加するサービスを選べます。そのほとんどが、他の商用システムやオープンソースシステムとの統合を行うものです。
継続的インテグレーションサービス、バグ (課題) 追跡システム、チャットシステム、ドキュメント作成システムなどと統合できます。
ここでは、シンプルなサービスの例として、メール送信機能を組み込む方法を示します。
``Add Service'' のドロップダウンから ``email'' を選ぶと、<<_service_config>> のような設定画面が表示されます。

[[_service_config]]
////////////////
.Email service configuration.
image::images/scripting-02-email-service.png[Email service]
////////////////
.メールサービスの設定
image::images/scripting-02-email-service.png[メールサービス]

////////////////
In this case, if we hit the ``Add service'' button, the email address we specified will get an email every time someone pushes to the repository. Services can listen for lots of different types of events, but most only listen for push events and then do something with that data.
////////////////
ここで ``Add service'' ボタンを押すと、誰かがリポジトリにプッシュするたびに、指定したアドレスにメールが届くようになります。
サービスでは、プッシュ以外にもさまざまなイベントを待ち受けることができます。
しかし、大半のサービスは、プッシュイベントだけを待ち受けて、そのデータを使って何かをするというものです。

////////////////
If there is a system you are using that you would like to integrate with GitHub, you should check here to see if there is an existing service integration available. For example, if you're using Jenkins to run tests on your codebase, you can enable the Jenkins builtin service integration to kick off a test run every time someone pushes to your repository.
////////////////
自分たちが使っているシステムを GitHub と統合したいという場合は、
まずここをチェックして、統合のためのサービスが用意されていないかどうかを確かめましょう。
たとえば Jenkins を使ってテストを実行している場合は、Jenkins のサービスを組み込めば、
誰かがプロジェクトにプッシュするたびにテストを実行できるようになります。

////////////////
===== Hooks
////////////////
===== フック

////////////////
If you need something more specific or you want to integrate with a service or site that is not included in this list, you can instead use the more generic hooks system. GitHub repository hooks are pretty simple. You specify a URL and GitHub will post an HTTP payload to that URL on any event you want.
////////////////
もう少し細やかな処理をしたい場合や、統合したいサービスが一覧に含まれていない場合は、
より汎用的な機能であるフックシステムを使うことができます。
GitHub リポジトリのフック機能は、きわめてシンプルです。
URL を指定すると、何かのイベントが発生するたびに、GitHub がその URL に HTTP POST を行います。

////////////////
Generally the way this works is you can setup a small web service to listen for a GitHub hook payload and then do something with the data when it is received.
////////////////
この機能を使うには、GitHub のフック情報を含む投稿を待ち受けるちょっとした Web サービスを準備して、
受け取ったデータに対して何かの操作をさせればいいでしょう。

////////////////
To enable a hook, you click the ``Add webhook'' button in <<_services_hooks>>. This will bring you to a page that looks like <<_web_hook>>.
////////////////
フックを有効にするには、<<_services_hooks>> で ``Add webhook'' ボタンを押します。すると、<<_web_hook>> のようなページに移動します。

[[_web_hook]]
////////////////
.Web hook configuration.
image::images/scripting-03-webhook.png[Web hook]
////////////////
.Web フックの設定
image::images/scripting-03-webhook.png[Web フック]

////////////////
The configuration for a web hook is pretty simple. In most cases you simply enter a URL and a secret key and hit ``Add webhook''. There are a few options for which events you want GitHub to send you a payload for -- the default is to only get a payload for the `push` event, when someone pushes new code to any branch of your repository.
////////////////
設定項目は、このようにシンプルです。
たいていは、URL とシークレットキーを入力して ``Add webhook'' を押すだけで済むことでしょう。
どのイベントに対して GitHub から情報を送らせたいのかを選ぶこともできます。
デフォルトでは、`push` イベントの情報だけを送るようになっており、
誰かがどこかのブランチにプッシュするたびに、情報が送られます。

////////////////
Let's see a small example of a web service you may set up to handle a web hook. We'll use the Ruby web framework Sinatra since it's fairly concise and you should be able to easily see what we're doing.
////////////////
Web フックを処理するための、ちょっとした Web サービスの例を見てみましょう。
ここでは、Ruby のフレームワークである Sinatra を使いました。コードが簡潔で、何をやっているかがわかりやすいだろうからです。

////////////////
Let's say we want to get an email if a specific person pushes to a specific branch of our project modifying a specific file. We could fairly easily do that with code like this:
////////////////
特定のプロジェクトの特定のブランチ上にある特定のファイルへの変更を、特定の誰かがプッシュしたときにだけ、メールを送ろうとしています。
こんなコードを書けば、これを簡単に実現できます。

[source,ruby]
////////////////
----
require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON

  # gather the data we're looking for
  pusher = push["pusher"]["name"]
  branch = push["ref"]

  # get a list of all the files touched
  files = push["commits"].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # check for our criteria
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     "ALARM"
    end
  end
end
----
////////////////
----
require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # JSONをパースする

  # 使いたいデータを収集する
  pusher = push["pusher"]["name"]
  branch = push["ref"]

  # 変更されたファイルの一覧を取得する
  files = push["commits"].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # 条件をチェックする
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     "ALARM"
    end
  end
end
----

////////////////
Here we're taking the JSON payload that GitHub delivers us and looking up who pushed it, what branch they pushed to and what files were touched in all the commits that were pushed. Then we check that against our criteria and send an email if it matches.
////////////////
このコードは、GitHub から送られてくる JSON ペイロードを受け取って、
誰がどのブランチにプッシュしたのか、そしてそのコミットがどのファイルを変更したのかを調べています。
そして、条件を満たす変更であった場合に、メールを送信します。

////////////////
In order to develop and test something like this, you have a nice developer console in the same screen where you set the hook up. You can see the last few deliveries that GitHub has tried to make for that webhook. For each hook you can dig down into when it was delivered, if it was successful and the body and headers for both the request and the response. This makes it incredibly easy to test and debug your hooks.
////////////////
この手のプログラムの開発やテストに使える、便利な開発コンソールが用意されています。これは、フックの設定と同じ画面から利用できます。
このコンソールには、GitHub がそのフックを使おうとした際の記録が、直近の数回ぶん残されています。
それぞれのフックについて、この記録をたどれば、成功したかどうかを調べたり、リクエストとレスポンスの内容を確認したりすることができます。
これを利用すれば、フックのテストやデバッグがとても楽になることでしょう。

[[_web_hook_debug]]
////////////////
.Web hook debugging information.
image::images/scripting-04-webhook-debug.png[Webhook debug]
////////////////
.Web フックのデバッグ情報
image::images/scripting-04-webhook-debug.png[Webhook のデバッグ]

////////////////
The other great feature of this is that you can redeliver any of the payloads to test your service easily.
////////////////
また、このコンソールからは、任意のペイロードをサービスに再送することもできます。

////////////////
For more information on how to write webhooks and all the different event types you can listen for, go to the GitHub Developer documentation at: https://developer.github.com/webhooks/
////////////////
Web フックの書きかたや待ち受け可能なイベントなどの情報は、GitHub の開発者向けドキュメント
(https://developer.github.com/webhooks/) をご覧ください。

////////////////
==== The GitHub API
////////////////
==== GitHub API

(((GitHub, API)))
////////////////
Services and hooks give you a way to receive push notifications about events that happen on your repositories, but what if you need more information about these events? What if you need to automate something like adding collaborators or labeling issues?
////////////////
サービスやフックを使えば、リポジトリ上で発生したイベントについてのプッシュ通知を受け取ることができます。
しかし、そのイベントについて、さらに詳しい情報が知りたい場合はどうすればいいのでしょう？
Collaborator への追加や issue へのラベル付けなどを自動化したい場合は、どうすればいいのでしょう？

////////////////
This is where the GitHub API comes in handy. GitHub has tons of API endpoints for doing nearly anything you can do on the website in an automated fashion. In this section we'll learn how to authenticate and connect to the API, how to comment on an issue and how to change the status of a Pull Request through the API.
////////////////
そんなときに使えるのが GitHub API です。
GitHub はさまざまな API エンドポイントを提供しており、Web サイト上でできることならほぼすべて、自動化できます。
ここでは、API の認証と接続の方法を学び、
さらに、issue にコメントしたりプルリクエストの状態を変更したりといった操作を、API を使って行います。

////////////////
==== Basic Usage
////////////////
==== 基本的な使いかた

////////////////
The most basic thing you can do is a simple GET request on an endpoint that doesn't require authentication. This could be a user or read-only information on an open source project. For example, if we want to know more about a user named ``schacon'', we can run something like this:
////////////////
一番基本的な使いかたは、認証が不要なエンドポイントへのシンプルな GET リクエストです。
ユーザーの情報や、オープンなプロジェクトの情報 (読み込みのみ) を取得できます。
たとえば、``schacon'' というユーザーに関する情報を知りたければ、次のようにします。

[source,javascript]
----
$ curl https://api.github.com/users/schacon
{
  "login": "schacon",
  "id": 70,
  "avatar_url": "https://avatars.githubusercontent.com/u/70",
# …
  "name": "Scott Chacon",
  "company": "GitHub",
  "following": 19,
  "created_at": "2008-01-27T17:19:28Z",
  "updated_at": "2014-06-10T02:37:23Z"
}
----

////////////////
There are tons of endpoints like this to get information about organizations, projects, issues, commits -- just about anything you can publicly see on GitHub. You can even use the API to render arbitrary Markdown or find a `.gitignore` template.
////////////////
このようなエンドポイントが山ほど用意されており、組織やプロジェクト、issue、コミットなどなど、GitHub 上で公開されているあらゆる情報を取得できます。
API を使って任意の Markdown をレンダリングしたり、`.gitignore` のテンプレートを探したりといったことすらできるのです。

[source,javascript]
----
$ curl https://api.github.com/gitignore/templates/Java
{
  "name": "Java",
  "source": "*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
"
}
----

////////////////
==== Commenting on an Issue
////////////////
==== Issue へのコメント

////////////////
However, if you want to do an action on the website such as comment on an Issue or Pull Request or if you want to view or interact with private content, you'll need to authenticate.
////////////////
しかし、Issue やプルリクエストに対してコメントしたり、プライベートなコンテンツを操作したりしたい場合は、
認証が必要になります。

////////////////
There are several ways to authenticate. You can use basic authentication with just your username and password, but generally it's a better idea to use a personal access token.
You can generate this from the ``Applications'' tab of your settings page.
////////////////
認証には、いくつかの方法があります。
ベーシック認証を使ってユーザー名とパスワードを渡すこともできますが、
通常は、アクセストークンを使うことをお勧めします。
アクセストークンは、自分のアカウントの設定ページの ``Applications'' タブから生成できます。

[[_access_token]]
////////////////
.Generate your access token from the ``Applications'' tab of your settings page.
image::images/scripting-05-access-token.png[Access Token]
////////////////
.設定ページの ``Applications'' タブからの、アクセストークンの生成
image::images/scripting-05-access-token.png[アクセストークン]

////////////////
It will ask you which scopes you want for this token and a description. Make sure to use a good description so you feel comfortable removing the token when your script or application is no longer used.
////////////////
ここでは、新しいトークンを利用するスコープや、そのトークンについての説明の入力を求められます。
わかりやすい説明を登録するようにしましょう。
そのトークンを使っているスクリプトやアプリケーションを利用しなくなったときに、どのトークンを破棄すればいいのかが、わかりやすくなります。

////////////////
GitHub will only show you the token once, so be sure to copy it. You can now use this to authenticate in your script instead of using a username and password. This is nice because you can limit the scope of what you want to do and the token is revocable.
////////////////
GitHub は、生成したトークンを一度だけしか表示しません。忘れずにコピーしましょう。
これを使えば、ユーザー名やパスワードを使わなくても、スクリプト内で認証できるようになります。
この方式の利点は、やりたいことにあわせてトークンのスコープを絞れることと、
不要になったトークンを破棄できることです。

////////////////
This also has the added advantage of increasing your rate limit. Without authenticating, you will be limited to 60 requests per hour. If you authenticate you can make up to 5,000 requests per hour.
////////////////
さらに、利用制限を緩和できるというメリットもあります。
認証なしの場合は、一時間当たり60リクエストまでという制限がかかります。
認証を済ませると、この制限が、一時間当たり5,000リクエストまでに緩和されます。

////////////////
So let's use it to make a comment on one of our issues. Let's say we want to leave a comment on a specific issue, Issue #6. To do so we have to do an HTTP POST request to `repos/<user>/<repo>/issues/<num>/comments` with the token we just generated as an Authorization header.
////////////////
では、API を使って issue にコメントをしてみましょう。
ここでは、Issue #6 にコメントします。
そのためには、`repos/<user>/<repo>/issues/<num>/comments` に対して HTTP POST リクエストを送ります。
その際に、先ほど生成したトークンを Authorization ヘッダに含めます。

[source,javascript]
----
$ curl -H "Content-Type: application/json" \
       -H "Authorization: token TOKEN" \
       --data '{"body":"A new comment, :+1:"}' \
       https://api.github.com/repos/schacon/blink/issues/6/comments
{
  "id": 58322100,
  "html_url": "https://github.com/schacon/blink/issues/6#issuecomment-58322100",
  ...
  "user": {
    "login": "tonychacon",
    "id": 7874698,
    "avatar_url": "https://avatars.githubusercontent.com/u/7874698?v=2",
    "type": "User",
  },
  "created_at": "2014-10-08T07:48:19Z",
  "updated_at": "2014-10-08T07:48:19Z",
  "body": "A new comment, :+1:"
}
----

////////////////
Now if you go to that issue, you can see the comment that we just successfully posted as in <<_api_comment>>.
////////////////
さて、実際にこの issue のページを開いてみると、<<_api_comment>> のようにコメントに成功していることがわかるでしょう。

[[_api_comment]]
////////////////
.A comment posted from the GitHub API.
image::images/scripting-06-comment.png[API Comment]
////////////////
.GitHub API を使って投稿したコメント
image::images/scripting-06-comment.png[API によるコメント]

////////////////
You can use the API to do just about anything you can do on the website -- creating and setting milestones, assigning people to Issues and Pull Requests, creating and changing labels, accessing commit data, creating new commits and branches, opening, closing or merging Pull Requests, creating and editing teams, commenting on lines of code in a Pull Request, searching the site and on and on.
////////////////
API を使えば、Web サイト上でできることならほぼすべて実行できます。
マイルストーンの作成や設定、Issue やプルリクエストの担当者の割り当て、ラベルの作成や変更、
コミット情報へのアクセス、新しいコミットやブランチの作成、
プルリクエストのオープン、クローズ、そしてマージ、
チームの作成や編集、
プルリクエストの特定の行へのコメント、
サイト内検索なども、API で行えます。

////////////////
==== Changing the Status of a Pull Request
////////////////
==== プルリクエストのステータスの変更

////////////////
One final example we'll look at since it's really useful if you're working with Pull Requests. Each commit can have one or more statuses associated with it and there is an API to add and query that status.
////////////////
最後にもうひとつ、サンプルを見てみましょう。これは、プルリクエストに対応するときに、とても便利なものです。
各コミットには、ひとつあるいは複数のステータスを持たせることができるようになっています。
そして、API を使って、このステータスを追加したり、問い合わせたりすることができるのです。

////////////////
Most of the Continuous Integration and testing services make use of this API to react to pushes by testing the code that was pushed, and then report back if that commit has passed all the tests. You could also use this to check if the commit message is properly formatted, if the submitter followed all your contribution guidelines, if the commit was validly signed -- any number of things.
////////////////
継続的インテグレーションやテスティングのサービスの大半は、この API を使っています。
コードがプッシュされたらそのコードをテストして、そのコミットがすべてのテストをパスした場合は、結果報告を返したりしているのです。
同様に、コミットメッセージが適切な書式になっているかどうかを調べたり、
コードを貢献するときのガイドラインに沿っているかどうかを調べたり、
適切に署名されているかどうかを調べたり、さまざまなことを行えます。

////////////////
Let's say you set up a webhook on your repository that hits a small web service that checks for a `Signed-off-by` string in the commit message.
////////////////
ここでは、コミットメッセージに `Signed-off-by` という文字列が含まれているかどうかを調べるちょっとした Web サービスを、
リポジトリのフック機能で利用することを考えてみましょう。

[source,ruby]
////////////////
----
require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON
  repo_name = push['repository']['full_name']

  # look through each commit message
  push["commits"].each do |commit|

    # look for a Signed-off-by string
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # post status to GitHub
    sha = commit["id"]
    status_url = "https://api.github.com/repos/#{repo_name}/statuses/#{sha}"

    status = {
      "state"       => state,
      "description" => description,
      "target_url"  => "http://example.com/how-to-signoff",
      "context"     => "validate/signoff"
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => "token #{ENV['TOKEN']}" }
    )
  end
end
----
////////////////
----
require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # JSONをパースする
  repo_name = push['repository']['full_name']

  # コミットメッセージを調べる
  push["commits"].each do |commit|

    # 文字列 Signed-off-by を探す
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # 状態を GitHub に投稿する
    sha = commit["id"]
    status_url = "https://api.github.com/repos/#{repo_name}/statuses/#{sha}"

    status = {
      "state"       => state,
      "description" => description,
      "target_url"  => "http://example.com/how-to-signoff",
      "context"     => "validate/signoff"
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => "token #{ENV['TOKEN']}" }
    )
  end
end
----

////////////////
Hopefully this is fairly simple to follow. In this web hook handler we look through each commit that was just pushed, we look for the string 'Signed-off-by' in the commit message and finally we POST via HTTP to the `/repos/<user>/<repo>/statuses/<commit_sha>` API endpoint with the status.
////////////////
おそらく、何をやっているのかを追うのはそんなに難しくないかと思います。
この Web フックは、プッシュされたコミットについて、コミットメッセージに 'Signed-off-by' という文字列が含まれるているかどうかを調べて、
API エンドポイント `/repos/<user>/<repo>/statuses/<commit_sha>` への HTTP POST でステータスを指定します。

////////////////
In this case you can send a state ('success', 'failure', 'error'), a description of what happened, a target URL the user can go to for more information and a ``context'' in case there are multiple statuses for a single commit. For example, a testing service may provide a status and a validation service like this may also provide a status -- the ``context'' field is how they're differentiated.
////////////////
ここで送信できる情報は、ステータス ('success', 'failure', 'error') と説明文、詳細な情報を得るための URL、
そして単一のコミットに複数のステータスがある場合の ``コンテキスト'' です。
たとえば、テスティングサービスがステータスを送ることもあれば、このサンプルのようなバリデーションサービスがステータスを送ることもあります。
それらを区別するのが ``context'' フィールドです。

////////////////
If someone opens a new Pull Request on GitHub and this hook is set up, you may see something like <<_commit_status>>.
////////////////
誰かが GitHub 上で新しいプルリクエストを作ったときに、もしこのフックを設定していれば、<<_commit_status>> のようになるでしょう。

[[_commit_status]]
////////////////
.Commit status via the API.
image::images/scripting-07-status.png[Commit status]
////////////////
.API で設定したコミットのステータス
image::images/scripting-07-status.png[コミットのステータス]

////////////////
You can now see a little green check mark next to the commit that has a ``Signed-off-by'' string in the message and a red cross through the one where the author forgot to sign off. You can also see that the Pull Request takes the status of the last commit on the branch and warns you if it is a failure. This is really useful if you're using this API for test results so you don't accidentally merge something where the last commit is failing tests.
////////////////
メッセージに ``Signed-off-by'' という文字列が含まれているコミットの隣にはグリーンのチェックマークが表示されています。
一方、作者が署名し忘れたコミットの隣には、赤い×印がついています。
また、そのプルリクエストの最新のコミットのステータスを見て、もし failure だったら警告を発しているということもわかります。
テストの結果を見てこの API を使うようにすると、とても便利です。テストが通らなかったコミットを、うっかりマージしてしまわずに済むでしょう。

==== Octokit

////////////////
Though we've been doing nearly everything through `curl` and simple HTTP requests in these examples, several open-source libraries exist that make this API available in a more idiomatic way.
At the time of this writing, the supported languages include Go, Objective-C, Ruby, and .NET.
Check out http://github.com/octokit[] for more information on these, as they handle much of the HTTP for you.
////////////////
ここまでほぼすべてのサンプルは、`curl` を使ったシンプルな HTTP リクエストだけで実現してきましたが、
オープンソースのライブラリを使えば、これらの API を、もっと慣用的な書きかたで使えるようになります。
本書の執筆時点では、Go や Objective-C、Ruby、そして .NET 用のライブラリが公開されています。
詳細は http://github.com/octokit[] をご覧ください。HTTP がらみの大半を、あなたの代わりに処理してくれることでしょう。

////////////////
Hopefully these tools can help you customize and modify GitHub to work better for your specific workflows.
For complete documentation on the entire API as well as guides for common tasks, check out https://developer.github.com[].
////////////////
これらのツールをうまく活用して GitHub をカスタマイズして、自分自身のワークフローにうまくあてはまるようにしてみましょう。
API の完全なドキュメントや、一般的な使いかたの指針は、 https://developer.github.com[] をご覧ください。
