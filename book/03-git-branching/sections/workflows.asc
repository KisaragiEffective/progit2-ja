//////////////////////////
=== Branching Workflows
//////////////////////////
=== ブランチでの作業の流れ

//////////////////////////
Now that you have the basics of branching and merging down, what can or should you do with them?
In this section, we'll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate it into your own development cycle.
//////////////////////////
ブランチとマージの基本操作はわかりましたが、ではそれを実際にどう使えばいいのでしょう?
このセクションでは、気軽にブランチを切れることでどういった作業ができるようになるのかを説明します。
みなさんのふだんの開発サイクルにうまく取り込めるかどうかの判断材料としてください。

//////////////////////////
==== Long-Running Branches
//////////////////////////
==== 長期稼働用ブランチ

//////////////////////////
(((branches, long-running)))
Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do.
This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.
//////////////////////////
(((branches, long-running)))
Git では簡単に三方向のマージができるので、あるブランチから別のブランチへのマージを長期間にわたって繰り返すのも簡単なことです。
つまり、複数のブランチを常にオープンさせておいて、それぞれ開発サイクルにおける別の場面用に使うということもできます。
定期的にブランチ間でのマージを行うことが可能です。

//////////////////////////
Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their `master` branch – possibly only code that has been or will be released.
They have another parallel branch named `develop` or `next` that they work from or use to test stability – it isn't necessarily always stable, but whenever it gets to a stable state, it can be merged into `master`.
It's used to pull in topic branches (short-lived branches, like your earlier `iss53` branch) when they're ready, to make sure they pass all the tests and don't introduce bugs.
//////////////////////////
Git 開発者の多くはこの考え方にもとづいた作業の流れを採用しています。
つまり、完全に安定したコードのみを `master` ブランチに置き、いつでもリリースできる状態にしているのです。
それ以外に並行して `develop` や `next` といった名前のブランチを持ち、安定性をテストするためにそこを使用します。
常に安定している必要はありませんが、安定した状態になったらそれを `master` にマージすることになります。
また、時にはトピックブランチ (先ほどの例の `iss53` ブランチのような短期間のブランチ) を作成し、すべてのテストに通ることやバグが発生していないことを確認することもあります。

//////////////////////////
In reality, we're talking about pointers moving up the line of commits you're making.
The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history.
//////////////////////////
実際のところ今話している内容は、一連のコミットの中のどの部分をポインタが指しているかということです。
安定版のブランチはコミット履歴上の奥深くにあり、最前線のブランチは履歴上の先端にいます。

//////////////////////////
.A linear view of progressive-stability branching
image::images/lr-branches-1.png[A linear view of progressive-stability branching.]
//////////////////////////
.安定版と開発版のブランチの線形表示
image::images/lr-branches-1.png[安定版と開発版のブランチの線形表示]

//////////////////////////
It's generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they're fully tested.
//////////////////////////
各ブランチを作業用のサイロと考えることもできます。
一連のコミットが完全にテストを通るようになった時点で、より安定したサイロに移動するのです。

//////////////////////////
[[lrbranch_b]]
.A ``silo'' view of progressive-stability branching
image::images/lr-branches-2.png[A ``silo'' view of progressive-stability branching.]
//////////////////////////
[[lrbranch_b]]
.安定版と開発版のブランチの ``サイロ'' 表示
image::images/lr-branches-2.png[安定版と開発版のブランチの ``サイロ'' 表示]

//////////////////////////
You can keep doing this for several levels of stability.
Some larger projects also have a `proposed` or `pu` (proposed updates) branch that has integrated branches that may not be ready to go into the `next` or `master` branch.
The idea is that your branches are at various levels of stability; when they reach a more stable level, they're merged into the branch above them.
Again, having multiple long-running branches isn't necessary, but it's often helpful, especially when you're dealing with very large or complex projects.
//////////////////////////
同じようなことを、安定性のレベルを何段階かにして行うこともできます。
大規模なプロジェクトでは、`proposed` あるいは `pu` (proposed updates) といったブランチを用意して、`next` ブランチあるいは `master` ブランチに投入する前にそこでいったんブランチを統合するというようにしています。
安定性のレベルに応じて何段階かのブランチを作成し、安定性が一段階上がった時点で上位レベルのブランチにマージしていくという考え方です。
念のために言いますが、このように複数のブランチを常時稼働させることは必須ではありません。
しかし、巨大なプロジェクトや複雑なプロジェクトに関わっている場合は便利なことでしょう。

//////////////////////////
[[_topic_branch]]
==== Topic Branches
//////////////////////////
[[_topic_branch]]
==== トピックブランチ

//////////////////////////
(((branches, topic)))
Topic branches, however, are useful in projects of any size.
A topic branch is a short-lived branch that you create and use for a single particular feature or related work.
This is something you've likely never done with a VCS before because it's generally too expensive to create and merge branches.
But in Git it's common to create, work on, merge, and delete branches several times a day.
//////////////////////////
(((branches, topic)))
一方、トピックブランチはプロジェクトの規模にかかわらず便利なものです。
トピックブランチとは、短期間だけ使うブランチのことで、何か特定の機能やそれに関連する作業を行うために作成します。
これは、今までの VCS では実現不可能に等しいことでした。
ブランチを作成したりマージしたりという作業が非常に手間のかかることだったからです。
Git では、ブランチを作成して作業をし、マージしてからブランチを削除するという流れを一日に何度も繰り返すことも珍しくありません。

//////////////////////////
You saw this in the last section with the `iss53` and `hotfix` branches you created.
You did a few commits on them and deleted them directly after merging them into your main branch.
This technique allows you to context-switch quickly and completely – because your work is separated into silos where all the changes in that branch have to do with that topic, it's easier to see what has happened during code review and such.
You can keep the changes there for minutes, days, or months, and merge them in when they're ready, regardless of the order in which they were created or worked on.
//////////////////////////
先ほどのセクションで作成した `iss53` ブランチや `hotfix` ブランチが、このトピックブランチにあたります。
ブランチ上で数回コミットし、それをメインブランチにマージしたらすぐに削除しましたね。
この方法を使えば、コンテキストの切り替えを手早く完全に行うことができます。
それぞれの作業が別のサイロに分離されており、そのブランチ内の変更は特定のトピックに関するものだけなのですから、コードレビューなどの作業が容易になります。
一定の間ブランチで保持し続けた変更は、マージできるようになった時点で (ブランチを作成した順や作業した順に関係なく) すぐにマージしていきます。

//////////////////////////
Consider an example of doing some work (on `master`), branching off for an issue (`iss91`), working on it for a bit, branching off the second branch to try another way of handling the same thing (`iss91v2`), going back to your master branch and working there for a while, and then branching off there to do some work that you're not sure is a good idea (`dumbidea` branch).
Your commit history will look something like this:
//////////////////////////
次のような例を考えてみましょう。
まず (`master` で) 何らかの作業をし、問題対応のために (`iss91` に) ブランチを移動し、そこでなにがしかの作業を行い、「あ、こっちのほうがよかったかも」と気づいたので新たにブランチを作成 (`iss91v2`) して思いついたことをそこで試し、いったん master ブランチに戻って作業を続け、うまくいくかどうかわからないちょっとしたアイデアを試すために新たなブランチ (`dumbidea` ブランチ) を切りました。
この時点で、コミットの歴史はこのようになります。

//////////////////////////
.Multiple topic branches
image::images/topic-branches-1.png[Multiple topic branches.]
//////////////////////////
.複数のトピックブランチ
image::images/topic-branches-1.png[複数のトピックブランチ]

//////////////////////////
Now, let's say you decide you like the second solution to your issue best (`iss91v2`); and you showed the `dumbidea` branch to your coworkers, and it turns out to be genius.
You can throw away the original `iss91` branch (losing commits `C5` and `C6`) and merge in the other two.
Your history then looks like this:
//////////////////////////
最終的に、問題を解決するための方法としては二番目 (`iss91v2`) のほうがよさげだとわかりました。
また、ちょっとした思いつきで試してみた `dumbidea` ブランチが意外とよさげで、これはみんなに公開すべきだと判断しました。
最初の `iss91` ブランチは放棄してしまい (コミット `C5` と `C6` の内容は失われます)、他のふたつのブランチをマージしました。
この時点で、歴史はこのようになっています。

//////////////////////////
.History after merging `dumbidea` and `iss91v2`
image::images/topic-branches-2.png[History after merging `dumbidea` and `iss91v2`.]
//////////////////////////
.`dumbidea` と `iss91v2` をマージした後の歴史
image::images/topic-branches-2.png[`dumbidea` と `iss91v2` をマージした後の歴史]

//////////////////////////
We will go into more detail about the various possible workflows for your Git project in <<_distributed_git>>, so before you decide which branching scheme your next project will use, be sure to read that chapter.
//////////////////////////
Git プロジェクトで考えられるさまざまなワークフローについて、 <<_distributed_git>> でより詳しく扱います。
次のプロジェクトで、どんな方針でブランチを作っていくかを決めるまでに、まずはこの章を確認しておきましょう。

//////////////////////////
It's important to remember when you're doing all this that these branches are completely local.
When you're branching and merging, everything is being done only in your Git repository – no server communication is happening.
//////////////////////////
ここで重要なのは、これまで作業してきたブランチが完全にローカル環境に閉じていたということです。
ブランチを作ったりマージしたりといった作業は、すべてみなさんの Git リポジトリ内で完結しており、サーバーとのやりとりは発生していません。
