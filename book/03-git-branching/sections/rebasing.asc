[[_rebasing]]
//////////////////////////
=== Rebasing
//////////////////////////
=== リベース

(((rebasing)))
//////////////////////////
In Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.
In this section you'll learn what rebasing is, how to do it, why it's a pretty amazing tool, and in what cases you won't want to use it.
//////////////////////////
Git には、あるブランチの変更を別のブランチに統合するための方法が大きく分けて二つあります。
`merge` と `rebase` です。
このセクションでは、リベースについて「どういう意味か」「どのように行うのか」「なぜそんなにもすばらしいのか」「どんなときに使うのか」を説明します。

//////////////////////////
==== The Basic Rebase
//////////////////////////
==== リベースの基本

//////////////////////////
If you go back to an earlier example from <<_basic_merging>>, you can see that you diverged your work and made commits on two different branches.
//////////////////////////
マージについての説明で使用した例を <<_basic_merging>> から振り返ってみましょう。
作業が二つに分岐しており、それぞれのブランチに対してコミットされていることがわかります。

//////////////////////////
.Simple divergent history
image::images/basic-rebase-1.png[Simple divergent history.]
//////////////////////////
.シンプルな、分岐した歴史
image::images/basic-rebase-1.png[シンプルな、分岐した歴史]

//////////////////////////
The easiest way to integrate the branches, as we've already covered, is the `merge` command.
It performs a three-way merge between the two latest branch snapshots (`C3` and `C4`) and the most recent common ancestor of the two (`C2`), creating a new snapshot (and commit).
//////////////////////////
このブランチを統合する最も簡単な方法は、先に説明したように `merge` コマンドを使うことです。
これは、二つのブランチの最新のスナップショット (`C3` と `C4`) とそれらの共通の祖先 (`C2`) による三方向のマージを行い、新しいスナップショットを作成 (そしてコミット) します。

//////////////////////////
.Merging to integrate diverged work history
image::images/basic-rebase-2.png[Merging to integrate diverged work history.]
//////////////////////////
.分岐した作業履歴をひとつに統合する
image::images/basic-rebase-2.png[分岐した作業履歴をひとつに統合する]

//////////////////////////
However, there is another way: you can take the patch of the change that was introduced in `C4` and reapply it on top of `C3`.
In Git, this is called _rebasing_.
With the `rebase` command, you can take all the changes that were committed on one branch and replay them on another one.(((git commands, rebase)))
//////////////////////////
しかし、別の方法もあります。
`C3` で行った変更のパッチを取得し、それを `C4` の先端に適用するのです。
Git では、この作業のことを _リベース (rebasing)_ と呼んでいます。
`rebase` コマンドを使用すると、一方のブランチにコミットされたすべての変更をもう一方のブランチで再現することができます。(((git commands, rebase)))

//////////////////////////
In this example, you'd run the following:
//////////////////////////
今回の例では、次のように実行します。

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

//////////////////////////
It works by going to the common ancestor of the two branches (the one you're on and the one you're rebasing onto), getting the diff introduced by each commit of the branch you're on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.
//////////////////////////
これは、まずふたつのブランチ (現在いるブランチとリベース先のブランチ) の共通の先祖に移動し、現在のブランチ上の各コミットの diff を取得して一時ファイルに保存し、現在のブランチの指す先をリベース先のブランチと同じコミットに移動させ、そして先ほどの変更を順に適用していきます。

//////////////////////////
.Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`.]
//////////////////////////
.`C4` の変更を `C3` にリベース
image::images/basic-rebase-3.png[`C4` の変更を `C3` にリベース]

//////////////////////////
At this point, you can go back to the master branch and do a fast-forward merge.
//////////////////////////
この時点で、master ブランチに戻って fast-forward マージができるようになりました。

[source,console]
----
$ git checkout master
$ git merge experiment
----

//////////////////////////
.Fast-forwarding the master branch
image::images/basic-rebase-4.png[Fast-forwarding the master branch.]
//////////////////////////
.master ブランチの Fast-forward
image::images/basic-rebase-4.png[master ブランチの Fast-forward]

//////////////////////////
Now, the snapshot pointed to by `C4'` is exactly the same as the one that was pointed to by `C5` in the merge example.
There is no difference in the end product of the integration, but rebasing makes for a cleaner history.
If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.
//////////////////////////
これで、`C4'` が指しているスナップショットの内容は、先ほどのマージの例で `C5` が指すスナップショットと全く同じものになりました。
最終的な統合結果には差がありませんが、リベースのほうがよりすっきりした歴史になります。
リベース後のブランチのログを見ると、まるで一直線の歴史のように見えます。
元々平行稼働していたにもかかわらず、それが一連の作業として見えるようになるのです。

//////////////////////////
Often, you'll do this to make sure your commits apply cleanly on a remote branch – perhaps in a project to which you're trying to contribute but that you don't maintain.
In this case, you'd do your work in a branch and then rebase your work onto `origin/master` when you were ready to submit your patches to the main project.
That way, the maintainer doesn't have to do any integration work – just a fast-forward or a clean apply.
//////////////////////////
リモートブランチ上での自分のコミットをすっきりさせるために、よくこの作業を行います。
たとえば、自分がメンテナンスしているのではないプロジェクトに対して貢献したいと考えている場合などです。
この場合、あるブランチ上で自分の作業を行い、プロジェクトに対してパッチを送る準備ができたらそれを `origin/master` にリベースすることになります。
そうすれば、メンテナは特に統合作業をしなくても単に fast-forward するだけで済ませられるのです。

//////////////////////////
Note that the snapshot pointed to by the final commit you end up with, whether it's the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot – it's only the history that is different.
Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.
//////////////////////////
あなたが最後に行ったコミットが指すスナップショットは、リベースした結果の最後のコミットであってもマージ後の最終のコミットであっても同じものとなることに注意しましょう。
違ってくるのは、そこに至る歴史だけです。
リベースは、一方のラインの作業内容をもう一方のラインに順に適用しますが、マージの場合はそれぞれの最終地点を統合します。

//////////////////////////
==== More Interesting Rebases
//////////////////////////
==== さらに興味深いリベース

//////////////////////////
You can also have your rebase replay on something other than the rebase target branch.
Take a history like <<rbdiag_e>>, for example.
You branched a topic branch (`server`) to add some server-side functionality to your project, and made a commit.
Then, you branched off that to make the client-side changes (`client`) and committed a few times.
Finally, you went back to your server branch and did a few more commits.
//////////////////////////
リベース先のブランチ以外でもそのリベースを再現することができます。
たとえば <<rbdiag_e>> のような歴史を考えてみましょう。
トピックブランチ (`server`) を作成してサーバー側の機能をプロジェクトに追加し、それをコミットしました。
その後、そこからさらにクライアント側の変更用のブランチ (`client`) を切って数回コミットしました。
最後に、server ブランチに戻ってさらに何度かコミットを行いました。

[[rbdiag_e]]
//////////////////////////
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]
//////////////////////////
.トピックブランチからさらにトピックブランチを作成した歴史
image::images/interesting-rebase-1.png[トピックブランチからさらにトピックブランチを作成した歴史]

//////////////////////////
Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it's tested further.
You can take the changes on client that aren't on server (`C8` and `C9`) and replay them on your master branch by using the `--onto` option of `git rebase`:
//////////////////////////
クライアント側の変更を本流にマージしてリリースしたいけれど、サーバー側の変更はまだそのままテストを続けたいという状況になったとします。
クライアント側の変更のうちサーバー側にはないもの (`C8` と `C9`) を master ブランチで再現するには、`git rebase` の `--onto` オプションを使用します。

[source,console]
----
$ git rebase --onto master server client
----

//////////////////////////
This basically says, ``Check out the client branch, figure out the patches from the common ancestor of the `client` and `server` branches, and then replay them onto `master`.''
It's a bit complex, but the result is pretty cool.
//////////////////////////
これは「client ブランチに移動して `client` ブランチと `server` ブランチの共通の先祖からのパッチを取得し、`master` 上でそれを適用しろ」という意味になります。
ちょっと複雑ですが、その結果は非常にクールです。

//////////////////////////
.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]
//////////////////////////
.別のトピックブランチから派生したトピックブランチのリベース
image::images/interesting-rebase-2.png[別のトピックブランチから派生したトピックブランチのリベース]

//////////////////////////
Now you can fast-forward your master branch (see <<rbdiag_g>>):
//////////////////////////
これで、master ブランチを fast-forward することができるようになりました (<<rbdiag_g>> を参照ください)。

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
//////////////////////////
.Fast-forwarding your master branch to include the client branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]
//////////////////////////
.master ブランチを fast-forward し、client ブランチの変更を含める
image::images/interesting-rebase-3.png[master ブランチを fast-forward し、client ブランチの変更を含める]

//////////////////////////
Let's say you decide to pull in your server branch as well.
You can rebase the server branch onto the master branch without having to check it out first by running `git rebase [basebranch] [topicbranch]` – which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):
//////////////////////////
さて、いよいよ server ブランチのほうも取り込む準備ができました。
server ブランチの内容を master ブランチにリベースする際には、事前にチェックアウトする必要はなく `git rebase [basebranch] [topicbranch]` を実行するだけでだいじょうぶです。
このコマンドは、トピックブランチ (ここでは `server`) をチェックアウトしてその変更をベースブランチ (`master`) 上に再現します。

[source,console]
----
$ git rebase master server
----

//////////////////////////
This replays your `server` work on top of your `master` work, as shown in <<rbdiag_h>>.
//////////////////////////
これは、`server` での作業を `master` の作業に続け、結果は <<rbdiag_h>> のようになります。

[[rbdiag_h]]
//////////////////////////
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]
//////////////////////////
.server ブランチを master ブランチ上にリベースする
image::images/interesting-rebase-4.png[server ブランチを master ブランチ上にリベースする]

//////////////////////////
Then, you can fast-forward the base branch (`master`):
//////////////////////////
これで、ベースブランチ (`master`) を fast-forward することができます。

[source,console]
----
$ git checkout master
$ git merge server
----

//////////////////////////
You can remove the `client` and `server` branches because all the work is integrated and you don't need them anymore, leaving your history for this entire process looking like <<rbdiag_i>>:
//////////////////////////
ここで `client` ブランチと `server` ブランチを削除します。
すべての作業が取り込まれたので、これらのブランチはもはや不要だからです。
これらの処理を済ませた結果、最終的な歴史は <<rbdiag_i>> のようになりました。

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
//////////////////////////
.Final commit history
image::images/interesting-rebase-5.png[Final commit history.]
//////////////////////////
.最終的なコミット履歴
image::images/interesting-rebase-5.png[最終的なコミット履歴]

[[_rebase_peril]]
//////////////////////////
==== The Perils of Rebasing
//////////////////////////
==== ほんとうは怖いリベース

(((rebasing, perils of)))
//////////////////////////
Ahh, but the bliss of rebasing isn't without its drawbacks, which can be summed up in a single line:
//////////////////////////
あぁ、このすばらしいリベース機能。しかし、残念ながら欠点もあります。その欠点はほんの一行でまとめることができます。

//////////////////////////
**Do not rebase commits that exist outside your repository.**
//////////////////////////
**公開リポジトリにプッシュしたコミットをリベースしてはいけない**

//////////////////////////
If you follow that guideline, you'll be fine.
If you don't, people will hate you, and you'll be scorned by friends and family.
//////////////////////////
この指針に従っている限り、すべてはうまく進みます。
もしこれを守らなければ、あなたは嫌われ者となり、友人や家族からも軽蔑されることになるでしょう。

//////////////////////////
When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.
//////////////////////////
リベースをすると、既存のコミットを破棄して新たなコミットを作成することになります。
新たに作成したコミットは破棄したものと似てはいますが別物です。
あなたがどこかにプッシュしたコミットを誰かが取得してその上で作業を始めたとしましょう。
あなたが `git rebase` でそのコミットを書き換えて再度プッシュすると、相手は再びマージすることになります。
そして相手側の作業を自分の環境にプルしようとするとおかしなことになってしまします。

//////////////////////////
Let's look at an example of how rebasing work that you've made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this:
//////////////////////////
いったん公開した作業をリベースするとどんな問題が発生するのか、例を見てみましょう。
中央サーバーからクローンした環境上で何らかの作業を進めたものとします。
現在のコミット履歴はこのようになっています。

//////////////////////////
.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png[Clone a repository, and base some work on it.]
//////////////////////////
.リポジトリをクローンし、なんらかの作業をすませた状態
image::images/perils-of-rebasing-1.png[リポジトリをクローンし、なんらかの作業をすませた状態]

//////////////////////////
Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch them and merge the new remote branch into your work, making your history look something like this:
//////////////////////////
さて、誰か他の人が、マージを含む作業をしてそれを中央サーバーにプッシュしました。
それを取得し、リモートブランチの内容を作業環境にマージすると、その歴史はこのような状態になります。

//////////////////////////
.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png[Fetch more commits, and merge them into your work.]
//////////////////////////
.さらなるコミットを取得し、作業環境にマージした状態
image::images/perils-of-rebasing-2.png[さらなるコミットを取得し、作業環境にマージした状態]

//////////////////////////
Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.
//////////////////////////
次に、さきほどマージした作業をプッシュした人が、気が変わったらしく新たにリベースし直したようです。
なんと `git push --force` を使ってサーバー上の歴史を上書きしてしまいました。
あなたはもう一度サーバーにアクセスし、新しいコミットを手元に取得します。

[[_pre_merge_rebase_work]]
//////////////////////////
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png[Someone pushes rebased commits, abandoning commits you've based your work on.]
//////////////////////////
.誰かがリベースしたコミットをプッシュし、あなたの作業環境の元になっているコミットが破棄された
image::images/perils-of-rebasing-3.png[誰かがリベースしたコミットをプッシュし、あなたの作業環境の元になっているコミットが破棄された]

//////////////////////////
Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:
//////////////////////////
さあたいへん。
ここであなたが `git pull` を実行すると、両方の歴史の流れを含むマージコミットができあがり、あなたのリポジトリはこのようになります。

[[_merge_rebase_work]]
//////////////////////////
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]
//////////////////////////
.同じ作業を再びマージして新たなマージコミットを作成する
image::images/perils-of-rebasing-4.png[同じ作業を再びマージして新たなマージコミットを作成する]

//////////////////////////
If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why she rebased in the first place.
//////////////////////////
歴史がこんな状態になっているときに `git log` を実行すると、同じ作者による同じメッセージのコミットが二重に表示されてしまいます。
さらに、あなたがその歴史をサーバにプッシュすると、リベースされたコミット群を中央サーバーに送り込むことになり、他の人たちをさらに混乱させてしまいます。
他の開発者たちは、`C4` や `C6` を歴史に取り込みたくないはずです。だからこそ、最初にリベースしたのでしょうからね。

[[_rebase_rebase]]
//////////////////////////
==== Rebase When You Rebase
//////////////////////////
==== リベースした場合のリベース

//////////////////////////
If you *do* find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.
//////////////////////////
もしそんな状況になってしまった場合でも、Git がうまい具合に判断して助けてくれることがあります。
チームの誰かがプッシュした変更が、あなたの作業元のコミットを変更してしまった場合、どれがあなたのコミットでどれが書き換えられたコミットなのかを判断するのは大変です。

//////////////////////////
It turns out that in addition to the commit SHA checksum, Git also calculate a checksum that is based just on the patch introduced with the commit. This is called a ``patch-id''.
//////////////////////////
Git は、コミットの SHA チェックサム以外にもうひとつのチェックサムを計算しています。これは、そのコミットで投入されたパッチから計算したものです。
これを「パッチ ID」と呼びます。

//////////////////////////
If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.
//////////////////////////
書き換えられたコミットをプルして、他のメンバーのコミットの後に新たなコミットをリベースしようとしたときに、
Git は多くの場合、どれがあなたのコミットかを自動的に判断し、そのコミットを新しいブランチの先端に適用してくれます。

//////////////////////////
For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:
//////////////////////////
たとえば先ほどの例で考えてみます。<<_pre_merge_rebase_work>> の場面で、マージする代わりに `git rebase teamone/master` を実行すると、Git は次のように動きます。

//////////////////////////
* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`
//////////////////////////
* 私たちのブランチにしかない作業を特定する (C2, C3, C4, C6, C7)
* その中から、マージコミットではないものを探す (C2, C3, C4)
* その中から、対象のブランチにまだ書き込まれていないものを探す (C4 は C4' と同じパッチなので、ここでは C2 と C3 だけになる)
* そのコミットを `teamone/master` の先端に適用する

//////////////////////////
So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.
//////////////////////////
その結果は <<_merge_rebase_work>> の場合とは異なり、<<_rebase_rebase_work>> のようになります。

[[_rebase_rebase_work]]
//////////////////////////
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]
//////////////////////////
.リベース後、強制的にプッシュした作業へのリベース
image::images/perils-of-rebasing-5.png[リベース後、強制的にプッシュした作業へのリベース]

//////////////////////////
This only works if C4 and C4' that your partner made are almost exactly the same patch. Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).
//////////////////////////
これがうまくいくのは、あなたの C4 と他のメンバーの C4' がほぼ同じ内容のパッチである場合だけです。
そうでないと、これらが重複であることを見抜けません (そして、おそらくパッチの適用に失敗するでしょう。その変更は、少なくとも誰かが行っているだろうからです)。

//////////////////////////
You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`. Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.
//////////////////////////
この操作をシンプルに行うために、通常の `git pull` ではなく `git pull --rebase` を実行してもかまいません。
あるいは手動で行う場合は、`git fetch` に続けて、たとえば今回の場合なら `git rebase teamone/master` を実行します。

//////////////////////////
If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.
//////////////////////////
`git pull` を行うときにデフォルトで `--rebase` を指定したい場合は、
設定項目 `pull.rebase` を指定します。たとえば `git config --global pull.rebase true` などとすれば、指定できます。

//////////////////////////
If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.
//////////////////////////
プッシュする前の作業をきれいに整理する手段としてだけリベースを使い、まだ公開していないコミットだけをリベースすることを心がけていれば、何も問題はありません。
すでにプッシュした後で、他の人がその後の作業を続けている可能性のあるコミットをリベースした場合は、やっかいな問題を引き起こす可能性があります。
チームメイトに軽蔑されてしまうかもしれません。

//////////////////////////
If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.
//////////////////////////
どこかの時点でどうしてもそうせざるを得ないことになったら、みんなに `git pull --rebase` を使わせるように気をつけましょう。
そうすれば、その後の苦しみをいくらか和らげることができます。

//////////////////////////
==== Rebase vs. Merge
//////////////////////////
==== リベースかマージか

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
//////////////////////////
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.
//////////////////////////
リベースとマージの実例を見てきました。さて、どちらを使えばいいのか気になるところです。
その答えをお知らせする前に、「歴史」とはいったい何だったのかを振り返ってみましょう。

//////////////////////////
One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.
//////////////////////////
あなたのリポジトリにおけるコミットの歴史は、*実際に発生したできごとの記録* だと見ることもできます。
これは歴史文書であり、それ自体に意味がある。従って、改ざんなど許されないという観点です。
この観点に沿って考えると、コミットの歴史を変更することなどあり得ないでしょう。
実際に起こってしまったことには、ただ黙って _従う_ べきです。
マージコミットのせいで乱雑になってしまったら?
実際そうなってしまったのだからしょうがない。
その記録は、後世の人々に向けてそのまま残しておくべきでしょう。

//////////////////////////
The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.
//////////////////////////
別の見方もあります。コミットの歴史は、*そのプロジェクトがどのように作られてきたのかを表す物語である* という考えかたです。
最初の草稿の段階で本を出版したりはしないでしょう。また、自作ソフトウェア用の管理マニュアルであれば、しっかり推敲する必要があります。
この立場に立つと、リベースやブランチフィルタリングを使って、将来の読者にとってわかりやすいように、物語を再編しようという考えに至ります。

//////////////////////////
Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.
//////////////////////////
さて、元の問いに戻ります。
マージとリベースではどちらがいいのか。
お察しのとおり、単純にどちらがよいとは言い切れません。
Git は強力なツールで、歴史に対していろんな操作をすることができます。しかし、チームやプロジェクトによって、事情はそれぞれ異なります。
あなたは既に、両者の特徴を理解しています。あなたが今いる状況ではどちらがより適切なのか、それを判断するのはあなたです。

//////////////////////////
In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
//////////////////////////
一般論として、両者のいいとこどりをしたければ、まだプッシュしていないローカルの変更だけをリベースするようにして、
歴史をきれいに保っておきましょう。プッシュ済みの変更は決してリベースしないようにすれば、問題はおきません。
