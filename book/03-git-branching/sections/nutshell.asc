[[_git_branches_overview]]
//////////////////////////
=== Branches in a Nutshell
//////////////////////////
=== ブランチとは

//////////////////////////
To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.
//////////////////////////
Git のブランチの仕組みについてきちんと理解するには、少し後戻りして Git がデータを格納する方法を知っておく必要があります。

//////////////////////////
As you may remember from <<_getting_started>>, Git doesn't store data as a series of changesets or differences, but instead as a series of snapshots.
//////////////////////////
<<_getting_started>> で説明したように、Git はチェンジセットや差分としてデータを保持しているのではありません。そうではなく、スナップショットとして保持しています。

//////////////////////////
When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author's name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.
//////////////////////////
Git にコミットすると、Git はコミットオブジェクトを作成して格納します。このオブジェクトには、あなたがステージしたスナップショットへのポインタや作者・メッセージのメタデータ、そしてそのコミットの直接の親となるコミットへのポインタが含まれています。最初のコミットの場合は親はいません。通常のコミットの場合は親がひとつ存在します。複数のブランチからマージした場合は、親も複数となります。

//////////////////////////
To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.
Staging the files checksums each one (the SHA-1 hash we mentioned in <<_getting_started>>), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:
//////////////////////////
これを視覚化して考えるために、ここに 3 つのファイルを含むディレクトリがあると仮定しましょう。3 つのファイルをすべてステージしてコミットしたところです。ステージしたファイルについてチェックサム (<<_getting_started>> で説明した SHA-1 ハッシュ) を計算し、そのバージョンのファイルを Git ディレクトリに格納し (Git はファイルを blob として扱います)、そしてそのチェックサムをステージングエリアに追加します。

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

//////////////////////////
When you create the commit by running `git commit`, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))
//////////////////////////
`git commit` を実行してコミットを作るときに、Git は各サブディレクトリ (今回の場合はルートディレクトリひとつだけ) のチェックサムを計算して、そのツリーオブジェクトを Git リポジトリに格納します。
それから、コミットオブジェクトを作ります。このオブジェクトは、コミットのメタデータとルートツリーへのポインタを保持しており、必要に応じてスナップショットを再作成できるようになります。(((git commands, commit)))

//////////////////////////
Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.
//////////////////////////
この時点で、Git リポジトリには 5 つのオブジェクトが含まれています。3 つのファイルそれぞれの中身をあらわす blob オブジェクト、ディレクトリの中身の一覧とどのファイルがどの blob に対応するかをあらわすツリーオブジェクト、そしてそのルートツリーおよびすべてのメタデータへのポインタを含むコミットオブジェクトです。

//////////////////////////
.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]
//////////////////////////
.コミットおよびそのツリー
image::images/commit-and-tree.png[コミットおよびそのツリー]

//////////////////////////
If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.
//////////////////////////
なんらかの変更を終えて再びコミットすると、次のコミットには直近のコミットへのポインタが格納されます。

//////////////////////////
.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]
//////////////////////////
.コミットおよびその親
image::images/commits-and-parents.png[コミットおよびその親]

//////////////////////////
A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is `master`.
As you start making commits, you're given a `master` branch that points to the last commit you made.
Every time you commit, it moves forward automatically.
//////////////////////////
Git におけるブランチとは、単にこれら三つのコミットを指す軽量なポインタに過ぎません。Git のデフォルトのブランチ名は `master` です。最初にコミットした時点で、直近のコミットを指す `master` ブランチが作られます。その後コミットを繰り返すたびに、このポインタは自動的に進んでいきます。

[NOTE]
//////////////////////////
====
The ``master'' branch in Git is not a special branch.(((master)))
It is exactly like any other branch.
The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
====
//////////////////////////
====
Git の ``master'' ブランチは、特別なブランチというわけではありません。(((master)))
その他のブランチと、何ら変わるところのないものです。
ほぼすべてのリポジトリが ``master'' ブランチを持っているたったひとつの理由は、
`git init` コマンドがデフォルトで作るブランチが ``master'' である (そして、ほとんどの人はわざわざそれを変更しようとは思わない) というだけのことです。
====

//////////////////////////
.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]
//////////////////////////
.ブランチおよびそのコミットの歴史
image::images/branch-and-history.png[ブランチおよびそのコミットの歴史]

[[_create_new_branch]]
//////////////////////////
==== Creating a New Branch
//////////////////////////
==== 新しいブランチの作成

(((branches, creating)))
//////////////////////////
What happens if you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let's say you create a new branch called testing.
You do this with the `git branch` command:(((git commands, branch)))
//////////////////////////
新しいブランチを作成したら、いったいどうなるのでしょうか?
単に新たな移動先を指す新しいポインタが作られるだけです。
では、新しい testing ブランチを作ってみましょう。
次の `git branch` コマンドを実行します。(((git commands, branch)))

[source,console]
----
$ git branch testing
----

//////////////////////////
This creates a new pointer at the same commit you're currently on.
//////////////////////////
これで、新しいポインタが作られます。
現時点ではふたつのポインタは同じ位置を指しています。

//////////////////////////
.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]
//////////////////////////
.ふたつのブランチが同じ一連のコミットを指す
image::images/two-branches.png[ふたつのブランチが同じ一連のコミットを指す]

//////////////////////////
How does Git know what branch you're currently on?
It keeps a special pointer called `HEAD`.
Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you're currently on.
In this case, you're still on `master`.
The `git branch` command only _created_ a new branch – it didn't switch to that branch.
//////////////////////////
Git は、あなたが今どのブランチで作業しているのかをどうやって知るのでしょうか?
それを保持する特別なポインタが `HEAD` と呼ばれるものです。
これは、Subversion や CVS といった他の VCS における `HEAD` の概念とはかなり違うものであることに注意しましょう。
Git では、HEAD はあなたが作業しているローカルブランチへのポインタとなります。
今回の場合は、あなたはまだ master ブランチにいます。
`git branch` コマンドは新たにブランチを作成するだけであり、
そのブランチに切り替えるわけではありません。

//////////////////////////
.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]
//////////////////////////
.ブランチを指す HEAD
image::images/head-to-master.png[ブランチを指す HEAD]

//////////////////////////
You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing.
This option is called `--decorate`.
//////////////////////////
この状況を確認するのは簡単です。
単に `git log` コマンドを実行するだけで、ブランチポインタがどこを指しているかを教えてくれます。
このときに指定するオプションは、`--decorate` です。

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

//////////////////////////
You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.
//////////////////////////
``master'' と ``testing'' の両ブランチが、コミット `f30ab` の横に表示されていることがわかります。

[[_switching_branches]]
//////////////////////////
==== Switching Branches
//////////////////////////
==== ブランチの切り替え

(((branches, switching)))
//////////////////////////
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Let's switch to the new `testing` branch:
//////////////////////////
ブランチを切り替えるには `git checkout` コマンドを実行します。(((git commands, checkout)))
それでは、新しい `testing` ブランチに移動してみましょう。

[source,console]
----
$ git checkout testing
----

//////////////////////////
This moves `HEAD` to point to the `testing` branch.
//////////////////////////
これで、`HEAD` は `testing` ブランチを指すようになります。

//////////////////////////
.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]
//////////////////////////
.HEAD は現在のブランチを指す
image::images/head-to-testing.png[HEAD は現在のブランチを指す]

//////////////////////////
What is the significance of that?
Well, let's do another commit:
//////////////////////////
それがどうしたって?
では、ここで別のコミットをしてみましょう。

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

//////////////////////////
.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]
//////////////////////////
.HEAD が指すブランチが、コミットによって移動する
image::images/advance-testing.png[HEAD が指すブランチが、コミットによって移動する]

//////////////////////////
This is interesting, because now your `testing` branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.
Let's switch back to the `master` branch:
//////////////////////////
興味深いことに、`testing` ブランチはひとつ進みましたが `master` ブランチは変わっていません。
`git checkout` でブランチを切り替えたときの状態のままです。それでは `master` ブランチに戻ってみましょう。

[source,console]
----
$ git checkout master
----

//////////////////////////
.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]
//////////////////////////
.チェックアウトによって HEAD が移動する
image::images/checkout-master.png[チェックアウトによって HEAD が移動する]

//////////////////////////
That command did two things.
It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.
//////////////////////////
このコマンドは二つの作業をしています。
まず HEAD ポインタが指す先を `master` ブランチに戻し、そして作業ディレクトリ内のファイルを `master` が指すスナップショットの状態に戻します。
つまり、この時点以降に行った変更は、これまでのプロジェクトから分岐した状態になるということです。
これは、`testing` ブランチで一時的に行った作業を巻き戻したことになります。
ここから改めて別の方向に進めるということになります。

[NOTE]
//////////////////////////
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====
//////////////////////////
.ブランチを切り替えると、作業ディレクトリのファイルが変更される
====
気をつけておくべき重要なこととして、Git でブランチを切り替えると、作業ディレクトリのファイルが変更されることを知っておきましょう。
古いブランチに切り替えると、作業ディレクトリ内のファイルは、最後にそのブランチ上でコミットした時点の状態まで戻ってしまいます。
Git がこの処理をうまくできない場合は、ブランチの切り替えができません。
====

//////////////////////////
Let's make a few changes and commit again:
//////////////////////////
それでは、ふたたび変更を加えてコミットしてみましょう。

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

//////////////////////////
Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.
//////////////////////////
これで、プロジェクトの歴史が二つに分かれました (<<divergent_history>> を参照ください)。
新たなブランチを作成してそちらに切り替え、何らかの作業を行い、メインブランチに戻って別の作業をした状態です。
どちらの変更も、ブランチごとに分離しています。ブランチを切り替えつつそれぞれの作業を進め、必要に応じてマージすることができます。
これらをすべて、シンプルに `branch` コマンドと `checkout` コマンドそして `commit` コマンドで行えるのです。

[[divergent_history]]
//////////////////////////
.Divergent history
image::images/advance-master.png[Divergent history.]
//////////////////////////
.分裂した歴史
image::images/advance-master.png[分裂した歴史]

//////////////////////////
You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.
//////////////////////////
この状況を `git log` コマンドで確認することもできます。
`git log --oneline --decorate --graph --all` を実行すると、コミットの歴史を表示するだけではなく、
ブランチポインタがどのコミットを指しているのかや、歴史がどこで分裂したのかも表示します。

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

//////////////////////////
Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).
//////////////////////////
Git におけるブランチとは、実際のところ特定のコミットを指す 40 文字の SHA-1 チェックサムだけを記録したシンプルなファイルです。
したがって、ブランチを作成したり破棄したりするのは非常にコストの低い作業となります。
新たなブランチの作成は、単に 41 バイト (40 文字と改行文字) のデータをファイルに書き込むのと同じくらい高速に行えます。

//////////////////////////
This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.
//////////////////////////
これが他の大半の VCS ツールのブランチと対照的なところです。
他のツールでは、プロジェクトのすべてのファイルを新たなディレクトリにコピーしたりすることになります。
プロジェクトの規模にもよりますが、これには数秒から数分の時間がかかることでしょう。
Git ならこの処理はほぼ瞬時に行えます。
また、コミットの時点で親オブジェクトを記録しているので、マージの際にもどこを基準にすればよいのかを自動的に判断してくれます。
そのためマージを行うのも非常に簡単です。
これらの機能のおかげで、開発者が気軽にブランチを作成して使えるようになっています。

//////////////////////////
Let's see why you should do so.
//////////////////////////
では、なぜブランチを切るべきなのかについて見ていきましょう。

