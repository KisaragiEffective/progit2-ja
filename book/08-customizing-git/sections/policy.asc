[[_an_example_git_enforced_policy]]
//////////////////////////
=== An Example Git-Enforced Policy
//////////////////////////
=== Git ポリシーの実施例

(((policy example)))
//////////////////////////
In this section, you'll use what you've learned to establish a Git workflow that checks for a custom commit message format, and allows only certain users to modify certain subdirectories in a project.
You'll build client scripts that help the developer know if their push will be rejected and server scripts that actually enforce the policies.
//////////////////////////
このセクションでは、これまでに学んだ内容を使って実際に Git のワークフローを確立してみます。
コミットメッセージの書式をチェックし、またプロジェクト内の特定のサブディレクトリを特定のユーザーだけが変更できるようにします。
以降では、開発者に対して「なぜプッシュが却下されたのか」を伝えるためのクライアントスクリプトと、ポリシーを強制するためのサーバースクリプトを作成していきます。

//////////////////////////
The scripts we'll show are written in Ruby; partly because of our intellectual inertia, but also because Ruby is easy to read, even if you can't necessarily write it.
However, any language will work – all the sample hook scripts distributed with Git are in either Perl or Bash, so you can also see plenty of examples of hooks in those languages by looking at the samples.
//////////////////////////
以降で示すスクリプトは Ruby で書かれています。理由としては、我々の知的習慣によるところもありますが、Ruby は（たとえ書けないとしても）読むのが簡単というのも理由のひとつです。
しかし、それ以外の言語であってもきちんと動作します。Git に同梱されているサンプルスクリプトはすべて Perl あるいは Bash で書かれています。サンプルスクリプトを見れば、それらの言語による大量のフックの例を見ることができます。

//////////////////////////
==== Server-Side Hook
//////////////////////////
==== サーバーサイドフック

//////////////////////////
All the server-side work will go into the `update` file in your `hooks` directory.
The `update` hook runs once per branch being pushed and takes three arguments:
//////////////////////////
サーバーサイドで行う処理は、すべて `hooks` ディレクトリの `update` ファイルにまとめます。
`update` ファイルはプッシュされるブランチごとに実行され、次の3つの引数を取ります。

//////////////////////////
* The name of the reference being pushed to
* The old revision where that branch was
* The new revision being pushed
//////////////////////////
* プッシュされる参照の名前
* 操作前のブランチのリビジョン
* プッシュされる新しいリビジョン

//////////////////////////
You also have access to the user doing the pushing if the push is being run over SSH.
If you've allowed everyone to connect with a single user (like ``git'') via public-key authentication, you may have to give that user a shell wrapper that determines which user is connecting based on the public key, and set an environment variable accordingly.
Here we'll assume the connecting user is in the `$USER` environment variable, so your update script begins by gathering all the information you need:
//////////////////////////
また、SSH 経由でのプッシュの場合は、プッシュしたユーザーを知ることもできます。
全員に共通のユーザー（ ``git'' など）を使って公開鍵認証をしている場合は、公開鍵の情報に基づいて実際のユーザーを判断して環境変数を設定するというラッパーが必要です。
ここでは、接続しているユーザー名が環境変数 `$USER` に格納されているものとします。 `update` スクリプトは、まず必要な情報を取得するところから始まります。

[source,ruby]
----
#!/usr/bin/env ruby

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

puts "Enforcing Policies..."
puts "(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"
----

//////////////////////////
Yes, those are global variables.
Don't judge – it's easier to demonstrate this way.
//////////////////////////
そう、グローバル変数を使ってますね。
が、責めないでください – 実例を示すには、こっちの方が簡単なんです。

[[_enforcing_commit_message_format]]
//////////////////////////
===== Enforcing a Specific Commit-Message Format
//////////////////////////
===== 特定のコミットメッセージ書式の強制

//////////////////////////
Your first challenge is to enforce that each commit message adheres to a particular format.
Just to have a target, assume that each message has to include a string that looks like ``ref: 1234'' because you want each commit to link to a work item in your ticketing system.
You must look at each commit being pushed up, see if that string is in the commit message, and, if the string is absent from any of the commits, exit non-zero so the push is rejected.
//////////////////////////
まずは、コミットメッセージを特定の書式に従わせることに挑戦してみましょう。
ここでは、コミットメッセージには必ず ``ref: 1234'' 形式の文字列を含むこと、というルールにします。個々のコミットをチケットシステムの作業項目とリンクさせたいという意図です。
やらなければならないことは、プッシュされてきた各コミットのコミットメッセージに上記の文字列があるか調べ、なければゼロ以外の値を返して終了し、プッシュを却下することです。

//////////////////////////
You can get a list of the SHA-1 values of all the commits that are being pushed by taking the `$newrev` and `$oldrev` values and passing them to a Git plumbing command called `git rev-list`.
This is basically the `git log` command, but by default it prints out only the SHA-1 values and no other information.
So, to get a list of all the commit SHA-1s introduced between one commit SHA-1 and another, you can run something like this:
//////////////////////////
プッシュされたすべてのコミットの SHA-1 値を取得するには、`$newrev` と `$oldrev` の内容を `git rev-list` という Git の配管（plumbing）コマンドに渡します。
これは基本的には `git log` コマンドのようなものですが、デフォルトでは SHA-1 値だけを表示してそれ以外の情報は出力しません。
ふたつのコミットの間のすべてのコミットの SHA-1 を得るには、次のようなコマンドを実行します。

[source,console]
----
$ git rev-list 538c33..d14fc7
d14fc7c847ab946ec39590d87783c69b031bdfb7
9f585da4401b0a3999e84113824d15245c13f0be
234071a1be950e2a8d078e6141f5cd20c1e61ad3
dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475
----

//////////////////////////
You can take that output, loop through each of those commit SHA-1s, grab the message for it, and test that message against a regular expression that looks for a pattern.
//////////////////////////
この出力を受け取って、ループさせて各コミットの SHA-1 を取得し、個々のメッセージを取り出せば、正規表現でそのメッセージを調べることができます。

//////////////////////////
You have to figure out how to get the commit message from each of these commits to test.
To get the raw commit data, you can use another plumbing command called `git cat-file`.
We'll go over all these plumbing commands in detail in <<_git_internals>>; but for now, here's what that command gives you:
//////////////////////////
さて、これらのコミットからコミットメッセージを取り出す方法を見つけなければなりません。
生のコミットデータを取得するには、別の配管コマンド `git cat-file` を使います。
配管コマンドについては <<_git_internals>> で詳しく説明しますが、とりあえずはこのコマンドがどんな結果を返すのだけを示します。

[source,console]
----
$ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

changed the version number
----

//////////////////////////
A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.
You can do so with the `sed` command on Unix systems:
//////////////////////////
SHA-1 値がわかっているときにコミットからコミットメッセージを得るシンプルな方法は、空行を探してそれ以降をすべて取得するというものです。
これには、Unix システムの `sed` コマンドが使えます。

[source,console]
----
$ git cat-file commit ca82a6 | sed '1,/^$/d'
changed the version number
----

//////////////////////////
You can use that incantation to grab the commit message from each commit that is trying to be pushed and exit if you see anything that doesn't match.
To exit the script and reject the push, exit non-zero.
The whole method looks like this:
//////////////////////////
プッシュしようとしているコミットから、この呪文を使ってコミットメッセージを取得し、もし条件にマッチしないものがあれば終了させればよいのです。
スクリプトを抜けてプッシュを却下するには、ゼロ以外の値を返して終了します。
以上を踏まえると、このメソッドは次のようになります。

[source,ruby]
----
$regex = /\[ref: (\d+)\]/

# enforced custom commit message format
def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
      puts "[POLICY] Your message is not formatted correctly"
      exit 1
    end
  end
end
check_message_format
----

//////////////////////////
Putting that in your `update` script will reject updates that contain commits that have messages that don't adhere to your rule.
//////////////////////////
これを `update` スクリプトに追加すると、ルールを守らないコミットメッセージが含まれるコミットのプッシュを却下するようになります。

//////////////////////////
===== Enforcing a User-Based ACL System
//////////////////////////
===== ユーザーベースのアクセス制御

//////////////////////////
Suppose you want to add a mechanism that uses an access control list (ACL) that specifies which users are allowed to push changes to which parts of your projects.
Some people have full access, and others can only push changes to certain subdirectories or specific files.
To enforce this, you'll write those rules to a file named `acl` that lives in your bare Git repository on the server.
You'll have the `update` hook look at those rules, see what files are being introduced for all the commits being pushed, and determine whether the user doing the push has access to update all those files.
//////////////////////////
アクセス制御リスト (ACL) を使って、ユーザーごとにプロジェクトのどの部分に対して変更をプッシュできるのかを指定できる仕組みを追加したいとしましょう。
全体にアクセスできるユーザーもいれば、特定のサブディレクトリやファイルにしか変更をプッシュできないユーザーもいる、といった具合です。
これを行うには、ルールを書いたファイル `acl` をサーバー上のベア Git リポジトリに置きます。
`update` フックにこのファイルを読ませ、プッシュされてきたコミットにどのようなファイルが含まれているのかを調べ、そしてプッシュしたユーザーにそのファイルを変更する権限があるのか判断します。

//////////////////////////
The first thing you'll do is write your ACL.
Here you'll use a format very much like the CVS ACL mechanism: it uses a series of lines, where the first field is `avail` or `unavail`, the next field is a comma-delimited list of the users to which the rule applies, and the last field is the path to which the rule applies (blank meaning open access).
All of these fields are delimited by a pipe (`|`) character.
//////////////////////////
まずは ACL を作るところから始めましょう。
ここでは、CVS の ACL と似た書式を使います。これは各項目を一行で表し、最初のフィールドは `avail` あるいは `unavail`、そして次の行がそのルールを適用するユーザーの一覧（カンマ区切り）、そして最後のフィールドがそのルールを適用するパス（ブランクは全体へのアクセスを意味します）です。フィールドの区切りには、パイプ文字 (`|`) を使います。

//////////////////////////
In this case, you have a couple of administrators, some documentation writers with access to the `doc` directory, and one developer who only has access to the `lib` and `tests` directories, and your ACL file looks like this:
//////////////////////////
ここでは、全体にアクセスできる管理者、 `doc` ディレクトリにアクセスできるドキュメント担当者、そして `lib` と `tests` ディレクトリだけにアクセスできる開発者を設定します。ACL ファイルは次のようになります。

[source]
----
avail|nickh,pjhyett,defunkt,tpw
avail|usinclair,cdickens,ebronte|doc
avail|schacon|lib
avail|schacon|tests
----

//////////////////////////
You begin by reading this data into a structure that you can use.
In this case, to keep the example simple, you'll only enforce the `avail` directives.
Here is a method that gives you an associative array where the key is the user name and the value is an array of paths to which the user has write access:
//////////////////////////
まずはこのデータを読み込んで、スクリプト内で使えるデータ構造にしてみましょう。
例をシンプルにするために、ここでは `avail` ディレクティブだけを使います。
次のメソッドは連想配列を返すものです。配列のキーはユーザー名、キーに対応する値はそのユーザーが書き込み権限を持つパスの配列になります。

[source,ruby]
----
def get_acl_access_data(acl_file)
  # read in ACL data
  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
  access = {}
  acl_file.each do |line|
    avail, users, path = line.split('|')
    next unless avail == 'avail'
    users.split(',').each do |user|
      access[user] ||= []
      access[user] << path
    end
  end
  access
end
----

//////////////////////////
On the ACL file you looked at earlier, this `get_acl_access_data` method returns a data structure that looks like this:
//////////////////////////
先ほどの ACL ファイルをこの `get_acl_access_data` メソッドに渡すと、このようなデータ構造を返します。

[source,ruby]
----
{"defunkt"=>[nil],
 "tpw"=>[nil],
 "nickh"=>[nil],
 "pjhyett"=>[nil],
 "schacon"=>["lib", "tests"],
 "cdickens"=>["doc"],
 "usinclair"=>["doc"],
 "ebronte"=>["doc"]}
----

//////////////////////////
Now that you have the permissions sorted out, you need to determine what paths the commits being pushed have modified, so you can make sure the user who's pushing has access to all of them.
//////////////////////////
これで権限がわかったので、あとはプッシュされた各コミットがどのパスを変更しようとしているのかを調べれば、そのユーザーがプッシュできるのか判断できます。

//////////////////////////
You can pretty easily see what files have been modified in a single commit with the `--name-only` option to the `git log` command
(mentioned briefly in <<_git_basics_chapter>>):
//////////////////////////
あるコミットでどのファイルが変更されるのかを知るのはとても簡単で、`git log` コマンドに `--name-only` オプションを指定するだけです（<<_git_basics_chapter>> で簡単に説明しました）。

[source,console]
----
$ git log -1 --name-only --pretty=format:'' 9f585d

README
lib/test.rb
----

//////////////////////////
If you use the ACL structure returned from the `get_acl_access_data` method and check it against the listed files in each of the commits, you can determine whether the user has access to push all of their commits:
//////////////////////////
`get_acl_access_data` メソッドが返す ACL のデータとこのファイルリストを付き合わせれば、そのユーザーにコミットをプッシュする権限があるかどうかを判断できます。

[source,ruby]
----
# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('acl')

  # see if anyone is trying to push something they can't
  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  new_commits.each do |rev|
    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
    files_modified.each do |path|
      next if path.size == 0
      has_file_access = false
      access[$user].each do |access_path|
        if !access_path  # user has access to everything
           || (path.start_with? access_path) # access to this path
          has_file_access = true
        end
      end
      if !has_file_access
        puts "[POLICY] You do not have access to push to #{path}"
        exit 1
      end
    end
  end
end

check_directory_perms
----

//////////////////////////
You get a list of new commits being pushed to your server with `git rev-list`.
Then, for each of those commits, you find which files are modified and make sure the user who's pushing has access to all the paths being modified.
//////////////////////////
最初に `git rev-list` でサーバへプッシュされるコミットの一覧を取得します。
次に、それぞれのコミットでどのファイルが変更されるのかを調べ、プッシュしてきたユーザーにそのファイルを変更する権限があるか確かめています。

//////////////////////////
Now your users can't push any commits with badly formed messages or with modified files outside of their designated paths.
//////////////////////////
これで、まずい形式のコミットメッセージや、指定されたパス以外のファイルの変更を含むコミットはプッシュできなくなりました。

//////////////////////////
===== Testing It Out
//////////////////////////
===== テストを実施する

//////////////////////////
If you run `chmod u+x .git/hooks/update`, which is the file into which you should have put all this code, and then try to push a commit with a non-compliant message, you get something like this:
//////////////////////////
これまでのコードを書き込んだファイルに対して `chmod u+x .git/hooks/update` を実行します。その上で、メッセージが規定に沿っていないコミットをプッシュしてみましょう。すると、こんなメッセージが表示されるでしょう。

[source,console]
----
$ git push -f origin master
Counting objects: 5, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 323 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Enforcing Policies...
(refs/heads/master) (8338c5) (c5b616)
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
----

//////////////////////////
There are a couple of interesting things here.
First, you see this where the hook starts running.
//////////////////////////
この中には、興味深い点がいくつかあります。
まず、フックの実行が始まったときの次の表示に注目しましょう。

[source,console]
----
Enforcing Policies...
(refs/heads/master) (fb8c72) (c56860)
----

//////////////////////////
Remember that you printed that out at the very beginning of your update script.
Anything your script echoes to `stdout` will be transferred to the client.
//////////////////////////
これは、スクリプトの先頭で標準出力に表示した内容でした。
ここで重要なのは「スクリプトから `stdout` に送った内容は、すべてクライアントにも送られる」ということです。

//////////////////////////
The next thing you'll notice is the error message.
//////////////////////////
次に注目するのは、エラーメッセージです。

[source,console]
----
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
----

//////////////////////////
The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.
Lastly, you have this:
//////////////////////////
最初の行はスクリプトから出力したもので、その他の 2 行は Git が出力したものです。この 2 行では、スクリプトがゼロ以外の値で終了したためにプッシュが却下されたということを説明しています。
最後に、次の部分に注目します。

[source,console]
----
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
----

//////////////////////////
You'll see a remote rejected message for each reference that your hook declined, and it tells you that it was declined specifically because of a hook failure.
//////////////////////////
フックで却下したすべての参照について、remote rejected メッセージが表示されます。これを見れば、フック内での処理のせいで却下されたのだということがわかります。

//////////////////////////
Furthermore, if someone tries to edit a file they don't have access to and push a commit containing it, they will see something similar.
For instance, if a documentation author tries to push a commit modifying something in the `lib` directory, they see
//////////////////////////
また、変更権限のないファイルを変更してそれを含むコミットをプッシュしようとしたときも、同様にエラーが表示されます。
たとえば、ドキュメント担当者が `lib` ディレクトリ内の何かを変更しようとした場合のメッセージは次のようになります。

[source,console]
----
[POLICY] You do not have access to push to lib/test.rb
----

//////////////////////////
From now on, as long as that `update` script is there and executable, your repository will never have a commit message without your pattern in it, and your users will be sandboxed.
//////////////////////////
以降、この `update` スクリプトが動いてさえいれば、指定したパターンを含まないコミットメッセージがリポジトリに登録されることは二度とありません。また、ユーザーに変なところをさわられる心配もなくなります。

//////////////////////////
==== Client-Side Hooks
//////////////////////////
==== クライアントサイドフック

//////////////////////////
The downside to this approach is the whining that will inevitably result when your users' commit pushes are rejected.
Having their carefully crafted work rejected at the last minute can be extremely frustrating and confusing; and furthermore, they will have to edit their history to correct it, which isn't always for the faint of heart.
//////////////////////////
この方式の弱点は、プッシュが却下されたときにユーザーが泣き寝入りせざるを得なくなるということです。
手間暇かけて仕上げた作業が最後の最後で却下されるというのは、非常にストレスがたまるし不可解です。さらに、プッシュするためには歴史を修正しなければならないのですが、気弱な人にとってそれはかなりつらいことです。

//////////////////////////
The answer to this dilemma is to provide some client-side hooks that users can run to notify them when they're doing something that the server is likely to reject.
That way, they can correct any problems before committing and before those issues become more difficult to fix.
Because hooks aren't transferred with a clone of a project, you must distribute these scripts some other way and then have your users copy them to their `.git/hooks` directory and make them executable.
You can distribute these hooks within the project or in a separate project, but Git won't set them up automatically.
//////////////////////////
このジレンマに対する答えとして、サーバーが却下するであろう作業をするときに、それをユーザーに伝えるためのクライアントサイドフックを用意します。
そうすれば、何か問題があるときに、それをコミットする前に知ることができるので、取り返しのつかなくなる前に問題を修正できます。
なおプロジェクトをクローンしてもフックはコピーされないので、別の何らかの方法で各ユーザーにスクリプトを配布した上で、各ユーザーにそれを `.git/hooks` にコピーさせ、実行可能にさせる必要があります。
フックスクリプト自体をプロジェクトに含めたり別のプロジェクトにしたりすることはできますが、各自の環境でそれをフックとして自動的に設定することはできません。

//////////////////////////
To begin, you should check your commit message just before each commit is recorded, so you know the server won't reject your changes due to badly formatted commit messages.
To do this, you can add the `commit-msg` hook.
If you have it read the message from the file passed as the first argument and compare that to the pattern, you can force Git to abort the commit if there is no match:
//////////////////////////
はじめに、コミットを書き込む直前にコミットメッセージをチェックしなければなりません。コミットメッセージの書式に問題があったがために、変更がサーバーに却下されるということがないように、コミットメッセージの書式を調べるのです。
これを行うには `commit-msg` フックを使います。
最初の引数で渡されたファイルからコミットメッセージを読み込んでパターンと比較し、もしマッチしなければ Git の処理を中断させます。

[source,ruby]
----
#!/usr/bin/env ruby
message_file = ARGV[0]
message = File.read(message_file)

$regex = /\[ref: (\d+)\]/

if !$regex.match(message)
  puts "[POLICY] Your message is not formatted correctly"
  exit 1
end
----

//////////////////////////
If that script is in place (in `.git/hooks/commit-msg`) and executable, and you commit with a message that isn't properly formatted, you see this:
//////////////////////////
このスクリプトを適切な場所 (`.git/hooks/commit-msg`) に置いて実行可能にしておくと、不適切なメッセージを書いてコミットしようとしたときに次のような結果となります。

[source,console]
----
$ git commit -am 'test'
[POLICY] Your message is not formatted correctly
----

//////////////////////////
No commit was completed in that instance.
However, if your message contains the proper pattern, Git allows you to commit:
//////////////////////////
このとき、実際にはコミットされません。
もしメッセージが適切な書式になっていれば、Git はコミットを許可します。

[source,console]
----
$ git commit -am 'test [ref: 132]'
[master e05c914] test [ref: 132]
 1 file changed, 1 insertions(+), 0 deletions(-)
----

//////////////////////////
Next, you want to make sure you aren't modifying files that are outside your ACL scope.
If your project's `.git` directory contains a copy of the ACL file you used previously, then the following `pre-commit` script will enforce those constraints for you:
//////////////////////////
次に、ACL で決められた範囲以外のファイルを変更していないことを確認しましょう。
先ほど使った ACL ファイルのコピーがプロジェクトの `.git` ディレクトリにあれば、次のような `pre-commit` スクリプトでチェックできます。

[source,ruby]
----
#!/usr/bin/env ruby

$user    = ENV['USER']

# [ insert acl_access_data method from above ]

# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('.git/acl')

  files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
  files_modified.each do |path|
    next if path.size == 0
    has_file_access = false
    access[$user].each do |access_path|
    if !access_path || (path.index(access_path) == 0)
      has_file_access = true
    end
    if !has_file_access
      puts "[POLICY] You do not have access to push to #{path}"
      exit 1
    end
  end
end

check_directory_perms
----

//////////////////////////
This is roughly the same script as the server-side part, but with two important differences.
First, the ACL file is in a different place, because this script runs from your working directory, not from your `.git` directory.
You have to change the path to the ACL file from this
//////////////////////////
大まかにはサーバーサイドのスクリプトと同じですが、重要な違いがふたつあります。
まず、ACL ファイルの場所が違います。このスクリプトは作業ディレクトリから実行するものであり、`.git` ディレクトリから実行するものではないからです。
ACL ファイルの場所を、先ほどの

[source,ruby]
----
access = get_acl_access_data('acl')
----

//////////////////////////
to this:
//////////////////////////
から次のように変更しなければなりません。

[source,ruby]
----
access = get_acl_access_data('.git/acl')
----

//////////////////////////
The other important difference is the way you get a listing of the files that have been changed.
Because the server-side method looks at the log of commits, and, at this point, the commit hasn't been recorded yet, you must get your file listing from the staging area instead.
Instead of
//////////////////////////
もうひとつの違いは、変更されたファイルの一覧を取得する方法です。
サーバーサイドのメソッドではコミットログを調べていました。しかしこの時点ではまだコミットが記録されていないので、ファイルの一覧はステージング・エリアから取得しなければなりません。
つまり、先ほどの

[source,ruby]
----
files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`
----

//////////////////////////
you have to use
//////////////////////////
は次のようになります。

[source,ruby]
----
files_modified = `git diff-index --cached --name-only HEAD`
----

//////////////////////////
But those are the only two differences – otherwise, the script works the same way.
One caveat is that it expects you to be running locally as the same user you push as to the remote machine.
If that is different, you must set the `$user` variable manually.
//////////////////////////
しかし、違うのはこの二点だけで、それ以外はまったく同じように動作します。
ただしこのスクリプトは、ローカルで実行しているユーザーと、リモートマシンにプッシュするときのユーザーが同じであることを前提にしています。
もし異なる場合は、変数 `$user` を手動で設定しなければなりません。

//////////////////////////
One other thing we can do here is make sure the user doesn't push non-fast-forwarded references.
To get a reference that isn't a fast-forward, you either have to rebase past a commit you've already pushed up or try pushing a different local branch up to the same remote branch.
//////////////////////////
最後に残ったのは fast-forward でないプッシュを止めることです。
fast-forward でない参照を取得するには、すでにプッシュした過去のコミットにリベースするか、別のローカルブランチにリモートブランチと同じところまでプッシュしなければなりません。

//////////////////////////
Presumably, the server is already configured with `receive.denyDeletes` and `receive.denyNonFastForwards` to enforce this policy, so the only accidental thing you can try to catch is rebasing commits that have already been pushed.
//////////////////////////
サーバーサイドではすでに `receive.denyDeletes` と `receive.denyNonFastForwards` でこのポリシーを強制しているでしょうから、あり得るのは、すでにプッシュ済みのコミットをリベースしようとするときくらいです。

//////////////////////////
Here is an example pre-rebase script that checks for that.
It gets a list of all the commits you're about to rewrite and checks whether they exist in any of your remote references.
If it sees one that is reachable from one of your remote references, it aborts the rebase.
//////////////////////////
それをチェックする pre-rebase スクリプトの例を示します。
これは書き換えようとしているコミットの一覧を取得し、それがリモート参照の中に存在するかどうかを調べます。
リモート参照から到達可能なコミットがひとつでもあれば、リベースを中断します。

[source,ruby]
----
#!/usr/bin/env ruby

base_branch = ARGV[0]
if ARGV[1]
  topic_branch = ARGV[1]
else
  topic_branch = "HEAD"
end

target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
remote_refs = `git branch -r`.split("\n").map { |r| r.strip }

target_shas.each do |sha|
  remote_refs.each do |remote_ref|
    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
    if shas_pushed.split("\n").include?(sha)
      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
      exit 1
    end
  end
end
----

//////////////////////////
This script uses a syntax that wasn't covered in <<_revision_selection>>. You get a list of commits that have already been pushed up by running this:
//////////////////////////
このスクリプトでは、 <<_revision_selection>> ではカバーしていない構文を使っています。
既にプッシュ済みのコミットの一覧を得るために、次のコマンドを実行します。

[source,ruby]
----
`git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
----

//////////////////////////
The `SHA^@` syntax resolves to all the parents of that commit.
You're looking for any commit that is reachable from the last commit on the remote and that isn't reachable from any parent of any of the SHA-1s you're trying to push up – meaning it's a fast-forward.
//////////////////////////
`SHA^@` 構文は、そのコミットのすべての親を解決します。
リモートの最後のコミットから到達可能で、これからプッシュしようとする SHA-1 の親のいずれかからもアクセスできないコミット（これによって fast-forward であることが分かります）を探します。

//////////////////////////
The main drawback to this approach is that it can be very slow and is often unnecessary – if you don't try to force the push with `-f`, the server will warn you and not accept the push.
However, it's an interesting exercise and can in theory help you avoid a rebase that you might later have to go back and fix.
//////////////////////////
この方式の弱点は非常に時間がかかることで、多くの場合このチェックは不要です。`-f` つきで強制的にプッシュしようとしない限り、サーバーが警告を出してプッシュできないからです。
しかし練習用の課題としてはおもしろいもので、あとでリベースを取り消してやりなおすはめになることを理屈上は防げるようになります。
