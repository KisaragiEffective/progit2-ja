//////////////////////////
=== Transfer Protocols
//////////////////////////
=== 転送プロトコル

//////////////////////////
Git can transfer data between two repositories in two major ways: the ``dumb'' protocol and the ``smart'' protocol.
This section will quickly cover how these two main protocols operate.
//////////////////////////
Gitが2つのリポジトリ間でデータを転送する方法には、主に ``dumb'' プロトコルと ``smart'' プロトコルの2つがあります。
このセクションでは、これらのプロトコルがどのように機能するのかを駆け足で見ていきます。

//////////////////////////
==== The Dumb Protocol
//////////////////////////
==== dumbプロトコル

//////////////////////////
If you're setting up a repository to be served read-only over HTTP, the dumb protocol is likely what will be used.
This protocol is called ``dumb'' because it requires no Git-specific code on the server side during the transport process; the fetch process is a series of HTTP `GET` requests, where the client can assume the layout of the Git repository on the server.
//////////////////////////
HTTP経由でのリポジトリへのアクセスを読み取り専用にする場合、dumbプロトコルを使うことになると思います。
このプロトコルを ``dumb'' （馬鹿）と呼ぶのは、転送プロセスにおいて、サーバー側にGit専用のコードが不要だからです。フェッチのプロセスは一連のHTTP `GET` リクエストです。ここで、クライアントは、サーバー上のGitリポジトリのレイアウトを仮定してよいことになっています。

[NOTE]
//////////////////////////
====
The dumb protocol is fairly rarely used these days.
It's difficult to secure or make private, so most Git hosts (both cloud-based and on-premises) will refuse to use it.
It's generally advised to use the smart protocol, which we describe a bit further on.
====
//////////////////////////
====
dumbプロトコルは昨今ではほとんど使用されていません。
安全性や秘匿性を保つのが難しいため、多くのGitのホスト（クラウドベースでも、オンプレミスでも）では使用が禁止されています。
一般的には、もう少し後で述べるsmartプロトコルを使用することをおすすめします。
====

//////////////////////////
Let's follow the `http-fetch` process for the simplegit library:
//////////////////////////
simplegitライブラリにおける `http-fetch` のプロセスを追ってみましょう。

[source,console]
----
$ git clone http://server/simplegit-progit.git
----

//////////////////////////
The first thing this command does is pull down the `info/refs` file.
This file is written by the `update-server-info` command, which is why you need to enable that as a `post-receive` hook in order for the HTTP transport to work properly:
//////////////////////////
このコマンドは最初に `info/refs` ファイルをサーバから取得します。
このファイルは `update-server-info` コマンドによって出力されます。そのため、HTTPによる転送を適切に動作させるためには、このコマンドを `post-receive` フック中で呼び出す必要があります。

[source]
----
=> GET info/refs
ca82a6dff817ec66f44342007202690a93763949     refs/heads/master
----

//////////////////////////
Now you have a list of the remote references and SHA-1s.
Next, you look for what the HEAD reference is so you know what to check out when you're finished:
//////////////////////////
いま、手元にはリモート参照とSHA-1のハッシュのリストがあります。
次に、HEADが指しているものを見て、終了時に何をチェックアウトするのかを調べます。

[source]
----
=> GET HEAD
ref: refs/heads/master
----

//////////////////////////
You need to check out the `master` branch when you've completed the process.
At this point, you're ready to start the walking process.
Because your starting point is the `ca82a6` commit object you saw in the `info/refs` file, you start by fetching that:
//////////////////////////
プロセスの完了時には、`master` ブランチをチェックアウトする必要があると分かりました。
これで、参照を辿るプロセスを開始する準備ができました。
開始地点は `info/refs` ファイルの中にあった `ca82a6` のコミットオブジェクトなので、まずそれを取得します。

[source]
----
=> GET objects/ca/82a6dff817ec66f44342007202690a93763949
(179 bytes of binary data)
----

//////////////////////////
You get an object back – that object is in loose format on the server, and you fetched it over a static HTTP GET request.
You can zlib-uncompress it, strip off the header, and look at the commit content:
//////////////////////////
すると、オブジェクトが返ってきます。これは、サーバー上にある緩いフォーマットのオブジェクトで、それを静的なHTTP GETリクエストで取得したわけです。
このオブジェクトのzlib圧縮を解除し、ヘッダを取り除けば、コミットの内容が見られます。

[source,console]
----
$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

changed the version number
----

//////////////////////////
Next, you have two more objects to retrieve – `cfda3b`, which is the tree of content that the commit we just retrieved points to; and `085bb3`, which is the parent commit:
//////////////////////////
もう2つ、オブジェクトを取得する必要があることが分かりました。
たった今取得したコミットが指しているコンテンツのツリーである `cfda3b` と、親にあたるコミットである `085bb3` です。

[source]
----
=> GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
(179 bytes of data)
----

//////////////////////////
That gives you your next commit object.
Grab the tree object:
//////////////////////////
まずは親にあたるオブジェクトを取得しました。
続いてツリーオブジェクトを取得してみましょう。

[source]
----
=> GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf
(404 - Not Found)
----

//////////////////////////
Oops – it looks like that tree object isn't in loose format on the server, so you get a 404 response back.
There are a couple of reasons for this – the object could be in an alternate repository, or it could be in a packfile in this repository.
Git checks for any listed alternates first:
//////////////////////////
おっと、そのツリーオブジェクトは緩いフォーマットではサーバー上に存在しないようです。そのため404のレスポンスを受け取っています。
考えられる理由は2つあります。オブジェクトが代替のリポジトリにあるためか、またはこのリポジトリ内のpackfileに含まれているためです。
Gitはまず、代替のリポジトリの一覧を調べます。

[source]
----
=> GET objects/info/http-alternates
(empty file)
----

//////////////////////////
If this comes back with a list of alternate URLs, Git checks for loose files and packfiles there – this is a nice mechanism for projects that are forks of one another to share objects on disk.
However, because no alternates are listed in this case, your object must be in a packfile.
To see what packfiles are available on this server, you need to get the `objects/info/packs` file, which contains a listing of them (also generated by `update-server-info`):
//////////////////////////
このGETリクエストに対して代替のURLのリストが返ってきた場合、Gitはその場所から緩いフォーマットのファイルとpackfileを探します。これは、プロジェクトがディスク上のオブジェクトを共有するために互いにフォークし合っている場合に適したメカニズムです。
ですが、このケースでは代替URLのリストは空だったので、オブジェクトはpackfileの中にあるに違いありません。
サーバー上のアクセス可能なpackfileの一覧は、 `objects/info/packs` ファイルに格納されているので、これを取得する必要があります（このファイルも `update-server-info` で生成されます）。

[source]
----
=> GET objects/info/packs
P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
----

//////////////////////////
There is only one packfile on the server, so your object is obviously in there, but you'll check the index file to make sure.
This is also useful if you have multiple packfiles on the server, so you can see which packfile contains the object you need:
//////////////////////////
サーバー上にはpackfileが1つしかないので、探しているオブジェクトは明らかにこの中にあります。しかし念の為にインデックスファイルをチェックしてみましょう。
これにより、サーバー上にpackfileが複数ある場合でも、必要なオブジェクトがどのpackfileに含まれているか調べられます。

[source]
----
=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx
(4k of binary data)
----

//////////////////////////
Now that you have the packfile index, you can see if your object is in it – because the index lists the SHA-1s of the objects contained in the packfile and the offsets to those objects.
Your object is there, so go ahead and get the whole packfile:
//////////////////////////
packfileのインデックスが取得できたので、これで探しているオブジェクトがpackfileの中にあるか調べられます – なぜなら、インデックスにはpackfileの中にあるオブジェクトのSHA-1ハッシュと、それらのオブジェクトに対するオフセットの一覧が格納されているからです。
探しているオブジェクトはそこにあります。さあ、そのpackfileをまるごと取得してみましょう。

[source]
----
=> GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
(13k of binary data)
----

//////////////////////////
You have your tree object, so you continue walking your commits.
They're all also within the packfile you just downloaded, so you don't have to do any more requests to your server.
Git checks out a working copy of the `master` branch that was pointed to by the HEAD reference you downloaded at the beginning.
//////////////////////////
探していたツリーオブジェクトが見つかりました。さらにコミットを辿ってみましょう。コミットはいずれも、あなたがダウンロードしたばかりのパックファイルの中にあります。
そのため、もはやサーバーに対していかなるリクエストも不要です。Git は `master` ブランチの作業用コピーをチェックアウトします。そのブランチは最初にダウンロードした HEAD への参照によってポイントされています。

//////////////////////////
==== The Smart Protocol
//////////////////////////
==== スマートプロトコル

//////////////////////////
The dumb protocol is simple but a bit inefficient, and it can't handle writing of data from the client to the server.
The smart protocol is a more common method of transferring data, but it requires a process on the remote end that is intelligent about Git – it can read local data, figure out what the client has and needs, and generate a custom packfile for it.
There are two sets of processes for transferring data: a pair for uploading data and a pair for downloading data.
//////////////////////////
無口なプロトコルはシンプルですが、少し非効率ですし、クライアントからサーバーへのデータの書き込みを制御できません。
スマートプロトコルはデータ移行のより一般的な手段ですが、リモートエンド上に Git のことが分かるプロセスを必要とします。そのプロセスは、ローカルのデータを読んで、クライアントが何を持っていて何を必要としているかを調査し、それに対するカスタムパックファイルを生成できる必要があります。
データを転送するためのプロセスが2セットあります。データをアップロードするペア、それと、ダウンロードするペアです。

//////////////////////////
===== Uploading Data
//////////////////////////
===== データのアップロード

(((git commands, send-pack)))(((git commands, receive-pack)))
//////////////////////////
To upload data to a remote process, Git uses the `send-pack` and `receive-pack` processes.
The `send-pack` process runs on the client and connects to a `receive-pack` process on the remote side.
//////////////////////////
リモートプロセスにデータをアップロードするため、Git は `send-pack` と `receive-pack` のプロセスを使用します。`send-pack` プロセスはクライアント上で実行されリモートサイド上の `receive-pack` プロセスに接続します。

====== SSH

//////////////////////////
For example, say you run `git push origin master` in your project, and `origin` is defined as a URL that uses the SSH protocol.
Git fires up the `send-pack` process, which initiates a connection over SSH to your server.
It tries to run a command on the remote server via an SSH call that looks something like this:
//////////////////////////
例えば、あなたのプロジェクトで `git push origin master` を実行したとしましょう。そして `origin` は SSHプロトコルを使用する URLとして定義されているとします。Git はあなたのサーバーへの SSHによる接続を開始する `send-pack` プロセスを実行します。リモートサーバー上で以下のようなSSHの呼び出しを介してコマンドを実行しようとします。

[source,console]
----
$ ssh -x git@server "git-receive-pack 'simplegit-progit.git'"
00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master□report-status \
	delete-refs side-band-64k quiet ofs-delta \
	agent=git/2:2.1.1+github-607-gfba4028 delete-refs
0000
----

//////////////////////////
The `git-receive-pack` command immediately responds with one line for each reference it currently has – in this case, just the `master` branch and its SHA-1.
The first line also has a list of the server's capabilities (here, `report-status`, `delete-refs`, and some others, including the client identifier).
//////////////////////////
`git-receive-pack` コマンドは現在持っている各々の参照に対してひとつの行をすぐに返します。このケースでは、`master` ブランチとその SHA-1ハッシュのみです。
最初の行はサーバーの持っている機能（ここでは、`report-status` や `delete-refs`など。クライアント識別子も含まれている）のリストも持っています。

//////////////////////////
Each line starts with a 4-character hex value specifying how long the rest of the line is.
Your first line starts with 005b, which is hexadecimal for 91, meaning that 91 bytes remain on that line.
The next line starts with 003e, which is 62, so you read the remaining 62 bytes.
The next line is 0000, meaning the server is done with its references listing.
//////////////////////////
各行は 4文字の 16進数で始まっており、その残りの行がどれくらいの長さなのかを示しています。
最初の行は 005b で始まっていますが、これは16進数で 91 を示し、その行には 91バイトが残っていることを意味します。
次の行は 003e で始まっていて、これは 62 です。そのため残りの 62バイトを読みます。
次の行は 0000 であり、サーバーはその参照のリスト表示を終えたことを意味します。

//////////////////////////
Now that it knows the server's state, your `send-pack` process determines what commits it has that the server doesn't.
For each reference that this push will update, the `send-pack` process tells the `receive-pack` process that information.
For instance, if you're updating the `master` branch and adding an `experiment` branch, the `send-pack` response may look something like this:
//////////////////////////
サーバーの状態がわかったので、 サーバーが持っていないのはどのコミットなのかを `send-pack` プロセスは判別できます。
このプッシュが更新する予定の各参照に対して、`send-pack` プロセスは `receive-pack` プロセスにその情報を伝えます。例えば、もしもあなたが `master` ブランチを更新していて、さらに、`experiment` ブランチを追加しているとき、`send-pack` のレスポンスは次のように見えるかもしれません。

[source]
----
0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \
	refs/heads/master report-status
006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \
	refs/heads/experiment
0000
----

//////////////////////////
Git sends a line for each reference you're updating with the line's length, the old SHA-1, the new SHA-1, and the reference that is being updated.
The first line also has the client's capabilities.
The SHA-1 value of all '0's means that nothing was there before – because you're adding the experiment reference.
If you were deleting a reference, you would see the opposite: all '0's on the right side.
//////////////////////////
Git は更新しようとしている参照のそれぞれに対して、行の長さ、古い SHA-1、新しい SHA-1、更新される参照を含む行を送信します。
最初の行にはクライアントの持っている機能も含まれています。
すべてが '0' の SHA-1ハッシュ値は以前そこには何もなかったことを意味します。それはあなたが experiment の参照を追加しているためです。もしもあなたが参照を削除していたとすると、あなたは逆にすべての '0' が右側にあるのを見るでしょう。

//////////////////////////
Next, the client sends a packfile of all the objects the server doesn't have yet.
Finally, the server responds with a success (or failure) indication:
//////////////////////////
次に、クライアントはサーバーが未だ持ったことのないすべてのオブジェクトのパックファイルを送信します。最後に、サーバーは成功（あるいは失敗）の表示を返します。

[source]
----
000eunpack ok
----

====== HTTP(S)

//////////////////////////
This process is mostly the same over HTTP, though the handshaking is a bit different.
The connection is initiated with this request:
//////////////////////////
このプロセスは、ハンドシェイクが少し違うだけで、HTTP経由の場合とほとんど同じです。
接続は以下のリクエストで初期化されます。

[source]
----
=> GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack
001f# service=git-receive-pack
00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master□report-status \
	delete-refs side-band-64k quiet ofs-delta \
	agent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e
0000
----

//////////////////////////
That's the end of the first client-server exchange.
The client then makes another request, this time a `POST`, with the data that `git-upload-pack` provides.
//////////////////////////
これで初回のクライアント・サーバー間の交信は終了です。
クライアントは次に別のリクエストを作成します。この場合は `git-upload-pack` が提供するデータをもとに `POST` リクエストを作成します。

[source]
----
=> POST http://server/simplegit-progit.git/git-receive-pack
----

//////////////////////////
The `POST` request includes the `send-pack` output and the packfile as its payload.
The server then indicates success or failure with its HTTP response.
//////////////////////////
この　`POST` リクエストには `send-pack` の出力とパックファイルがそのペイロードとして含まれています。
サーバーはこれに対して成功か失敗かを HTTP レスポンスで示します。

//////////////////////////
===== Downloading Data
//////////////////////////
===== データのダウンロード

(((git commands, fetch-pack)))(((git commands, upload-pack)))
//////////////////////////
When you download data, the `fetch-pack` and `upload-pack` processes are involved.
The client initiates a `fetch-pack` process that connects to an `upload-pack` process on the remote side to negotiate what data will be transferred down.
//////////////////////////
データをダウンロードするときには、`fetch-pack` と `upload-pack` の2つのプロセスが使用されます。
クライアントは `fetch-pack` プロセスを開始します。何のデータが移送されてくるのかを取り決める（negotiate）ため、それはリモートサイド上の `upload-pack` プロセスに接続します。

====== SSH

//////////////////////////
If you're doing the fetch over SSH, `fetch-pack` runs something like this:
//////////////////////////
SSHを介してフェッチを行っているなら、`fetch-pack` はこのように実行します。

[source,console]
----
$ ssh -x git@server "git-upload-pack 'simplegit-progit.git'"
----

//////////////////////////
After `fetch-pack` connects, `upload-pack` sends back something like this:
//////////////////////////
`fetch-pack` の接続のあと、`upload-pack` はこのように送り返します。

[source]
----
00dfca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
	side-band side-band-64k ofs-delta shallow no-progress include-tag \
	multi_ack_detailed symref=HEAD:refs/heads/master \
	agent=git/2:2.1.1+github-607-gfba4028
003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master
0000
----

//////////////////////////
This is very similar to what `receive-pack` responds with, but the capabilities are different.
In addition, it sends back what HEAD points to (`symref=HEAD:refs/heads/master`) so the client knows what to check out if this is a clone.
//////////////////////////
これは `receive-pack` が返答する内容にとても似ていますが、持っている機能は異なります。
加えて、HEADがどこを指しているか (`symref=HEAD:refs/heads/master`) を送り返すので、これがクローンの場合にクライアントが何をチェックアウトするのかを知ることができます。

//////////////////////////
At this point, the `fetch-pack` process looks at what objects it has and responds with the objects that it needs by sending ``want'' and then the SHA-1 it wants.
It sends all the objects it already has with ``have'' and then the SHA-1.
At the end of this list, it writes ``done'' to initiate the `upload-pack` process to begin sending the packfile of the data it needs:
//////////////////////////
この時点で、 `fetch-pack` プロセスは自分がどのオブジェクトを保持しているかをまず確認します。
そして、必要なオブジェクトを返答するため、 ``want'' という文字列とそれが求める SHA-1ハッシュを送ります。 また、既に持っているオブジェクトを伝えるために、 ``have'' という文字列とオブジェクトの SHA-1ハッシュを送ります。このリストの最後で、必要なデータのパックファイルを送信する `upload-pack` プロセスを開始するために `fetch-pack` プロセスは ``done'' を書き込みます。

[source]
----
003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta
0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
0009done
0000
----

====== HTTP(S)

//////////////////////////
The handshake for a fetch operation takes two HTTP requests.
The first is a `GET` to the same endpoint used in the dumb protocol:
//////////////////////////
フェッチ操作のためのハンドシェイクは2つのHTTPリクエストからなります。
1つめは無口なプロトコルで使用するのと同じエンドポイントへの `GET` です。

[source]
----
=> GET $GIT_URL/info/refs?service=git-upload-pack
001e# service=git-upload-pack
00e7ca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
	side-band side-band-64k ofs-delta shallow no-progress include-tag \
	multi_ack_detailed no-done symref=HEAD:refs/heads/master \
	agent=git/2:2.1.1+github-607-gfba4028
003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
0000
----

//////////////////////////
This is very similar to invoking `git-upload-pack` over an SSH connection, but the second exchange is performed as a separate request:
//////////////////////////
これはSSH接続経由で `git-upload-pack` を呼び出す場合と非常によく似ていますが、2つ目の交信は個別のリクエストとして実行されます。

[source]
----
=> POST $GIT_URL/git-upload-pack HTTP/1.0
0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7
0032have 441b40d833fdfa93eb2908e52742248faf0ee993
0000
----

//////////////////////////
Again, this is the same format as above.
The response to this request indicates success or failure, and includes the packfile.
//////////////////////////
これもまた、上と同じフォーマットです。
このリクエストに対するレスポンスは成功したか失敗したかを示し、またパックファイルを含んでいます。

//////////////////////////
==== Protocols Summary
//////////////////////////
==== プロトコルのまとめ

//////////////////////////
This section contains a very basic overview of the transfer protocols.
The protocol includes many other features, such as `multi_ack` or `side-band` capabilities, but covering them is outside the scope of this book.
We've tried to give you a sense of the general back-and-forth between client and server; if you need more knowledge than this, you'll probably want to take a look at the Git source code.
//////////////////////////
このセクションではトランスファープロトコルの最も基本的な概要を取り上げました。
プロトコルには他にも `multi_ack` や `side-band` など数多くの機能がありますが、それらは本書の範囲外です。
ここでは、一般的なクライアントとサーバーの間の行き来に関する感覚を捉えてもらうことを目標としました。これ以上の知識が必要な場合は、おそらくGitのソースコードを見てみる必要があるでしょう。
