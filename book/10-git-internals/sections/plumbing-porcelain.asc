[[_plumbing_porcelain]]
//////////////////////////
=== Plumbing and Porcelain
//////////////////////////
=== 配管（Plumbing）と磁器（Porcelain）

//////////////////////////
This book covers how to use Git with 30 or so verbs such as `checkout`, `branch`, `remote`, and so on.
But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a bunch of verbs that do low-level work and were designed to be chained together UNIX style or called from scripts.
These commands are generally referred to as ``plumbing'' commands, and the more user-friendly commands are called ``porcelain'' commands.
//////////////////////////
本書では、`checkout` や `branch`、`remote` などの約30のコマンドを用いて、Gitの使い方を説明しています。
一方、Gitには低レベルの処理を行うためのコマンドも沢山あります。これは、Gitが元々は、完全にユーザフレンドリーなVCSというよりも、VCSのためのツールキットだったことが理由です。これらのコマンドは、UNIX流につなぎ合わせたり、スクリプトから呼んだりすることを主眼において設計されています。
これらのコマンドは、通常 ``配管（plumbing）'' コマンドと呼ばれています。対して、よりユーザフレンドリーなコマンドは ``磁器（porcelain）'' コマンドと呼ばれています。

//////////////////////////
The book's first nine chapters deal almost exclusively with porcelain commands.
But in this chapter, you'll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git, and help demonstrate how and why Git does what it does.
Many of these commands aren't meant to be used manually on the command line, but rather to be used as building blocks for new tools and custom scripts.
//////////////////////////
本書のはじめの9つの章では、ほぼ磁器コマンドだけを取り扱ってきました。
一方、本章ではそのほとんどで低レベルの配管コマンドを使用します。これは、Gitの内部動作にアクセスして、Gitが、ある処理を、なぜ、どうやって行うのか確かめるためです。
これら配管コマンドの多くは、コマンドラインから手で実行されるのではなく、新しくツールやカスタムスクリプトを作る際に構成要素となることを意図して作られています。

//////////////////////////
When you run `git init` in a new or existing directory, Git creates the `.git` directory, which is where almost everything that Git stores and manipulates is located.
If you want to back up or clone your repository, copying this single directory elsewhere gives you nearly everything you need.
This entire chapter basically deals with the stuff in this directory.
Here's what it looks like:
//////////////////////////
新規の、または既存のディレクトリで `git init` を実行すると、Git は `.git` というディレクトリを作ります。Git が保管したり操作したりする対象の、ほとんどすべてがここに格納されます。
リポジトリのバックアップやクローンをしたい場合、このディレクトリをどこかへコピーするだけで、ほぼ事足ります。
基本的にこの章では、全体を通して、 `.git` ディレクトリの内容を取り扱います。
`.git` ディレクトリの中は以下のようになっています。

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

//////////////////////////
You may see some other files in there, but this is a fresh `git init` repository – it's what you see by default.
The `description` file is only used by the GitWeb program, so don't worry about it.
The `config` file contains your project-specific configuration options, and the `info` directory keeps a global exclude file (((excludes))) for ignored patterns that you don't want to track in a .gitignore file.
The `hooks` directory contains your client- or server-side hook scripts, which are discussed in detail in <<_git_hooks>>.
//////////////////////////
これは `git init` を実行した直後のデフォルトのレポジトリです。それ以外の場合は、他にも幾つかのファイルがそこに見つかるかもしれません。`description` ファイルは、GitWeb プログラムのみで使用します。そのため、それについての配慮は不要です。`config` ファイルには、あなたのプロジェクト固有の設定オプションが含まれます。`info` ディレクトリは、追跡されている .gitignore ファイルには記述したくない無視パターンを書くための、グローバルレベルの除外設定ファイル (((excludes))) を保持します。`hooks` ディレクトリには、あなたのクライアントサイド、または、サーバーサイドのフックスクリプトが含まれます。それについての詳細は <<_git_hooks>> に記述されています。

//////////////////////////
This leaves four important entries: the `HEAD` and (yet to be created) `index` files, and the `objects` and `refs` directories.
These are the core parts of Git.
The `objects` directory stores all the content for your database, the `refs` directory stores pointers into commit objects in that data (branches), the `HEAD` file points to the branch you currently have checked out, and the `index` file is where Git stores your staging area information.
You'll now look at each of these sections in detail to see how Git operates.
//////////////////////////
残りの4つ（`HEAD` ファイルとまだ作成されていない `index` ファイル、また、`objects` ディレクトリと `refs` ディレクトリ）は重要なエントリです。これらは、Git の中核（コア）の部分に相当します。`objects` ディレクトリはあなたのデータベースのすべてのコンテンツを保管します。`refs` ディレクトリは、そのデータ（ブランチ）内のコミットオブジェクトを指すポインターを保管します。`HEAD` ファイルは、現在チェックアウトしているブランチを指します。`index` ファイルは、Git がステージングエリアの情報を保管する場所を示します。これから各セクションで、Git がどのような仕組みで動くのかを詳細に見ていきます。
