//////////////////////////
=== Maintenance and Data Recovery
//////////////////////////
=== メンテナンスとデータリカバリ

//////////////////////////
Occasionally, you may have to do some cleanup – make a repository more compact, clean up an imported repository, or recover lost work.
This section will cover some of these scenarios.
//////////////////////////
たまには、ちょっとしたお掃除 – リポジトリを圧縮したり、インポートしたリポジトリをクリーンアップしたり、失われた成果物をもとに戻したり – が必要になるかもしれません。
このセクションではこれらのシナリオのいくつかについて取り上げます。

[[_git_gc]]
//////////////////////////
==== Maintenance
//////////////////////////
==== メンテナンス

//////////////////////////
Occasionally, Git automatically runs a command called ``auto gc''.
Most of the time, this command does nothing.
However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged `git gc` command.
The ``gc'' stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren't reachable from any commit and are a few months old.
//////////////////////////
Gitは時々 ``auto gc'' と呼ばれるコマンドを自動的に実行します。
大抵の場合、このコマンドは何もしません。
ですが、あまりに多くの緩いオブジェクト（packfileの中に入っていないオブジェクト）やpackfileがある場合は、Gitは完全な（full-fledged）`git gc` コマンドを起動します。
``gc'' はガベージコレクト（garbage collect）を意味します。このコマンドは幾つものことを行います。すべての緩いオブジェクトを集めてpackfileに入れ、複数のpackfileをひとつの大きなpackfileに統合し、さらにどのコミットからも到達が不可能かつ数ヶ月間更新がないオブジェクトを削除します。

//////////////////////////
You can run auto gc manually as follows:
//////////////////////////
次のように手動でauto gcを実行することもできます。

[source,console]
----
$ git gc --auto
----

//////////////////////////
Again, this generally does nothing.
You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.
You can modify these limits with the `gc.auto` and `gc.autopacklimit` config settings, respectively.
//////////////////////////
繰り返しますが、これは通常は何も行いません。
約7,000個もの緩いオブジェクトがあるか、または50以上のpackfileがある場合でないと、Gitは実際にgcコマンドを開始しません。
これらのリミットはそれぞれ設定ファイルの `gc.auto` と `gc.autopacklimit` で変更できます。

//////////////////////////
The other thing `gc` will do is pack up your references into a single file.
Suppose your repository contains the following branches and tags:
//////////////////////////
その他に `gc` が行うこととしては、複数の参照を1つのファイルにパックすることが挙げられます。
リポジトリに、次のようなブランチとタグが含まれているとしましょう。

[source,console]
----
$ find .git/refs -type f
.git/refs/heads/experiment
.git/refs/heads/master
.git/refs/tags/v1.0
.git/refs/tags/v1.1
----

//////////////////////////
If you run `git gc`, you'll no longer have these files in the `refs` directory.
Git will move them for the sake of efficiency into a file named `.git/packed-refs` that looks like this:
//////////////////////////
`git gc` を実行すると、これらのファイルは `refs` ディレクトリからなくなります。
効率化のため、Gitはそれらのファイルの内容を、以下のような `.git/packed-refs` という名前のファイルに移します。

[source,console]
----
$ cat .git/packed-refs
# pack-refs with: peeled fully-peeled
cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
^1a410efbd13591db07496601ebc7a059dd55cfe9
----

//////////////////////////
If you update a reference, Git doesn't edit this file but instead writes a new file to `refs/heads`.
To get the appropriate SHA-1 for a given reference, Git checks for that reference in the `refs` directory and then checks the `packed-refs` file as a fallback.
However, if you can't find a reference in the `refs` directory, it's probably in your `packed-refs` file.
//////////////////////////
参照を更新する場合は、Gitはこのファイルを編集せず、その代わりに `refs/heads` に新しいファイルを書き込みます。
与えられた参照に対する適切なSHA-1ハッシュを得るために、Gitは `refs` ディレクトリ内でその参照をチェックした上で、見つからなかった場合の代替として `packed-refs` ファイルをチェックします。
一方、 `refs` ディレクトリ内で参照が見つけられない場合は、それはおそらく `packed-refs` ファイル内にあります。

//////////////////////////
Notice the last line of the file, which begins with a `^`.
This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.
//////////////////////////
ファイルの最後の行に注意してください。 `^` という文字で始まっています。
これは、この行のすぐ上にあるタグは注釈付き版のタグであり、この行はそのタグが指しているコミットであるということを意味しています。

[[_data_recovery]]
//////////////////////////
==== Data Recovery
//////////////////////////
==== データリカバリ

//////////////////////////
At some point in your Git journey, you may accidentally lose a commit.
Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.
Assuming this happens, how can you get your commits back?
//////////////////////////
Git を使っていく過程のある時点で、誤ってコミットを失ってしまうことがあるかもしれません。
このようなことが起こるのは、一般的には、成果物が入っていたブランチを `force-delete` したけれど、その後結局そのブランチが必要になったときか、あるいはブランチを `hard-reset` したために、何か必要なものが入っているコミットがそのブランチから切り離されてしまったときです。
このようなことが起きたとして、どうやったらコミットを取り戻せるでしょうか？

//////////////////////////
Here's an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits.
First, let's review where your repository is at this point:
//////////////////////////
以下に示す例では、testリポジトリ内のmasterブランチを古いコミットにhard-resetして、それから失ったコミットを復元します。
まず、今の時点でリポジトリがどのような状況にあるのか調べてみましょう。

[source,console]
----
$ git log --pretty=oneline
ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
Now, move the `master` branch back to the middle commit:
//////////////////////////
ここで、`master` ブランチを真ん中のコミットの時点まで戻します。

[source,console]
----
$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
HEAD is now at 1a410ef third commit
$ git log --pretty=oneline
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
You've effectively lost the top two commits – you have no branch from which those commits are reachable.
You need to find the latest commit SHA-1 and then add a branch that points to it.
The trick is finding that latest commit SHA-1 – it's not like you've memorized it, right?
//////////////////////////
これで、一番上にあった2つのコミットは、事実上失われたことになります。これらのコミットに辿り着けるブランチがないためです。
そのため、最後のコミットのSHA-1ハッシュを調べた上で、そこを指すブランチを追加する必要があります。
ここでポイントとなるのは、最後のコミットのSHA-1ハッシュを見つける方法です。ハッシュ値を記憶してます、なんてことはないんでしたよね？

//////////////////////////
Often, the quickest way is to use a tool called `git reflog`.
As you're working, Git silently records what your HEAD is every time you change it.
Each time you commit or change branches, the reflog is updated.
The reflog is also updated by the `git update-ref` command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in <<_git_refs>>.
You can see where you've been at any time by running `git reflog`:
//////////////////////////
大抵の場合、最も手っ取り早いのは、`git reflog` というツールを使う方法です。
あなたが作業をしている間、HEADを変更する度に、Gitは裏でHEADがどこを指しているかを記録しています。
コミットをしたり、ブランチを変更したりする度に、reflogは更新されます。
reflogは `git update-ref` コマンドによっても更新されます。 <<_git_refs>> で取り上げましたが、これはrefファイルに SHA-1ハッシュ値を直に書くのではなくコマンドを使用する別の理由です。
`git reflog` を実行することで、ある時点で自分がどこにいたのかを知ることができます。

[source,console]
----
$ git reflog
1a410ef HEAD@{0}: reset: moving to 1a410ef
ab1afef HEAD@{1}: commit: modified repo.rb a bit
484a592 HEAD@{2}: commit: added repo.rb
----

//////////////////////////
Here we can see the two commits that we have had checked out, however there is not much information here.
To see the same information in a much more useful way, we can run `git log -g`, which will give you a normal log output for your reflog.
//////////////////////////
これで、以前チェックアウトした2つのコミットが分かりましたが、あまり多くの情報は表示されていません。
同じ情報をもっと有用な形式で表示するには `git log -g` を実行します。これはreflogを通常のログ出力と同じ形式で出力してくれます。

[source,console]
----
$ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:22:37 2009 -0700

		third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

       modified repo.rb a bit
----

//////////////////////////
It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.
For example, you can start a branch named `recover-branch` at that commit (ab1afef):
//////////////////////////
一番下にあるコミットが、失われたコミットのようです。そのコミットの所から新しいブランチを作成すれば、失ったコミットを取り戻せます。
例えば、そのコミット（ab1afef）を起点に `recover-branch` という名前のブランチを作成できます。

[source,console]
----
$ git branch recover-branch ab1afef
$ git log --pretty=oneline recover-branch
ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
Cool – now you have a branch named `recover-branch` that is where your `master` branch used to be, making the first two commits reachable again.
Next, suppose your loss was for some reason not in the reflog – you can simulate that by removing `recover-branch` and deleting the reflog.
Now the first two commits aren't reachable by anything:
//////////////////////////
素晴らしい – `master` ブランチがかつて存在した場所に、 `recover-branch` という名前のブランチが作られて、最初の2つのコミットは再び到達可能になりました。
さて次は、失われたコミットが何らかの理由でreflogの中にもなかった場合を考えましょう – `recover-branch` を取り除き、reflogを削除することによって、擬似的にその状況を作り出すことができます。
これで、最初の2つのコミットは、今どこからも到達不能になりました。

[source,console]
----
$ git branch -D recover-branch
$ rm -Rf .git/logs/
----

//////////////////////////
Because the reflog data is kept in the `.git/logs/` directory, you effectively have no reflog.
How can you recover that commit at this point?
One way is to use the `git fsck` utility, which checks your database for integrity.
If you run it with the `--full` option, it shows you all objects that aren't pointed to by another object:
//////////////////////////
reflogのデータは `.git/logs/` ディレクトリに保存されるため、これでreflogは事実上なくなりました。
この時点で、どうしたら失われたコミットを復元できるでしょうか?
ひとつの方法として、 `git fsck` ユーティリティーを使用してデータベースの完全性をチェックする方法があります。
`--full` オプションを付けて実行すると、他のどのオブジェクトからも指されていないオブジェクトをすべて表示します。

[source,console]
----
$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (18/18), done.
dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293
----

//////////////////////////
In this case, you can see your missing commit after the string ``dangling commit''.
You can recover it the same way, by adding a branch that points to that SHA-1.
//////////////////////////
このケースでは、 ``dangling commit'' という文字列の後に失われたコミットが表示されています。
前と同様にこのSHA-1ハッシュを指すブランチを作成すれば、失われたコミットを取り戻せます。

[[_removing_objects]]
//////////////////////////
==== Removing Objects
//////////////////////////
==== オブジェクトの削除

//////////////////////////
There are a lot of great things about Git, but one feature that can cause issues is the fact that a `git clone` downloads the entire history of the project, including every version of every file.
This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently.
However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit.
Because it's reachable from the history, it will always be there.
//////////////////////////
Gitには素晴らしい点がたくさんありますが、問題となり得る特徴がひとつあります。それは、 `git clone` がすべてのファイルのすべてのバージョンを含んだプロジェクトの歴史全体をダウンロードしてしまうということです。
保存されているのがソースコードだけなら、特に問題はありません。なぜなら、Gitはそのようなデータを効率良く圧縮することに高度に最適化されているからです。
しかし、もし誰かがある時点でプロジェクトの歴史に非常に大きなファイルを1つ加えると、以降のクローンではすべて、その大きなファイルのダウンロードを強いられることになります。これは、直後のコミットでそのファイルをプロジェクトから削除したとしても変わりません。
なぜなら、そのファイルは履歴から到達可能であり、常にそこに存在し続けるためです。

//////////////////////////
This can be a huge problem when you're converting Subversion or Perforce repositories into Git.
Because you don't download the whole history in those systems, this type of addition carries few consequences.
If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects.
//////////////////////////
SubversionやPerforceのリポジトリをGitに変換するときに、これは大きな問題になり得ます。
なぜなら、それらのシステムではすべての履歴をダウンロードする必要がないため、非常に大きなファイルを追加してもほとんど悪影響がないからです。
別のシステムからインポートを行った場合や、レポジトリがあるべき状態よりもずっと大きくなっている場合に、大きなオブジェクトを見つけて取り除く方法を以下に示します。

//////////////////////////
*Be warned: this technique is destructive to your commit history.*
It rewrites every commit object since the earliest tree you have to modify to remove a large file reference.
If you do this immediately after an import, before anyone has started to base work on the commit, you're fine – otherwise, you have to notify all contributors that they must rebase their work onto your new commits.
//////////////////////////
*注意: この操作はコミット履歴を破壊的に変更します。*
この操作では、大きなファイルへの参照を取り除くため、修正が必要な一番古いツリーから、以降すべてのコミットオブジェクトを再書き込みします。
インポートの直後、そのコミットをベースとして誰かが作業を始める前にこの操作を行った場合は問題ありません。そうでない場合は、作業中の内容を新しいコミットにリベースしなければならないことを、すべての関係者に知らせる必要があります。

//////////////////////////
To demonstrate, you'll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository.
First, add a large object to your history:
//////////////////////////
実演するために、あなたの `test` リポジトリに大きなファイルを追加して、次のコミットでそれを取り除き、それを見つけて、そしてレポジトリからそれを永久に取り除きます。まず、あなたの履歴に大きなオブジェクトを追加します。

[source,console]
----
$ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz
$ git add git.tgz
$ git commit -m 'add git tarball'
[master 7b30847] add git tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 git.tgz
----

//////////////////////////
Oops – you didn't want to add a huge tarball to your project.
Better get rid of it:
//////////////////////////
おっと、誤ってプロジェクトに非常に大きなtarボールを追加してしまいました。取り除いたほうがいいでしょう。

[source,console]
----
$ git rm git.tgz
rm 'git.tgz'
$ git commit -m 'oops - removed large tarball'
[master dadf725] oops - removed large tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 git.tgz
----

//////////////////////////
Now, `gc` your database and see how much space you're using:
//////////////////////////
ここで、データベースに対して `gc` を実行して、どれくらい多くのスペースを使用しているのかを見てみます。

[source,console]
----
$ git gc
Counting objects: 17, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (17/17), done.
Total 17 (delta 1), reused 10 (delta 0)
----

//////////////////////////
You can run the `count-objects` command to quickly see how much space you're using:
//////////////////////////
`count-objects` コマンドを実行してどれくらい多くのスペースを使用しているのかをすぐに見ることができます。

[source,console]
----
$ git count-objects -v
count: 7
size: 32
in-pack: 17
packs: 1
size-pack: 4868
prune-packable: 0
garbage: 0
size-garbage: 0
----

//////////////////////////
The `size-pack` entry is the size of your packfiles in kilobytes, so you're using almost 5MB.
Before the last commit, you were using closer to 2K – clearly, removing the file from the previous commit didn't remove it from your history.
Every time anyone clones this repository, they will have to clone all 5MB just to get this tiny project, because you accidentally added a big file.
Let's get rid of it.
//////////////////////////
`size-pack` エントリにはパックファイルのサイズがキロバイトで記されていて、5MB使用していることがわかります。
最後のコミットの前は、2KB近くを使用していました。明らかに前のコミットからファイルが取り除かれましたが、そのファイルは履歴からは取り除かれませんでした。このレポジトリを誰かがクローンする都度、彼らはこの小さなプロジェクトを取得するだけに 5MBすべてをクローンする必要があるでしょう。なぜならあなたは誤って大きなファイルを追加してしまったからです。それを取り除きましょう。

//////////////////////////
First you have to find it.
In this case, you already know what file it is.
But suppose you didn't; how would you identify what file or files were taking up so much space?
If you run `git gc`, all the objects are in a packfile; you can identify the big objects by running another plumbing command called `git verify-pack` and sorting on the third field in the output, which is file size.
You can also pipe it through the `tail` command because you're only interested in the last few largest files:
//////////////////////////
最初にあなたはそれを見つけなければなりません。このケースでは、あなたはそれが何のファイルかを既に知っています。しかし、もし知らなかったとします。その場合どうやってあなたは多くのスペースを占めているファイルを見分けるのでしょうか？ もし `git gc` を実行したとき、すべてのプロジェクトはパックファイルのなかにあります。大きなオブジェクトは別の配管コマンドを実行することで見分けることができます。それは `git verify-pack` と呼ばれ、ファイルサイズを意味する三つ目の出力フィールドに対して並び替えを行います。それを `tail` コマンドに通してパイプすることもできます。なぜなら最後の幾つかの大きなファイルのみが関心の対象となるからです。

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-29…69.idx \
  | sort -k 3 -n \
  | tail -3
dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 4977696
82c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438
----

//////////////////////////
The big object is at the bottom: 5MB.
To find out what file it is, you'll use the `rev-list` command, which you used briefly in <<_enforcing_commit_message_format>>.
If you pass `--objects` to `rev-list`, it lists all the commit SHA-1s and also the blob SHA-1s with the file paths associated with them.
You can use this to find your blob's name:
//////////////////////////
大きなオブジェクトは一番下の 5MBのものです。
それが何のファイルなのかを知るには <<_enforcing_commit_message_format>> で少し使用した `rev-list` コマンドを使用します。`--objects` を `rev-list` に渡すと、すべてのコミットの SHA-1ハッシュとブロブの SHA-1ハッシュをそれらに関連するファイルパスと一緒にリストします。ブロブの名前を見つけるためにこれを使うことができます。

[source,console]
----
$ git rev-list --objects --all | grep 82c99a3
82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz
----

//////////////////////////
Now, you need to remove this file from all trees in your past.
You can easily see what commits modified this file:
//////////////////////////
ここで、あなたは過去のすべてのツリーからこのファイルを取り除く必要があります。このファイルを変更したのは何のコミットなのか知ることは簡単です。

[source,console]
----
$ git log --oneline --branches -- git.tgz
dadf725 oops - removed large tarball
7b30847 add git tarball
----

//////////////////////////
You must rewrite all the commits downstream from `7b30847` to fully remove this file from your Git history.
To do so, you use `filter-branch`, which you used in <<_rewriting_history>>:
//////////////////////////
Git レポジトリから完全にこのファイルを取り除くためには、 `7b30847` から下流のすべてのコミットを書き直さなければなりません。そのためには、 <<_rewriting_history>> で使用した `filter-branch` を使用します。

[source,console]
----
$ git filter-branch --index-filter \
  'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^..
Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'
Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)
Ref 'refs/heads/master' was rewritten
----

//////////////////////////
The `--index-filter` option is similar to the `--tree-filter` option used in <<_rewriting_history>>, except that instead of passing a command that modifies files checked out on disk, you're modifying your staging area or index each time.
//////////////////////////
`--index-filter` オプションは、ディスク上のチェックアウトされたファイルを変更するコマンドを渡すのではなく、ステージングエリアまたはインデックスを毎度変更することを除けば、 <<_rewriting_history>> で使用した `--tree-filter` オプションに似ています。

//////////////////////////
Rather than remove a specific file with something like `rm file`, you have to remove it with `git rm --cached` – you must remove it from the index, not from disk.
The reason to do it this way is speed – because Git doesn't have to check out each revision to disk before running your filter, the process can be much, much faster.
You can accomplish the same task with `--tree-filter` if you want.
The `--ignore-unmatch` option to `git rm` tells it not to error out if the pattern you're trying to remove isn't there.
Finally, you ask `filter-branch` to rewrite your history only from the `7b30847` commit up, because you know that is where this problem started.
Otherwise, it will start from the beginning and will unnecessarily take longer.
//////////////////////////
特定のファイルに対して `rm file` を実行するように取り除くよりもむしろ、`git rm --cached` を実行して取り除かなければなりません。つまりディスクではなくインデックスからそれを取り除くのです。このようにする理由はスピードです。Git はあなたの除去作業の前にディスク上の各リビジョンをチェックアウトする必要がないので、プロセスをもっともっと速くすることができます。同様のタスクを `--tree-filter` を使用することで達成することができます。`git rm` に渡す `--ignore-unmatch` オプションは取り除こうとするパターンがそこにない場合にエラーを出力しないようにします。最後に、`filter-branch` に `7b30847` のコミットから後の履歴のみを再書き込みするように伝えます。なぜならこれが問題が生じた場所であることをあなたは知っているからです。さもなければ、最初から開始することになり不必要に長くかかるでしょう。

//////////////////////////
Your history no longer contains a reference to that file.
However, your reflog and a new set of refs that Git added when you did the `filter-branch` under `.git/refs/original` still do, so you have to remove them and then repack the database.
You need to get rid of anything that has a pointer to those old commits before you repack:
//////////////////////////
履歴にはもはやそのファイルへの参照が含まれなくなります。しかしあなたの reflog と `.git/refs/original` の下で `filter-branch` を行ったときに Git が追加した新しいセットの refs には、参照はまだ含まれているので、それらを取り除いてそしてデータベースを再パックしなければなりません。再パックの前にそれら古いコミットへのポインタを持ついかなるものを取り除く必要があります。

[source,console]
----
$ rm -Rf .git/refs/original
$ rm -Rf .git/logs/
$ git gc
Counting objects: 15, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (15/15), done.
Total 15 (delta 1), reused 12 (delta 0)
----

//////////////////////////
Let's see how much space you saved.
//////////////////////////
どれくらいのスペースが節約されたかを見てみましょう。

[source,console]
----
$ git count-objects -v
count: 11
size: 4904
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----

//////////////////////////
The packed repository size is down to 8K, which is much better than 5MB.
You can see from the size value that the big object is still in your loose objects, so it's not gone; but it won't be transferred on a push or subsequent clone, which is what is important.
If you really wanted to, you could remove the object completely by running `git prune` with the `--expire` option:
//////////////////////////
パックされたレポジトリのサイズは 8KBに下がりました。当初の 5MBよりもずっとよくなりました。サイズの値から大きなオブジェクトが未だ緩いオブジェクトの中にあることがわかります。そのため、それは無くなったわけではないのです。ですが、それはプッシュや後続するクローンで移送されることは決してありません。これは重要なことです。
本当にそれを望んでいたのなら、 `git prune` に `--expire`` オプションを指定することで、オブジェクトを完全に取り除くことができました。

[source,console]
----
$ git prune --expire now
$ git count-objects -v
count: 0
size: 0
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----
