[[_refspec]]
//////////////////////////
=== The Refspec
//////////////////////////
=== 参照仕様（Refspec）

//////////////////////////
Throughout this book, we've used simple mappings from remote branches to local references, but they can be more complex.
Suppose you add a remote like this:
//////////////////////////
本書の全体に渡って、リモートブランチからローカルの参照へのシンプルなマッピングを使用してきましたが、もっと複雑な場合もあります。以下のようにリモートを追加したとしましょう。

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

//////////////////////////
It adds a section to your `.git/config` file, specifying the name of the remote (`origin`), the URL of the remote repository, and the refspec for fetching:
//////////////////////////
`.git/config` ファイルにセクションを追加して、リモート（`origin`）の名前、リモートレポジトリのURL、そしてフェッチするための参照仕様（refspec）を指定します。

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

//////////////////////////
The format of the refspec is an optional `+`, followed by `<src>:<dst>`, where `<src>` is the pattern for references on the remote side and `<dst>` is where those references will be written locally.
The `+` tells Git to update the reference even if it isn't a fast-forward.
//////////////////////////
参照仕様はコロン（:）で分割した `<src>:<dst>` の形式で、オプションとして先頭に `+` を付けます。`<src>` はリモート側への参照に対するパターンで、`<dst>` はそれらの参照がローカル上で書かれる場所を示します。`+` の記号は Git にそれが早送り（fast-forward）でない場合でも参照を更新することを伝えます。

//////////////////////////
In the default case that is automatically written by a `git remote add` command, Git fetches all the references under `refs/heads/` on the server and writes them to `refs/remotes/origin/` locally.
So, if there is a `master` branch on the server, you can access the log of that branch locally via
//////////////////////////
デフォルトのケースでは `git remote add` コマンドを実行することで自動的に書かれます。このコマンドを実行すると、Git はサーバー上の `refs/heads/` 以下にあるすべての参照をフェッチして、ローカル上の `refs/remotes/origin/` にそれらを書きます。そのため、もしもサーバー上に `master` ブランチがあると、ローカルからそのブランチのログにアクセスすることができます。

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

//////////////////////////
They're all equivalent, because Git expands each of them to `refs/remotes/origin/master`.
//////////////////////////
これらはすべて同じ意味を持ちます。なぜなら、Git はそれら各々を `refs/remotes/origin/master` に拡張するからです。

//////////////////////////
If you want Git instead to pull down only the `master` branch each time, and not every other branch on the remote server, you can change the fetch line to
//////////////////////////
その代わりに、Git に毎回 `master` ブランチのみを引き出して、リモートサーバー上のそれ以外のすべてのブランチは引き出さないようにしたい場合は、フェッチラインを以下のように変更します。

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

//////////////////////////
This is just the default refspec for `git fetch` for that remote.
If you want to do something one time, you can specify the refspec on the command line, too.
To pull the `master` branch on the remote down to `origin/mymaster` locally, you can run
//////////////////////////
これはまさにリモートへの `git fetch` に対する参照仕様のデフォルトの振る舞いです。
もし何かを一度実行したければ、コマンドライン上の参照仕様を指定することもできます。
リモート上の `master` ブランチをプルして、ローカル上の `origin/mymaster` に落とすには、以下のように実行します。

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

//////////////////////////
You can also specify multiple refspecs.
On the command line, you can pull down several branches like so:
//////////////////////////
複数の参照仕様を指定することも可能です。コマンドライン上で、幾つかのブランチをこのように引き落とす（pull down）ことができます。

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

//////////////////////////
In this case, the  master branch pull was rejected because it wasn't a fast-forward reference.
You can override that by specifying the `+` in front of the refspec.
//////////////////////////
このケースでは、master ブランチのプルは早送りの参照ではなかったため拒否されました。`+` の記号を参照仕様の先頭に指定することで、それを上書きすることができます。

//////////////////////////
You can also specify multiple refspecs for fetching in your configuration file.
If you want to always fetch the master and experiment branches, add two lines:
//////////////////////////
さらに設定ファイルの中のフェッチ設定に複数の参照仕様を指定することができます。もし master と実験用のブランチを常にフェッチしたいならば、二行を追加します。

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

//////////////////////////
You can't use partial globs in the pattern, so this would be invalid:
//////////////////////////
グロブの一部をパターンに使用することはできません。これは無効となります。

[source]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

//////////////////////////
However, you can use namespaces (or directories) to accomplish something like that.
If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team's branches but nothing else, you can use a config section like this:
//////////////////////////
しかし、似たようなことを達成するのに名前空間（やディレクトリ）を使用することができます。もし一連のブランチをプッシュしてくれる QAチームがいて、master ブランチと QAチームのブランチのみを取得したいならば、設定ファイルのセクションを以下のように使用することができます。

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

//////////////////////////
If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.
//////////////////////////
QAチームと開発チームがローカルのブランチにプッシュして、結合チームがリモートのブランチ上でプッシュして、共同で開発するような、複雑なワークフローのプロセスであるならば、このように、名前空間によってそれらを簡単に分類することができます。

[[_pushing_refspecs]]
//////////////////////////
==== Pushing Refspecs
//////////////////////////
==== 参照仕様へのプッシュ

//////////////////////////
It's nice that you can fetch namespaced references that way, but how does the QA team get their branches into a `qa/` namespace in the first place?
You accomplish that by using refspecs to push.
//////////////////////////
その方法で名前空間で分類された参照をフェッチできることは素晴らしいことです。しかし、そもそもどうやって QAチームは、彼らのブランチを `qa/` という名前空間の中で取得できるのでしょうか?
参照仕様にプッシュすることによってそれが可能です。

//////////////////////////
If the QA team wants to push their `master` branch to `qa/master` on the remote server, they can run
//////////////////////////
QAチームが彼らの `master` ブランチをリモートサーバー上の `qa/master` にプッシュしたい場合、以下のように実行します。

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

//////////////////////////
If they want Git to do that automatically each time they run `git push origin`, they can add a `push` value to their config file:
//////////////////////////
もし彼らが `git push origin` を実行する都度、Git に自動的にそれを行なってほしいならば、設定ファイルに `push` の値を追加することで目的が達成されます。

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

//////////////////////////
Again, this will cause a `git push origin` to push the local `master` branch to the remote `qa/master` branch by default.
//////////////////////////
再度、これは `git push origin` の実行をローカルの `master` ブランチに、リモートの `qa/master` ブランチに、デフォルトで引き起こします。

//////////////////////////
==== Deleting References
//////////////////////////
==== 参照の削除

//////////////////////////
You can also use the refspec to delete references from the remote server by running something like this:
//////////////////////////
また、リモートサーバーから以下のように実行することによって、参照仕様を参照を削除する目的で使用することもできます。

[source,console]
----
$ git push origin :topic
----

//////////////////////////
Because the refspec is `<src>:<dst>`, by leaving off the `<src>` part, this basically says to make the topic branch on the remote nothing, which deletes it.
//////////////////////////
参照仕様は `<src>:<dst>` という形式であり、`<src>` の部分を取り除くことは、要するに何もないブランチをリモート上に作ることであり、それを削除することになるのです。

