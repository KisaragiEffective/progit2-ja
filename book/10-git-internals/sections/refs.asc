[[_git_refs]]
//////////////////////////
=== Git References
//////////////////////////
=== Gitの参照

//////////////////////////
You can run something like `git log 1a410e` to look through your whole history, but you still have to remember that `1a410e` is the last commit in order to walk that history to find all those objects.
You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value.
//////////////////////////
`git log 1a410e` のように実行すれば、すべての歴史に目を通すことができます。しかし、歴史を辿ってすべてのオブジェクトを探しだすには、 `1a410e` が最後のコミットであることを覚えていなければならないのは変わりません。
SHA-1ハッシュ値をシンプルな名前で保存できれば、生のSHA-1ハッシュ値ではなく、その名前をポインタとして使用できます。

//////////////////////////
In Git, these are called ``references'' or ``refs''; you can find the files that contain the SHA-1 values in the `.git/refs` directory.
In the current project, this directory contains no files, but it does contain a simple structure:
//////////////////////////
Gitでは、これは ``参照'' ないしは ``refs'' と呼ばれます。 `.git/refs` ディレクトリを見ると、SHA-1ハッシュ値を含むファイルがあることが分かります。
現在のプロジェクトでは、このディレクトリにファイルはありませんが、シンプルな構成のディレクトリがあります。

[source,console]
----
$ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
$ find .git/refs -type f
----

//////////////////////////
To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this:
//////////////////////////
参照を新しく作成して、最後のコミットがどこかを覚えやすくします。技術的には、以下のように簡単に行えます。

[source,console]
----
$ echo "1a410efbd13591db07496601ebc7a059dd55cfe9" > .git/refs/heads/master
----

//////////////////////////
Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands:
//////////////////////////
これで、Gitコマンドで、SHA-1ハッシュ値の代わりに、たった今作成したhead参照を使えるようになりました。

[source,console]
----
$ git log --pretty=oneline master
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
You aren't encouraged to directly edit the reference files.
Git provides a safer command to do this if you want to update a reference called `update-ref`:
//////////////////////////
参照ファイルを直接変更するのは推奨されません。
参照を更新したければ、Gitは更新を行うためのより安全なコマンド `update-ref` を提供しています。

[source,console]
----
$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9
----

//////////////////////////
That's basically what a branch in Git is: a simple pointer or reference to the head of a line of work.
To create a branch back at the second commit, you can do this:
//////////////////////////
これは、Gitにおいて、基本的にブランチとは一連の作業の先頭を指す単純なポインタや参照であるということを表しています。
2つ目のコミットに戻るブランチを作るには、次のようにします。

[source,console]
----
$ git update-ref refs/heads/test cac0ca
----

//////////////////////////
Your branch will contain only work from that commit down:
//////////////////////////
作成したブランチは、そのコミット以前の作業のみを含むことになります。

[source,console]
----
$ git log --pretty=oneline test
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

//////////////////////////
Now, your Git database conceptually looks something like this:
//////////////////////////
この時点で、Gitのデータベースは概念的には以下の図のように見えます。

//////////////////////////
.Git directory objects with branch head references included.
image::images/data-model-4.png[Git directory objects with branch head references included.]
//////////////////////////
.ブランチの先頭への参照を含むGitディレクトリオブジェクト
image::images/data-model-4.png[ブランチのヘッドへの参照を含むGitディレクトリオブジェクト]

//////////////////////////
When you run commands like `git branch (branchname)`, Git basically runs that `update-ref` command to add the SHA-1 of the last commit of the branch you're on into whatever new reference you want to create.
//////////////////////////
`git branch (ブランチ名)` のようにコマンドを実行すると、あなたが作りたいと思っている新しい参照は何であれ、基本的にGitは `update-ref` コマンドを実行して、いま自分がいるブランチ上の最後のコミットのSHA-1ハッシュを参照に追加します。

[[_the_head]]
//////////////////////////
==== The HEAD
//////////////////////////
==== HEAD

//////////////////////////
The question now is, when you run `git branch (branchname)`, how does Git know the SHA-1 of the last commit?
The answer is the HEAD file.
//////////////////////////
では、`git branch (ブランチ名)` を実行したときに、Gitはどうやって最後のコミットのSHA-1ハッシュを知るのでしょうか？
答えは、HEADファイルです。

//////////////////////////
The HEAD file is a symbolic reference to the branch you're currently on.
By symbolic reference, we mean that unlike a normal reference, it doesn’t generally contain a SHA-1 value but rather a pointer to another reference.
If you look at the file, you'll normally see something like this:
//////////////////////////
HEADファイルは、現在作業中のブランチに対するシンボリック参照です。
通常の参照と区別する意図でシンボリック参照と呼びますが、これには、一般的にSHA-1ハッシュ値ではなく他の参照へのポインタが格納されています。
ファイルの中身を見ると、通常は以下のようになっています。

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/master
----

//////////////////////////
If you run `git checkout test`, Git updates the file to look like this:
//////////////////////////
`git checkout test` を実行すると、Git はこのようにファイルを更新します。

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/test
----

//////////////////////////
When you run `git commit`, it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to.
//////////////////////////
`git commit` を実行するとコミットオブジェクトが作られますが、そのときコミットオブジェクトの親として、HEADが指し示す参照先のSHA-1ハッシュ値が指定されます。

//////////////////////////
You can also manually edit this file, but again a safer command exists to do so: `symbolic-ref`.
You can read the value of your HEAD via this command:
//////////////////////////
このファイルを直に編集することもできますが、`symbolic-ref` と呼ばれる、それを安全に行うためのコマンドが存在します。このコマンドを使ってHEADの値を読み取ることができます。

[source,console]
----
$ git symbolic-ref HEAD
refs/heads/master
----

//////////////////////////
You can also set the value of HEAD:
//////////////////////////
HEADの値を設定することもできます。

[source,console]
----
$ git symbolic-ref HEAD refs/heads/test
$ cat .git/HEAD
ref: refs/heads/test
----

//////////////////////////
You can't set a symbolic reference outside of the refs style:
//////////////////////////
`refs` の形式以外では、シンボリック参照を設定することはできません。

[source,console]
----
$ git symbolic-ref HEAD test
fatal: Refusing to point HEAD outside of refs/
----

//////////////////////////
==== Tags
//////////////////////////
==== タグ

//////////////////////////
We just finished discussing Git's three main object types, but there is a fourth.
The tag object is very much like a commit object – it contains a tagger, a date, a message, and a pointer.
The main difference is that a tag object generally points to a commit rather than a tree.
It's like a branch reference, but it never moves – it always points to the same commit but gives it a friendlier name.
//////////////////////////
これで Git の主要な三つのオブジェクトを見終わったわけですが、タグという四つ目のオブジェクトがあります。タグオブジェクトはコミットオブジェクトにとても似ています。それには、タグ作成者、日付、メッセージ、そしてポインタが含まれます。主な違いは、タグオブジェクトは通常ツリーではなくコミットを指し示すことです。タグオブジェクトはブランチの参照に似ていますが、決して変動しません。そのため常に同じコミットを示しますが、より親しみのある名前が与えられます。

//////////////////////////
As discussed in <<_git_basics_chapter>>, there are two types of tags: annotated and lightweight.
You can make a lightweight tag by running something like this:
//////////////////////////
<<_git_basics_chapter>> で述べましたが、タグには二つのタイプがあります。軽量 (lightweight) 版と注釈付き (annotated) 版です。あなたは、次のように実行して軽量 (lightweight) 版のタグを作ることができます。

[source,console]
----
$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d
----

//////////////////////////
That is all a lightweight tag is – a reference that never moves.
An annotated tag is more complex, however.
If you create an annotated tag, Git creates a tag object and then writes a reference to point to it rather than directly to the commit.
You can see this by creating an annotated tag (`-a` specifies that it's an annotated tag):
//////////////////////////
これが軽量版のタグのすべてです。つまり決して変動しない参照なのです。一方、注釈付き版のタグはもっと複雑です。注釈付き版のタグを作ろうとすると、Git はタグオブジェクトを作り、そして、コミットに対する直接的な参照ではなく、そのタグをポイントする参照を書き込みます。注釈付き版のタグを作ることで、これを見ることができます。（注釈付き版のタグを作るには `-a` オプションを指定して実行します）

[source,console]
----
$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag'
----

//////////////////////////
Here's the object SHA-1 value it created:
//////////////////////////
これで、作られたオブジェクトの SHA-1ハッシュ値を見ることができます。

[source,console]
----
$ cat .git/refs/tags/v1.1
9585191f37f7b0fb9444f35a9bf50de191beadc2
----

//////////////////////////
Now, run the `cat-file` command on that SHA-1 value:
//////////////////////////
ここで、そのSHA-1ハッシュ値に対して `cat-file` コマンドを実行します。

[source,console]
----
$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
object 1a410efbd13591db07496601ebc7a059dd55cfe9
type commit
tag v1.1
tagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700

test tag
----

//////////////////////////
Notice that the object entry points to the commit SHA-1 value that you tagged.
Also notice that it doesn't need to point to a commit; you can tag any Git object.
In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.
You can view the public key by running this in a clone of the Git repository:
//////////////////////////
`object` の項目が、あなたがタグ付けしたコミットのSHA-1ハッシュ値をポイントしていることに注意してください。また、この項目が必ずしもコミットだけをポイントするものではないことも覚えておいてください。あらゆる Git オブジェクトに対してタグを付けることができます。例えば Git のソースコードリポジトリでは、メンテナが自分の GPG 公開鍵をブロブオブジェクトとして追加し、そのオブジェクトにタグを付けています。Git リポジトリのクローン上で、以下のコマンドを実行すると公開鍵を閲覧することができます。

[source,console]
----
$ git cat-file blob junio-gpg-pub
----

//////////////////////////
The Linux kernel repository also has a non-commit-pointing tag object – the first tag created points to the initial tree of the import of the source code.
//////////////////////////
Linux カーネルのリポジトリもまた、`object` 項目でコミット以外をポイントしているタグオブジェクトを持っています。これは最初のタグオブジェクトであり、最初にソースコードをインポートしたときの初期ツリーオブジェクトをポイントしています。

//////////////////////////
==== Remotes
//////////////////////////
==== リモート

//////////////////////////
The third type of reference that you'll see is a remote reference.
If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the `refs/remotes` directory.
For instance, you can add a remote called `origin` and push your `master` branch to it:
//////////////////////////
これから見ていく三つ目の参照のタイプはリモート参照です。リモートを追加してそれにプッシュを実行すると、Git は追加したリモートにあなたが最後にプッシュした値を格納します。そのリモートは `refs/remotes` ディレクトリにある各ブランチを参照します。例えば、`origin` と呼ばれるリモートを追加して、それを `master` ブランチにプッシュすることができます。

[source,console]
----
$ git remote add origin git@github.com:schacon/simplegit-progit.git
$ git push origin master
Counting objects: 11, done.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 716 bytes, done.
Total 7 (delta 2), reused 4 (delta 1)
To git@github.com:schacon/simplegit-progit.git
  a11bef0..ca82a6d  master -> master
----

//////////////////////////
Then, you can see what the `master` branch on the `origin` remote was the last time you communicated with the server, by checking the `refs/remotes/origin/master` file:
//////////////////////////
そして、`origin` リモートに対してどの `master` ブランチが最後にサーバーと通信したのかを、`refs/remotes/origin/master` ファイルをチェックすることで知ることができます。

[source,console]
----
$ cat .git/refs/remotes/origin/master
ca82a6dff817ec66f44342007202690a93763949
----

//////////////////////////
Remote references differ from branches (`refs/heads` references) mainly in that they're considered read-only.
You can `git checkout` to one, but Git won't point HEAD at one, so you'll never update it with a `commit` command.
Git manages them as bookmarks to the last known state of where those branches were on those servers.
//////////////////////////
リモート参照は、特に読み取り専用とみなされる点において、ブランチ（`refs/heads` への参照）とは異なります。リモート参照に対して `git checkout` を行うことはできますが、Git はHEADの参照先をそのリモートにすることはなく、したがって `commit` コマンドでリモートを更新することもできません。Git はリモート参照を一種のブックマークとして管理します。つまり、最後に通信したとき、向こうのサーバー上でリモートブランチが置かれていた状態を指し示すブックマークということです。
