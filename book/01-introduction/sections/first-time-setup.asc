//////////////////////////
[[_first_time]]
=== First-Time Git Setup
//////////////////////////

[translation here]

//////////////////////////
Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they'll stick around between upgrades.
You can also change them at any time by running through the commands again.
//////////////////////////

[translation here]

//////////////////////////
Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places:
//////////////////////////

[translation here]

//////////////////////////
1. `/etc/gitconfig` file: Contains values for every user on the system and all their repositories.
  If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
2. `~/.gitconfig` or `~/.config/git/config` file: Specific to your user.
  You can make Git read and write to this file specifically by passing the `--global` option.
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
//////////////////////////

[translation here]

//////////////////////////
Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.
//////////////////////////

[translation here]

//////////////////////////
On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
//////////////////////////

[translation here]

//////////////////////////
==== Your Identity
//////////////////////////

[translation here]

//////////////////////////
The first thing you should do when you install Git is to set your user name and e-mail address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:
//////////////////////////

[translation here]

//////////////////////////
[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----
//////////////////////////

[translation here]

//////////////////////////
Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or e-mail address for specific projects, you can run the command without the `--global` option when you're in that project.
//////////////////////////

[translation here]

//////////////////////////
Many of the GUI tools will help you do this when you first run them.
//////////////////////////

[translation here]

//////////////////////////
==== Your Editor
//////////////////////////

[translation here]

//////////////////////////
Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor, which is generally Vim.
If you want to use a different text editor, such as Emacs, you can do the following:
//////////////////////////

[translation here]

//////////////////////////
[source,console]
----
$ git config --global core.editor emacs
----
//////////////////////////

[translation here]

//////////////////////////
[WARNING]
====
Vim and Emacs are popular text editors often used by developers on Unix based systems like Linux and Mac. If you are not familiar with either of these editors or are on a Windows system, you may need to search for instructions for how to set up your favorite editor with Git.
If you don't set an editor like this and you don't know what Vim or Emacs are, you will likely get into a really confusing state when they are launched.
====
//////////////////////////

[translation here]

//////////////////////////
==== Checking Your Settings
//////////////////////////

[translation here]

//////////////////////////
If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:
//////////////////////////

[translation here]

//////////////////////////
[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----
//////////////////////////

[translation here]

//////////////////////////
You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.
//////////////////////////

[translation here]

//////////////////////////
You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))
//////////////////////////

[translation here]

//////////////////////////
[source,console]
----
$ git config user.name
John Doe
----
//////////////////////////