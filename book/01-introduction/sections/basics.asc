//////////////////////////
=== Git Basics
//////////////////////////
=== Gitの基本

//////////////////////////
So, what is Git in a nutshell?
This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.
As you learn Git, try to clear your mind of the things you may know about other VCSs, such as Subversion and Perforce; doing so will help you avoid subtle confusion when using the tool.
Git stores and thinks about information much differently than these other systems, even though the user interface is fairly similar, and understanding those differences will help prevent you from becoming confused while using it.(((Subversion)))(((Perforce)))
//////////////////////////
では、要するにGitとは何なのでしょうか。
これは、Gitを吸収するには重要な節です。なぜならば、もしGitが何かを理解し、Gitがどうやって稼動しているかの根本を理解できれば、Gitを効果的に使う事が恐らくとても容易になるからです。
Gitを学ぶときは、SubversionやPerforceのような他のVCSに関してあなたが恐らく知っていることは、意識しないでください。このツールを使うときに、ちょっとした混乱を回避することに役立ちます。
ユーザー・インターフェイスがよく似ているにも関わらず、Gitの情報の格納の仕方や情報についての考え方は、それら他のシステムとは大きく異なっています。これらの相違を理解する事は、Gitを扱っている間の混乱を、防いでくれるでしょう。(((Subversion)))(((Perforce)))

//////////////////////////
==== Snapshots, Not Differences
//////////////////////////
==== スナップショットで、差分ではない

//////////////////////////
The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
Conceptually, most other systems store information as a list of file-based changes.
These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.
//////////////////////////
Gitと他のVCS (Subversionとその類を含む)の主要な相違は、Gitのデータについての考え方です。
概念的には、他のシステムのほとんどは、情報をファイルを基本とした変更のリストとして格納します。
これらのシステム（CVS、Subversion、Perforce、Bazaar等々）は、図1-4に描かれているように、システムが保持しているファイルの集合と、時間を通じてそれぞれのファイルに加えられた変更の情報を考えます。

//////////////////////////
.Storing data as changes to a base version of each file.
image::images/deltas.png[Storing data as changes to a base version of each file.]
//////////////////////////
.他のシステムは、データをそれぞれのファイルの基本バージョンへの変更として格納する傾向があります。
image::images/deltas.png[他のシステムは、データをそれぞれのファイルの基本バージョンへの変更として格納する傾向があります。]

//////////////////////////
Git doesn't think of or store its data this way.
Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem.
Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored.
Git thinks about its data more like a *stream of snapshots*.
//////////////////////////
Gitは、この方法ではデータを考えたり、格納しません。
代わりに、Gitはデータをミニ・ファイルシステムのスナップショットの集合のように考えます。
Gitで全てのコミット（訳注：commitとは変更を記録・保存するGitの操作。詳細は後の章を参照）をするとき、もしくはプロジェクトの状態を保存するとき、Gitは基本的に、その時の全てのファイルの状態のスナップショットを撮り（訳者注：意訳）、そのスナップショットへの参照を格納するのです。
効率化のため、ファイルに変更が無い場合は、Gitはファイルを再格納せず、既に格納してある、以前の同一のファイルへのリンクを格納します。
Gitは、むしろデータを*一連のスナップショット*のように考えます。

//////////////////////////
.Storing data as snapshots of the project over time.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]
//////////////////////////
.Gitは時間を通じたプロジェクトのスナップショットとしてデータを格納します。
image::images/snapshots.png[Gitは時間を通じたプロジェクトのスナップショットとしてデータを格納します。]

//////////////////////////
This is an important distinction between Git and nearly all other VCSs.
It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.
This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.
We'll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <<_git_branching>>.
//////////////////////////
これが、Gitと類似の全ての他のVCSとの間の重要な違いです。
ほとんどの他のシステムが以前の世代から真似してきた、ほとんど全てのバージョン管理のやり方（訳者注：aspectを意訳）を、Gitに見直させます。
これは、Gitを、単純にVCSと言うより、その上に組み込まれた幾つかの途方も無くパワフルなツールを備えたミニ・ファイルシステムにしています。
このやり方でデータを考えることで得られる利益の幾つかを、<<_git_branching>>を扱ったときに探求します。

//////////////////////////
==== Nearly Every Operation Is Local
//////////////////////////
==== ほとんど全ての操作がローカル

//////////////////////////
Most operations in Git only need local files and resources to operate – generally no information is needed from another computer on your network.
If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.
//////////////////////////
Gitのほとんどの操作は、ローカル・ファイルと操作する資源だけ必要とします。大体はネットワークの他のコンピューターからの情報は必要ではありません。
ほとんどの操作がネットワーク遅延損失を伴うCVCSに慣れているのであれば、もっさりとしたCVCSに慣れているのであれば、このGitの速度は神業のように感じるでしょう（訳者注：直訳は「このGitの側面はスピードの神様がこの世のものとは思えない力でGitを祝福したと考えさせるでしょう」）。
プロジェクトの履歴は丸ごとすぐそこのローカル・ディスクに保持しているので、大概の操作はほぼ瞬時のように見えます。

//////////////////////////
For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you – it simply reads it directly from your local database.
This means you see the project history almost instantly.
If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.
//////////////////////////
例えば、プロジェクトの履歴を閲覧するために、Gitはサーバーに履歴を取得しに行って表示する必要がありません。直接にローカル・データベースからそれを読むだけです。
これは、プロジェクトの履歴をほとんど即座に知るということです。
もし、あるファイルの現在のバージョンと、そのファイルの1ヶ月前の間に導入された変更点を知りたいのであれば、Gitは、遠隔のサーバーに差分を計算するように問い合わせたり、ローカルで差分を計算するために遠隔サーバーからファイルの古いバージョンを持ってくる代わりに、1か月前のファイルを調べてローカルで差分の計算を行なえます。

//////////////////////////
This also means that there is very little you can't do if you're offline or off VPN.
If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload.
If you go home and can't get your VPN client working properly, you can still work.
In many other systems, doing so is either impossible or painful.
In Perforce, for example, you can't do much when you aren't connected to the server; and in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
This may not seem like a huge deal, but you may be surprised what a big difference it can make.
//////////////////////////
これはまた、オフラインであるか、VPNから切り離されていたとしても、出来ない事は非常に少ないことを意味します。
もし、飛行機もしくは列車に乗ってちょっとした仕事をしたいとしても、アップロードするためにネットワーク接続し始めるまで、楽しくコミットできます。
もし、帰宅してVPNクライアントを適切に作動させられないとしても、さらに作業ができます。
多くの他のシステムでは、それらを行なう事は、不可能であるか苦痛です。
例えばPerforceにおいては、サーバーに接続できないときは、多くの事が行なえません。SubversionとCVSにおいては、ファイルの編集はできますが、データベースに変更をコミットできません（なぜならば、データベースがオフラインだからです）。
このことは巨大な問題に思えないでしょうが、実に大きな違いを生じうることに驚くでしょう。

//////////////////////////
==== Git Has Integrity
//////////////////////////
==== Gitは完全性を持つ

//////////////////////////
Everything in Git is check-summed before it is stored and is then referred to by that checksum.
This means it's impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy.
You can't lose information in transit or get file corruption without Git being able to detect it.
//////////////////////////
Gitの全てのものは、格納される前にチェックサムが取られ、その後、そのチェックサムで照合されます。
これは、Gitがそれに関して感知することなしに、あらゆるファイルの内容を変更することが不可能であることを意味します。
この機能は、Gitの最下層に組み込まれ、またGitの哲学に不可欠です。
Gitがそれを感知できない状態で、転送中に情報を失う、もしくは壊れたファイルを取得することはありません。

//////////////////////////
The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
A SHA-1 hash looks something like this:
//////////////////////////
Gitがチェックサム生成に用いる機構は、SHA-1ハッシュと呼ばれます。(((SHA-1)))
これは、16進数の文字（0-9とa-f）で構成された40文字の文字列で、ファイルの内容もしくはGit内のディレクトリ構造を元に計算されます。
SHA-1ハッシュは、このようなもののように見えます:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

//////////////////////////
You will see these hash values all over the place in Git because it uses them so much.
In fact, Git stores everything in its database not by file name but by the hash value of its contents.
//////////////////////////
Gitはハッシュ値を大変よく利用するので、Gitのいたるところで、これらのハッシュ値を見ることでしょう。
事実、Gitはファイル名ではなく、ファイル内容のハッシュ値によってGitデータベースの中に全てを格納しています。

//////////////////////////
==== Git Generally Only Adds Data
//////////////////////////
==== Gitは通常はデータを追加するだけ

//////////////////////////
When you do actions in Git, nearly all of them only add data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As in any VCS, you can lose or mess up changes you haven't committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.
//////////////////////////
Gitで行動するとき、ほとんど全てはGitデータベースにデータを追加するだけです。
システムにいかなる方法でも、UNDO不可能なこと、もしくはデータを消させることをさせるのは困難です。
あらゆるVCSと同様に、まだコミットしていない変更は失ったり、台無しにできたりします。しかし、スナップショットをGitにコミットした後は、特にもし定期的にデータベースを他のリポジトリにプッシュ（訳注：pushはGitで管理するあるリポジトリのデータを、他のリポジトリに転送する操作。詳細は後の章を参照）していれば、変更を失うことは大変難しくなります。

//////////////////////////
This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<_undoing>>.
//////////////////////////
激しく物事をもみくちゃにする危険なしに試行錯誤を行なえるため、これはGitの利用を喜びに変えます。Gitがデータをどのように格納しているのかと失われたように思えるデータをどうやって回復できるのかについての、より詳細な解説に関しては、<<_undoing>>を参照してください。

//////////////////////////
==== The Three States
//////////////////////////
==== 三つの状態

//////////////////////////
Now, pay attention.
This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: committed, modified, and staged.
Committed means that the data is safely stored in your local database.
Modified means that you have changed the file but have not committed it to your database yet.
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
//////////////////////////
今、注意してください。
もし学習プロセスの残りをスムーズに進めたいのであれば、これはGitに関して覚えておく主要な事です。
Gitは、ファイルが帰属する、コミット済、修正済、ステージ済の、三つの主要な状態を持ちます。
コミット済は、ローカル・データベースにデータが安全に格納されていることを意味します。
修正済は、ファイルに変更を加えていますが、データベースにそれがまだコミットされていないことを意味します。
ステージ済は、次のスナップショットのコミットに加えるために、現在のバージョンの修正されたファイルに印をつけている状態を意味します。

//////////////////////////
This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.
//////////////////////////
このことは、Gitプロジェクト（訳者注：ディレクトリ内）の、Gitディレクトリ、作業ディレクトリ、ステージング・エリアの三つの主要な部分（訳者注：の理解）に導きます。

//////////////////////////
.Working directory, staging area, and Git directory.
image::images/areas.png["Working directory, staging area, and Git directory."]
//////////////////////////
.作業ディレクトリ、ステージング・エリア、Gitディレクトリ
image::images/areas.png[作業ディレクトリ、ステージング・エリア、Gitディレクトリ]

//////////////////////////
The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you clone a repository from another computer.
//////////////////////////
Gitディレクトリは、プロジェクトのためのメタデータ（訳者注：Gitが管理するファイルやディレクトリなどのオブジェクトの要約）とオブジェクトのデータベースがあるところです。
これは、Gitの最も重要な部分で、他のコンピューターからリポジトリをクローン（訳者注：コピー元の情報を記録した状態で、Gitリポジトリをコピーすること）したときに、コピーされるものです。

//////////////////////////
The working directory is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
//////////////////////////
作業ディレクトリは、プロジェクトの一つのバージョンの単一チェックアウトです。
これらのファイルはGitディレクトリの圧縮されたデータベースから引き出されて、利用するか修正するためにディスクに配置されます。

//////////////////////////
The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
It's sometimes referred to as the ``index'', but it's also common to refer to it as the staging area.
//////////////////////////
ステージング・エリアは、普通はGitディレクトリに含まれる、次のコミットに何が含まれるかに関しての情報を蓄えた一つのファイルです。
「インデックス」と呼ばれることもありますが、ステージング・エリアと呼ばれることも多いです。

//////////////////////////
The basic Git workflow goes something like this:
//////////////////////////
基本的なGitのワークフローは、このような風に進みます：

//////////////////////////
1. You modify files in your working directory.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.
//////////////////////////
1. 作業ディレクトリのファイルを修正します。
2. 修正されたファイルのスナップショットをステージング・エリアに追加して、ファイルをステージします。
3. コミットします。（訳者注：Gitでは）これは、ステージング・エリアにあるファイルを取得し、永久不変に保持するスナップショットとしてGitディレクトリに格納することです。

//////////////////////////
If a particular version of a file is in the Git directory, it's considered committed.
If it has been modified and was added to the staging area, it is staged.
And if it was changed since it was checked out but has not been staged, it is modified.
In <<_git_basics_chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
//////////////////////////
もしファイルの特定のバージョンがGitディレクトリの中にあるとしたら、コミット済だと見なされます。
もし修正されていて、ステージング・エリアに加えられていれば、ステージ済です。
そして、チェックアウトされてから変更されましたが、ステージされていないとするなら、修正済です。
<<_git_basics_chapter>>では、これらの状態と、どうやってこれらを利用をするか、もしくは完全にステージ化部分を省略するかに関してより詳しく学習します。
