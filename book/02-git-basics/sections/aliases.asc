[[_git_aliases]]
//////////////////////////
=== Git Aliases
//////////////////////////
=== Git エイリアス

(((aliases)))
//////////////////////////
Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.
We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.
//////////////////////////
この章で進めてきたGitの基本に関する説明を終える前に、ひとつヒントを教えましょう。Gitの使い勝手をシンプルに、簡単に、わかりやすくしてくれる、エイリアスです。

//////////////////////////
Git doesn't automatically infer your command if you type it in partially.
If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
Here are a couple of examples you may want to set up:
//////////////////////////
Git は、コマンドの一部だけが入力された状態でそのコマンドを自動的に推測することはありません。
Git の各コマンドをいちいち全部入力するのがいやなら、 `git config` でコマンドのエイリアスを設定することができます。(((git commands, config)))
たとえばこんなふうに設定すると便利かもしれません。

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

//////////////////////////
This means that, for example, instead of typing `git commit`, you just need to type `git ci`.
As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.
//////////////////////////
こうすると、たとえば `git commit` と同じことが単に `git ci` と入力するだけでできるようになります。
Git を使い続けるにつれて、よく使うコマンドがさらに増えてくることでしょう。
そんな場合は、きにせずどんどん新しいエイリアスを作りましょう。

//////////////////////////
This technique can also be very useful in creating commands that you think should exist.
For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:
//////////////////////////
このテクニックは、「こんなことできたらいいな」というコマンドを作る際にも便利です。
たとえば、ステージを解除するときにどうしたらいいかいつも迷うという人なら、
こんなふうに自分で unstage エイリアスを追加してしまえばいいのです。

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

//////////////////////////
This makes the following two commands equivalent:
//////////////////////////
こうすれば、次のふたつのコマンドが同じ意味となります。

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

//////////////////////////
This seems a bit clearer.
It's also common to add a `last` command, like this:
//////////////////////////
少しはわかりやすくなりましたね。あるいは、こんなふうに `last` コマンドを追加することもできます。

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

//////////////////////////
This way, you can see the last commit easily:
//////////////////////////
こうすれば、直近のコミットの情報を見ることができます。

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

//////////////////////////
As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a `!` character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing `git visual` to run `gitk`:
//////////////////////////
Git が単に新しいコマンドをエイリアスで置き換えていることがわかります。
しかし、時には Git のサブコマンドではなく外部コマンドを実行したくなることもあるでしょう。
そんな場合は、コマンドの先頭に `!` をつけます。
これは、Git リポジトリ上で動作する自作のツールを書くときに便利です。
例として、`git visual` で `gitk` が起動するようにしてみましょう。

[source,console]
----
$ git config --global alias.visual '!gitk'
----
