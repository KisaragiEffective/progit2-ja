[[_git_tagging]]
//////////////////////////
=== Tagging
//////////////////////////
=== タグ

(((tags)))
//////////////////////////
Like most VCSs, Git has the ability to tag specific points in history as being important.
Typically people use this functionality to mark release points (v1.0, and so on).
In this section, you'll learn how to list the available tags, how to create new tags, and what the different types of tags are.
//////////////////////////
多くの VCS と同様に Git にもタグ機能があり、歴史上の重要なポイントに印をつけることができます。よくあるのは、この機能を (v 1.0など) リリースポイントとして使うことです。このセクションでは、既存のタグ一覧の取得や新しいタグの作成、さまざまなタグの形式などについて扱います。

//////////////////////////
==== Listing Your Tags
//////////////////////////
==== タグの一覧表示

//////////////////////////
Listing the available tags in Git is straightforward.
Just type `git tag`:(((git commands, tag)))
//////////////////////////
Git で既存のタグの一覧を表示するのは簡単で、
単に `git tag` と打ち込むだけです。(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

//////////////////////////
This command lists the tags in alphabetical order; the order in which they appear has no real importance.
//////////////////////////
このコマンドは、タグをアルファベット順に表示します。この表示順に深い意味はありません。

//////////////////////////
You can also search for tags with a particular pattern.
The Git source repo, for instance, contains more than 500 tags.
If you're only interested in looking at the 1.8.5 series, you can run this:
//////////////////////////
パターンを指定してタグを検索することもできます。Git のソースリポジトリを例にとると、500以上のタグが登録されています。その中で 1.8.5 系のタグのみを見たい場合は、このようにします。

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

//////////////////////////
==== Creating Tags
//////////////////////////
==== タグの作成

//////////////////////////
Git uses two main types of tags: lightweight and annotated.
//////////////////////////
Git のタグには、軽量 (lightweight) 版と注釈付き (annotated) 版の二通りがあります。

//////////////////////////
A lightweight tag is very much like a branch that doesn't change – it's just a pointer to a specific commit.
//////////////////////////
軽量版のタグは、変更のないブランチのようなものです。特定のコミットに対する単なるポインタでしかありません。

//////////////////////////
Annotated tags, however, are stored as full objects in the Git database.
They're checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.
//////////////////////////
しかし注釈付きのタグは、Git データベース内に完全なオブジェクトとして格納されます。
チェックサムが付き、タグを作成した人の名前・メールアドレス・作成日時・タグ付け時のメッセージなども含まれます。
また、署名をつけて GNU Privacy Guard (GPG) で検証することもできます。
一般的には、これらの情報を含められる注釈付きのタグを使うことをおすすめします。
しかし、一時的に使うだけのタグである場合や何らかの理由で情報を含めたくない場合は、
軽量版のタグも使用可能です。

[[_annotated_tags]]
//////////////////////////
==== Annotated Tags
//////////////////////////
==== 注釈付きのタグ

(((tags, annotated)))
//////////////////////////
Creating an annotated tag in Git is simple.
The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))
//////////////////////////
Git では、注釈付きのタグをシンプルな方法で作成できます。もっとも簡単な方法は、`tag` コマンドの実行時に `-a` を指定することです。(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

//////////////////////////
The `-m` specifies a tagging message, which is stored with the tag.
If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.
//////////////////////////
`-m` で、タグ付け時のメッセージを指定します。これはタグとともに格納されます。注釈付きタグの作成時にメッセージを省略すると、エディタが立ち上がるのでそこでメッセージを記入します。

//////////////////////////
You can see the tag data along with the commit that was tagged by using the `git show` command:
//////////////////////////
タグのデータとそれに関連づけられたコミットを見るには `git show` コマンドを使用します。

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//////////////////////////
That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.
//////////////////////////
タグ付けした人の情報とその日時、そして注釈メッセージを表示したあとにコミットの情報が続きます。

//////////////////////////
==== Lightweight Tags
//////////////////////////
==== 軽量版のタグ

(((tags, lightweight)))
//////////////////////////
Another way to tag commits is with a lightweight tag.
This is basically the commit checksum stored in a file – no other information is kept.
To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:
//////////////////////////
コミットにタグをつけるもうひとつの方法が、軽量版のタグです。
これは基本的に、コミットのチェックサムだけを保持するもので、それ以外の情報は含まれません。
軽量版のタグを作成するには `-a`、`-s` あるいは `-m` といったオプションをつけずにコマンドを実行します。

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

//////////////////////////
This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
The command just shows the commit:
//////////////////////////
このタグに対して `git show` を実行しても、先ほどのような追加情報は表示されません。(((git commands, show)))
単に、対応するコミットの情報を表示するだけです。

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//////////////////////////
==== Tagging Later
//////////////////////////
==== 後からのタグ付け

//////////////////////////
You can also tag commits after you've moved past them.
Suppose your commit history looks like this:
//////////////////////////
過去にさかのぼってコミットにタグ付けすることもできます。
仮にあなたのコミットの歴史が次のようなものであったとしましょう。

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

//////////////////////////
Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
You can add it after the fact.
To tag that commit, you specify the commit checksum (or part of it) at the end of the command:
//////////////////////////
今になって、このプロジェクトに v1.2のタグをつけるのを忘れていたことに気づきました。
本来なら ``updated rakefile'' のコミットにつけておくべきだったものです。
しかし今からでも遅くありません。
特定のコミットにタグをつけるには、そのコミットのチェックサム (あるいはその一部) をコマンドの最後に指定します。

[source,console]
----
$ git tag -a v1.2 9fceb02
----

//////////////////////////
You can see that you've tagged the commit:(((git commands, tag)))
//////////////////////////
これで、そのコミットにタグがつけられたことが確認できます。(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
//////////////////////////
==== Sharing Tags
//////////////////////////
==== タグの共有

//////////////////////////
By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches – you can run `git push origin [tagname]`.
//////////////////////////
デフォルトでは、`git push` コマンドはタグ情報をリモートに送りません。(((git commands, push)))
タグを作ったら、タグをリモートサーバーにプッシュするよう明示する必要があります。
その方法は、リモートブランチを共有するときと似ています。
`git push origin [tagname]` を実行するのです。

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

//////////////////////////
If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
This will transfer all of your tags to the remote server that are not already there.
//////////////////////////
多くのタグを一度にプッシュしたい場合は、
`git push` コマンドのオプション `--tags` を使用します。
これは、手元にあるタグのうちまだリモートサーバーに存在しないものをすべて転送します。

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

//////////////////////////
Now, when someone else clones or pulls from your repository, they will get all your tags as well.
//////////////////////////
これで、誰か他の人がリポジトリのクローンやプルを行ったときにすべてのタグを取得できるようになりました。

//////////////////////////
==== Checking out Tags
//////////////////////////
==== タグのチェックアウト

//////////////////////////
You can't really check out a tag in Git, since they can't be moved around.
If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with  `git checkout -b [branchname] [tagname]`:
//////////////////////////
実際のところ、タグのチェックアウトはGitではできないも同然です。
というのも、タグ付けされた内容に変更を加えられないからです。
仮に、とある時点でのリポジトリの内容を、
タグ付けされたような形で作業ディレクトリに保持したいとしましょう。
その場合、`git checkout -b [branchname] [tagname]` を実行すると特定のタグと紐付けたブランチを作成することはできます。

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

//////////////////////////
Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
//////////////////////////
とはいえ、この状態でコミットを追加すると、 `version2` ブランチは `v2.0.0` タグの内容とは異なってしまいます。
ブランチの状態が先へ進んでしまうからです。十分に気をつけて作業しましょう。
