[[_git_reset]]
/////////////////////////
=== Reset Demystified
/////////////////////////
=== リセットコマンド詳説

//////////////////////////
Before moving on to more specialized tools, let's talk about `reset` and `checkout`.
These commands are two of the most confusing parts of Git when you first encounter them.
They do so many things, that it seems hopeless to actually understand them and employ them properly.
For this, we recommend a simple metaphor.
//////////////////////////
専門的なツールを説明する前に、`reset` と `checkout` について触れておきます。
いざ使うことになると、一番ややこしい部類の Git コマンドです。
出来ることがあまりに多くて、ちゃんと理解したうえで正しく用いることなど夢のまた夢のようにも思えてしまいます。
よって、ここでは単純な例えを使って説明していきます。

//////////////////////////
==== The Three Trees
//////////////////////////
==== 3つのツリー

//////////////////////////
An easier way to think about `reset` and `checkout` is through the mental frame of Git being a content manager of three different trees.
By ``tree'' here we really mean ``collection of files'', not specifically the data structure.
(There are a few cases where the index doesn't exactly act like a tree, but for our purposes it is easier to think about it this way for now.)
//////////////////////////
`reset` と `checkout` を単純化したいので、Git を「3つのツリーのデータを管理するためのツール」と捉えてしまいましょう。
なお、ここでいう「ツリー」とはあくまで「ファイルの集まり」であって、データ構造は含みません。
（Git のインデックスがツリーとは思えないようなケースもありますが、ここでは単純にするため、「ツリー＝ファイルの集まり」で通していきます。）

//////////////////////////
Git as a system manages and manipulates three trees in its normal operation:
//////////////////////////
いつものように Git を使っていくと、以下のツリーを管理・操作していくことになります。

//////////////////////////
[cols="1,2",options="header"]
|================================
| Tree              | Role
| HEAD              | Last commit snapshot, next parent
| Index             | Proposed next commit snapshot
| Working Directory | Sandbox
|================================
//////////////////////////
[cols="1,2",options="header"]
|================================
| ツリー           | 役割
| HEAD             | 最新コミットのスナップショットで、次は親になる
| インデックス     | 次のコミット候補のスナップショット
| 作業ディレクトリ | サンドボックス
|================================

//////////////////////////
===== The HEAD
//////////////////////////
===== HEAD

//////////////////////////
HEAD is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch.
That means HEAD will be the parent of the next commit that is created.
It's generally simplest to think of HEAD as the snapshot of *your last commit*.
//////////////////////////
現在のブランチを指し示すポインタは HEAD と呼ばれています。HEAD は、そのブランチの最新コミットを指し示すポインタでもあります。
ということは、HEAD が指し示すコミットは新たに追加されていくコミットの親になる、ということです。
HEAD のことを *最新のコミット* のスナップショットと捉えておくとわかりやすいでしょう。

//////////////////////////
In fact, it's pretty easy to see what that snapshot looks like.
Here is an example of getting the actual directory listing and SHA-1 checksums for each file in the HEAD snapshot:
//////////////////////////
では、スナップショットの内容を確認してみましょう。実に簡単です。
ディレクトリ構成と SHA-1 チェックサムを HEAD のスナップショットから取得するには、以下のコマンドを実行します。

[source,console]
----
$ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -0700
committer Scott Chacon  1301511835 -0700

initial commit

$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib
----

//////////////////////////
The `cat-file` and `ls-tree` commands are ``plumbing'' commands that are used for lower level things and not really used in day-to-day work, but they help us see what's going on here.
//////////////////////////
`cat-file` や `ls-tree` は「配管」コマンドなので、日々の作業で使うことはないはずでしょう。ただし、今回のように詳細を把握するには便利です。

[[_the_index]]
//////////////////////////
===== The Index
//////////////////////////
===== インデックス

//////////////////////////
The Index is your *proposed next commit*. We've also been referring to this concept as Git's ``Staging Area'' as this is what Git looks at when you run `git commit`.
//////////////////////////
インデックスとは、*次のコミット候補* のことを指します。Git の「ステージングエリア」と呼ばれることもあります。`git commit` を実行すると確認される内容だからです。

//////////////////////////
Git populates this index with a list of all the file contents that were last checked out into your working directory and what they looked like when they were originally checked out.
You then replace some of those files with new versions of them, and `git commit` converts that into the tree for a new commit.
//////////////////////////
インデックスの中身は、前回のチェックアウトで作業ディレクトリに保存されたファイルの一覧になっています。保存時のファイルの状態も記録されています。
ファイルに変更を加え、`git commit` コマンドを実行すると、ツリーが作成され新たなコミットとなります。

[source,console]
----
$ git ls-files -s
100644 a906cb2a4a904a152e80877d4088654daad0c859 0	README
100644 8f94139338f9404f26296befa88755fc2598c289 0	Rakefile
100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0	lib/simplegit.rb
----

//////////////////////////
Again, here we're using `ls-files`, which is more of a behind the scenes command that shows you what your index currently looks like.
//////////////////////////
この例で使った `ls-files` コマンドも縁の下の力持ち的なコマンドです。インデックスの状態を表示してくれます。

//////////////////////////
The index is not technically a tree structure – it's actually implemented as a flattened manifest – but for our purposes it's close enough.
//////////////////////////
なお、インデックスは厳密にはツリー構造ではありません。実際には、階層のない構造になっています。ただ、理解する上ではツリー構造と捉えて差し支えありません。

//////////////////////////
===== The Working Directory
//////////////////////////
===== 作業ディレクトリ

//////////////////////////
Finally, you have your working directory.
The other two trees store their content in an efficient but inconvenient manner, inside the `.git` folder.
The Working Directory unpacks them into actual files, which makes it much easier for you to edit them.
Think of the Working Directory as a *sandbox*, where you can try changes out before committing them to your staging area (index) and then to history.
//////////////////////////
3つのツリーの最後は作業ディレクトリです。
他のツリーは、データを `.git` ディレクトリ内に処理しやすい形で格納してしまうため、人間が取り扱うには不便でした。
一方、作業ディレクトリにはデータが実際のファイルとして展開されます。とても取り扱いやすい形です。
作業ディレクトリのことは *サンドボックス* だと思っておいてください。そこでは、自由に変更を試せます。変更が完了したらステージングエリア（インデックス）に追加し、さらにコミットして歴史に追加するのです。

[source,console]
----
$ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files
----

//////////////////////////
==== The Workflow
//////////////////////////
==== 作業手順

//////////////////////////
Git's main purpose is to record snapshots of your project in successively better states, by manipulating these three trees.
//////////////////////////
Git を使う主目的は、プロジェクトのスナップショットを健全な状態で取り続けることです。そのためには、3つのツリーを操作する必要があります。

image::images/reset-workflow.png[]

//////////////////////////
Let's visualize this process: say you go into a new directory with a single file in it.
We'll call this *v1* of the file, and we'll indicate it in blue.
Now we run `git init`, which will create a Git repository with a HEAD reference which points to an unborn branch (`master` doesn't exist yet).
//////////////////////////
その手順を頭を使って説明しましょう。まず、新しいディレクトリを作って、テキストファイルをひとつ保存したとします。
現段階でのこのファイルを *v1* としましょう（図では青塗りの部分）。
次に `git init` を実行して Git リポジトリを生成します。このときの HEAD は、これから生成される予定のブランチを指し示すことになります（ `master` はまだ存在しません）。

image::images/reset-ex1.png[]

//////////////////////////
At this point, only the Working Directory tree has any content.
//////////////////////////
この時点では、作業ディレクトリにしかテキストファイルのデータは存在しません。

//////////////////////////
Now we want to commit this file, so we use `git add` to take content in the Working Directory and copy it to the Index.
//////////////////////////
では、このファイルをコミットしてみましょう。まずは `git add` を実行して、作業ディレクトリ上のデータをインデックスにコピーします。

image::images/reset-ex2.png[]

//////////////////////////
Then we run `git commit`, which takes the contents of the Index and saves it as a permanent snapshot, creates a commit object which points to that snapshot, and updates `master` to point to that commit.
//////////////////////////
さらに、`git commit` を実行し、インデックスの内容でスナップショットを作成します。そうすると、作成したスナップショットをもとにコミットオブジェクトが作成され、`master` がそのコミットを指し示すようになります。

image::images/reset-ex3.png[]

//////////////////////////
If we run `git status`, we'll see no changes, because all three trees are the same.
//////////////////////////
この段階で `git status` を実行しても、何も変更点は出てきません。3つのツリーが同じ状態になっているからです。

//////////////////////////
Now we want to make a change to that file and commit it.
We'll go through the same process; first we change the file in our working directory.
Let's call this *v2* of the file, and indicate it in red.
//////////////////////////
続いて、このテキストファイルの内容を変更してからコミットしてみましょう。
手順はさきほどと同じです。まずは、作業ディレクトリにあるファイルを変更します。
変更した状態のファイルを *v2* としましょう（図では赤塗りの部分）。

image::images/reset-ex4.png[]

//////////////////////////
If we run `git status` right now, we'll see the file in red as ``Changes not staged for commit,'' because that entry differs between the Index and the Working Directory.
Next we run `git add` on it to stage it into our Index.
//////////////////////////
`git status` をここで実行すると、コマンド出力の ``Changes not staged for commit'' 欄に赤塗り部分のファイルが表示されます。作業ディレクトリ上のそのファイルの状態が、インデックスの内容とは異なっているからです。
では、`git add` を実行して変更をインデックスに追加してみましょう。

image::images/reset-ex5.png[]

//////////////////////////
At this point if we run `git status` we will see the file in green
under ``Changes to be committed'' because the Index and HEAD differ – that is, our proposed next commit is now different from our last commit.
Finally, we run `git commit` to finalize the commit.
//////////////////////////
この状態で `git status` を実行すると、以下の図で緑色の枠内にあるファイルがコマンド出力の ``Changes to be committed'' 欄 に表示されます。インデックスと HEAD の内容に差分があるからです。次のコミット候補と前回のコミットの内容に差異が生じた、とも言えます。
では、`git commit` を実行してコミット内容を確定させましょう。

image::images/reset-ex6.png[]

//////////////////////////
Now `git status` will give us no output, because all three trees are the same again.
//////////////////////////
ここで `git status` を実行しても何も出力されません。3つのツリーが同じ状態に戻ったからです。

//////////////////////////
Switching branches or cloning goes through a similar process.
When you checkout a branch, it changes *HEAD* to point to the new branch ref, populates your *Index* with the snapshot of that commit, then copies the contents of the *Index* into your *Working Directory*.
//////////////////////////
なお、ブランチを切り替えたりリモートブランチをクローンしても同じような処理が走ります。
ブランチをチェックアウトしたとしましょう。そうすると、*HEAD* はそのブランチを指すようになります。さらに、HEAD コミットのスナップショットで *インデックス* が上書きされ、そのデータが *作業ディレクトリ* にコピーされます。

//////////////////////////
==== The Role of Reset
//////////////////////////
==== リセットの役割

//////////////////////////
The `reset` command makes more sense when viewed in this context.
//////////////////////////
これから説明する内容に沿って考えれば、`reset` コマンドの役割がわかりやすくなるはずです。

//////////////////////////
For the purposes of these examples, let's say that we've modified `file.txt` again and committed it a third time. So now our history looks like this:
//////////////////////////
説明で使う例として、さきほど使った `file.txt` をまた編集し、コミットしたと仮定します。その場合、このリポジトリの歴史は以下のようになります。

image::images/reset-start.png[]

//////////////////////////
Let's now walk through exactly what `reset` does when you call it. It directly manipulates these three trees in a simple and predictable way.
It does up to three basic operations.
//////////////////////////
では、`reset` コマンドの処理の流れを順を追って見ていきましょう。単純な方法で3つのツリーが操作されていきます。
一連の処理は、最大で3つになります。

//////////////////////////
===== Step 1: Move HEAD
//////////////////////////
===== 処理1 HEAD の移動

//////////////////////////
The first thing `reset` will do is move what HEAD points to.
This isn't the same as changing HEAD itself (which is what `checkout` does); `reset` moves the branch that HEAD is pointing to.
This means if HEAD is set to the `master` branch (i.e. you're currently on the `master` branch), running `git reset 9e5e6a4` will start by making `master` point to `9e5e6a4`.
//////////////////////////
`reset` コマンドを実行すると、HEAD に指し示されているものがまずは移動します。
これは、`checkout` のときのような、HEAD そのものを書き換えてしまう処理ではありません。HEAD が指し示すブランチの方が移動する、ということです。
つまり、仮に HEAD が `master` ブランチを指している（`master` ブランチをチェックアウトした状態）場合、`git reset 9e5e64a` を実行すると `master` ブランチがコミット `9e5e64a` を指すようになります。

image::images/reset-soft.png[]

//////////////////////////
No matter what form of `reset` with a commit you invoke, this is the first thing it will always try to do.
With `reset --soft`, it will simply stop there.
//////////////////////////
付与されたオプションがなんであれ、コミットを指定して `reset` コマンド実行すると、必ず上記の処理が走ります。
`reset --soft` オプションを使った場合は、コマンドはここで終了します。

//////////////////////////
Now take a second to look at that diagram and realize what happened: it essentially undid the last `git commit` command.
When you run `git commit`, Git creates a new commit and moves the branch that HEAD points to up to it.
When you `reset` back to `HEAD~` (the parent of HEAD), you are moving the branch back to where it was, without changing the Index or Working Directory.
You could now update the Index and run `git commit` again to accomplish what `git commit --amend` would have done (see <<_git_amend>>).
//////////////////////////
そして、改めて図を見てみると、直近の `git commit` コマンドが取り消されていることがわかると思います。
通常であれば、`git commit` を実行すると新しいコミットが作られ、HEAD が指し示すブランチはそのコミットまで移動します。
また、`reset` を実行して `HEAD~` （HEAD の親）までリセットすれば、ブランチは以前のコミットまで巻き戻されます。この際、インデックスや作業ディレクトリは変更されません。
なお、この状態でインデックスを更新して `git commit` を実行すれば、`git commit --amend` を行った場合と同じ結果が得られます（詳しくは <<_git_amend>> を参照してください)。

//////////////////////////
===== Step 2: Updating the Index (--mixed)
//////////////////////////
===== 処理2 インデックスの更新 (--mixed)

//////////////////////////
Note that if you run `git status` now you'll see in green the difference between the Index and what the new HEAD is.
//////////////////////////
ここで `git status` を実行すると、インデックスの内容と変更された HEAD の内容との差分がわかることを覚えておきましょう。

//////////////////////////
The next thing `reset` will do is to update the Index with the contents of whatever snapshot HEAD now points to.
//////////////////////////
第2の処理では、`reset` は HEAD が指し示すスナップショットでインデックスを置き換えます。

image::images/reset-mixed.png[]

//////////////////////////
If you specify the `--mixed` option, `reset` will stop at this point.
This is also the default, so if you specify no option at all (just `git reset HEAD~` in this case), this is where the command will stop.
//////////////////////////
`--mixed` オプションを使うと、`reset` はここで終了します。
また、このオプションはデフォルトになっています。ここでの例の `git reset HEAD~` のようにオプションなしでコマンドを実行しても、`reset` はここで終了します。

//////////////////////////
Now take another second to look at that diagram and realize what happened: it still undid your last `commit`, but also _unstaged_ everything.
You rolled back to before you ran all your `git add` and `git commit` commands.
//////////////////////////
では、もう一度図を見てみましょう。直近の `commit` がさきほどと同様に取り消されており、さらにインデックスの内容も _取り消された_ ことがわかります。
`git add` でインデックスに追加し、`git commit` でコミットとして確定させた内容が取り消されたということです。

//////////////////////////
===== Step 3: Updating the Working Directory (--hard)
//////////////////////////
===== 処理3 作業ディレクトリの更新 (--hard)

//////////////////////////
The third thing that `reset` will do is to make the Working Directory look like the Index.
If you use the `--hard` option, it will continue to this stage.
//////////////////////////
`reset` の第3の処理は、作業ディレクトリをインデックスと同じ状態にすることです。
`--hard` オプションを使うと、処理はこの段階まで進むことになります。

image::images/reset-hard.png[]

//////////////////////////
So let's think about what just happened.
You undid your last commit, the `git add` and `git commit` commands, **and** all the work you did in your working directory.
//////////////////////////
第3の処理が走ると何が起こるのでしょうか。
So let's think about what just happened.
まず、直近のコミットが巻き戻されます。`git add` と `git commit` で確定した内容も同様です。**さらに**、作業ディレクトリの状態も巻き戻されてしまいます。

//////////////////////////
It's important to note that this flag (`--hard`) is the only way to make the `reset` command dangerous, and one of the very few cases where Git will actually destroy data.
Any other invocation of `reset` can be pretty easily undone, but the `--hard` option cannot, since it forcibly overwrites files in the Working Directory.
In this particular case, we still have the *v3* version of our file in a commit in our Git DB, and we could get it back by looking at our `reflog`, but if we had not committed it, Git still would have overwritten the file and it would be unrecoverable.
//////////////////////////
`--hard` オプションを使った場合に限り、`reset` コマンドは危険なコマンドになってしまうことを覚えておいてください。Git がデータを完全に削除してしまう、数少ないパターンです。
`reset` コマンドの実行結果は簡単に取り消せますが、`--hard` オプションに限ってはそうはいきません。作業ディレクトリを強制的に上書きしてしまうからです。
ここに挙げた例では、*v3* バージョンのファイルは Git のデータベースにコミットとしてまだ残っていて、`reflog` を使えば取り戻せます。ただしコミットされていない内容については、上書きされてしまうため取り戻せません。

//////////////////////////
===== Recap
//////////////////////////
===== 要約

//////////////////////////
The `reset` command overwrites these three trees in a specific order, stopping when you tell it to:
//////////////////////////
`reset` コマンドを使うと、3つのツリーを以下の順で上書きしていきます。どこまで上書きするかはオプション次第です。

//////////////////////////
1. Move the branch HEAD points to _(stop here if `--soft`)_
2. Make the Index look like HEAD _(stop here unless `--hard`)_
3. Make the Working Directory look like the Index
//////////////////////////
1. HEAD が指し示すブランチを移動する _(`--soft` オプションを使うと処理はここまで)_
2. インデックスの内容を HEAD と同じにする _(`--hard` オプションを使わなければ処理はここまで)_
3. 作業ディレクトリの内容をインデックスと同じにする

//////////////////////////
==== Reset With a Path
//////////////////////////
==== パスを指定したリセット

//////////////////////////
That covers the behavior of `reset` in its basic form, but you can also provide it with a path to act upon.
If you specify a path, `reset` will skip step 1, and limit the remainder of its actions to a specific file or set of files.
This actually sort of makes sense – HEAD is just a pointer, and you can't point to part of one commit and part of another.
But the Index and Working directory _can_ be partially updated, so reset proceeds with steps 2 and 3.
//////////////////////////
ここまでで、`reset` の基礎と言える部分を説明してきました。次に、パスを指定して実行した場合の挙動について説明します。
パスを指定して `reset` を実行すると、処理1は省略されます。また、処理2と3については、パスで指定された範囲（ファイル郡）に限って実行されます。
このように動作するのはもっともな話です。処理1で操作される HEAD はポインタにすぎず、指し示せるコミットは一つだけだからです（こちらのコミットのこの部分と、あちらのコミットのあの部分、というようには指し示せません）。
一方、インデックスと作業ディレクトリを一部分だけ更新することは _可能_ です。よって、リセットの処理2と3は実行されます。

//////////////////////////
So, assume we run `git reset file.txt`.
This form (since you did not specify a commit SHA-1 or branch, and you didn't specify `--soft` or `--hard`) is shorthand for `git reset --mixed HEAD file.txt`, which will:
//////////////////////////
実際の例として、 `git reset file.txt` を実行したらどうなるか見ていきましょう。
このコマンドは `git reset --mixed HEAD file.txt` のショートカット版（ブランチやコミットの SHA-1 の指定がなく、 `--soft` or `--hard` の指定もないため）です。実行すると、

//////////////////////////
1. Move the branch HEAD points to _(skipped)_
2. Make the Index look like HEAD _(stop here)_
//////////////////////////
1. HEAD が指し示すブランチを移動する _(この処理は省略)_
2. HEAD の内容でインデックスを上書きする _(処理はここまで)_

//////////////////////////
So it essentially just copies `file.txt` from HEAD to the Index.
//////////////////////////
が行われます。要は、HEAD からインデックスに `file.txt` がコピーされるということです。

image::images/reset-path1.png[]

//////////////////////////
This has the practical effect of _unstaging_ the file.
If we look at the diagram for that command and think about what `git add` does, they are exact opposites.
//////////////////////////
同時に、このコマンドは指定したファイルをステージされていない状態に戻す（ _unstage_ )、ということでもあります。
上の図（リセットコマンドを図示したもの）を念頭におきつつ、`git add` の挙動を考えてみてください。真逆であることがわかるはずです。

image::images/reset-path2.png[]

//////////////////////////
This is why the output of the `git status` command suggests that you run this to unstage a file.
(See <<_unstaging>> for more on this.)
//////////////////////////
なお、ファイルをステージされていない状態に戻したいときはこのリセットコマンドを実行するよう、 `git status` コマンドの出力には書かれています。その理由は、リセットコマンドが上述のような挙動をするからなのです。
（詳細は <<_unstaging>> を確認してください）。

//////////////////////////
We could just as easily not let Git assume we meant ``pull the data from HEAD'' by specifying a specific commit to pull that file version from.
We would just run something like `git reset eb43bf file.txt`.
//////////////////////////
「HEAD のデータが欲しい」という前提で処理が行われるのを回避することもできます。とても簡単で、必要なデータを含むコミットを指定するだけです。
`git reset eb43bf file.txt` のようなコマンドになります。

image::images/reset-path3.png[]

//////////////////////////
This effectively does the same thing as if we had reverted the content of the file to *v1* in the Working Directory, ran `git add` on it, then reverted it back to *v3* again (without actually going through all those steps).
If we run `git commit` now, it will record a change that reverts that file back to *v1*, even though we never actually had it in our Working Directory again.
//////////////////////////
これを実行すると、作業ディレクトリ上の `file.txt` が *v1* の状態に戻り、`git add` が実行されたあと、作業ディレクトリの状態が *v3* に戻る、のと同じことが起こります（実際にそういった手順で処理されるわけではありませんが）。
さらに `git commit` を実行してみましょう。すると、作業ディレクトリ上の状態をまた *v1* に戻したわけではないのに、該当のファイルを *v1* に戻す変更がコミットされます。

//////////////////////////
It's also interesting to note that like `git add`, the `reset` command will accept a `--patch` option to unstage content on a hunk-by-hunk basis.
So you can selectively unstage or revert content.
//////////////////////////
もうひとつ、覚えておくべきことを紹介します。 `git add` などと同じように、`reset` コマンドにも `--patch` オプションがあります。これを使うと、ステージした内容を塊ごとに作業ディレクトリに戻せます。
つまり、一部分だけを作業ディレクトリに戻したり以前の状態に巻き戻したりできるわけです。

//////////////////////////
==== Squashing
//////////////////////////
==== `reset` を使ったコミットのまとめ

//////////////////////////
Let's look at how to do something interesting with this newfound power – squashing commits.
//////////////////////////
本節で学んだ方法を使う、気になる機能を紹介します。コミットのまとめ機能です。

//////////////////////////
Say you have a series of commits with messages like ``oops.'', ``WIP'' and ``forgot this file''.
You can use `reset` to quickly and easily squash them into a single commit that makes you look really smart.
(<<_squashing>> shows another way to do this, but in this example it's simpler to use `reset`.)
//////////////////////////
「凡ミス」「WIP」「ファイル追加忘れ」のようなメッセージのコミットがいくつも続いたとします。
そんなときは `reset` を使いましょう。すっきりと一つにまとめられます
（別の手段を <<_squashing>> で紹介していますが、今回の例では `reset` の方がわかりやすいと思います）。

//////////////////////////
Let's say you have a project where the first commit has one file, the second commit added a new file and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it down.
//////////////////////////
ここで、最初のコミットはファイル数が1、次のコミットでは最初からあったファイルの変更と新たなファイルの追加、その次のコミットで最初からあったファイルをまた変更、というコミット履歴を経てきたプロジェクトがあったとします。
二つめのコミットは作業途中のもの（WIP）だったので、どこかにまとめてしまいましょう。

image::images/reset-squash-r1.png[]

//////////////////////////
You can run `git reset --soft HEAD~2` to move the HEAD branch back to an older commit (the first commit you want to keep):
//////////////////////////
まず、`git reset --soft HEAD~2` を実行して HEAD を過去のコミット（消したくはないコミットのうち古い方）へと移動させます。

image::images/reset-squash-r2.png[]

//////////////////////////
And then simply run `git commit` again:
//////////////////////////
そうしたら、あとは `git commit` を実行するだけです。

image::images/reset-squash-r3.png[]

//////////////////////////
Now you can see that your reachable history, the history you would push, now looks like you had one commit with `file-a.txt` v1, then a second that both modified `file-a.txt` to v3 and added `file-b.txt`. The commit with the v2 version of the file is no longer in the history.
//////////////////////////
こうしてしまえば、1つめのコミットで `file-a.txt` v1 が追加され、2つめのコミットで `file-a.txt` が v3 に変更され `file-b.txt` が追加された、というコミット履歴が到達可能な歴史（プッシュすることになる歴史）になります。`file-a.txt` を v2 に変更したコミットを歴史から取り除くことができました。

//////////////////////////
==== Check It Out
//////////////////////////
==== チェックアウトとの違い

//////////////////////////
Finally, you may wonder what the difference between `checkout` and `reset` is.
Like `reset`, `checkout` manipulates the three trees, and it is a bit different depending on whether you give the command a file path or not.
//////////////////////////
最後に、`checkout` と `reset` の違いについて触れておきます。
3つのツリーを操作する、という意味では `checkout` は `reset` と同様です。けれど、コマンド実行時にファイルパスを指定するかどうかによって、少し違いがでてきます。

//////////////////////////
===== Without Paths
//////////////////////////
===== パス指定なしの場合

//////////////////////////
Running `git checkout [branch]` is pretty similar to running `git reset --hard [branch]` in that it updates all three trees for you to look like `[branch]`, but there are two important differences.
//////////////////////////
`git checkout [branch]` と `git reset --hard [branch]` の挙動は似ています。どちらのコマンドも、3つのツリーを `[branch]` の状態に変更するからです。ただし、大きな違いが2点あります。

//////////////////////////
First, unlike `reset --hard`, `checkout` is working-directory safe; it will check to make sure it's not blowing away files that have changes to them.
Actually, it's a bit smarter than that – it tries to do a trivial merge in the Working Directory, so all of the files you _haven't_ changed in  will be updated.
`reset --hard`, on the other hand, will simply replace everything across the board without checking.
//////////////////////////
まず、`reset --hard` とは違い、`checkout` は作業ディレクトリを守ろうとします。作業ディレクトリの内容を上書きしてしまう前に、未保存の変更がないかをチェックしてくれるのです。
さらに詳しく見てみると、このコマンドはもっと親切なことがわかります。作業ディレクトリのファイルに対し、``trivial'' なマージを試してくれるのです。うまくいけば、_未変更_ のファイルはすべて更新されます。
一方、`reset --hard` の場合、このようなチェックは行わずにすべてが上書きされます。

//////////////////////////
The second important difference is how it updates HEAD.
Where `reset` will move the branch that HEAD points to, `checkout` will move HEAD itself to point to another branch.
//////////////////////////
もうひとつの違いは、HEAD の更新方法です。
`reset` の場合はブランチの方が移動するのに対し、`checkout` の場合は HEAD のそのものが別ブランチに移動します。

//////////////////////////
For instance, say we have `master` and `develop` branches which point at different commits, and we're currently on `develop` (so HEAD points to it).
If we run `git reset master`, `develop` itself will now point to the same commit that `master` does.
If we instead run `git checkout master`, `develop` does not move, HEAD itself does.
HEAD will now point to `master`.
//////////////////////////
具体例を挙げて説明しましょう。`master` と `develop` の2つのブランチが異なるコミットを指し示していて、`develop` の方をチェックアウトしているとします（HEAD は後者の方を向いた状態です）。
ここで `git reset master` を実行すると、`master` ブランチの最新のコミットを `develop` ブランチも指し示すようになります。
ですが、代わりに `git checkout master` を実行しても、`develop` ブランチは移動しません。HEAD が移動するのです。
その結果、HEAD は `master` の方を指し示すようになります。

//////////////////////////
So, in both cases we're moving HEAD to point to commit A, but _how_ we do so is very different.
`reset` will move the branch HEAD points to, `checkout` moves HEAD itself.
//////////////////////////
どちらの場合でも HEAD がコミット A を指すようになるという意味では同じですが、_どのように_ それが行われるかはずいぶん違います。
`reset` の場合は HEAD が指し示すブランチの方が移動するのに対し、`checkout` の場合は HEAD そのものが移動するのです。

image::images/reset-checkout.png[]

//////////////////////////
===== With Paths
//////////////////////////
===== パス指定ありの場合

//////////////////////////
The other way to run `checkout` is with a file path, which, like `reset`, does not move HEAD.
It is just like `git reset [branch] file` in that it updates the index with that file at that commit, but it also overwrites the file in the working directory.
It would be exactly like `git reset --hard [branch] file` (if `reset` would let you run that) – it's not working-directory safe, and it does not move HEAD.
//////////////////////////
`checkout` はパスを指定して実行することも出来ます。その場合、`reset` と同様、HEAD が動くことはありません。
実行されると指定したコミットの指定したファイルでインデックスの内容を置き換えます。`git reset [branch] file` と同じ動きです。しかし、`checkout` の場合は、さらに作業ディレクトリのファイルも置き換えます。
`git reset --hard [branch] file` を実行しても、まったく同じ結果になるでしょう（実際には `reset` ではこういうオプションの指定はできません）。作業ディレクトリを保護してはくれませんし、HEAD が動くこともありません。

//////////////////////////
Also, like `git reset` and `git add`, `checkout` will accept a `--patch` option to allow you to selectively revert file contents on a hunk-by-hunk basis.
//////////////////////////
また、`checkout` にも `git reset` や `git add` のように `--patch` オプションがあります。これを使えば、変更点を部分ごとに巻き戻していけます。

//////////////////////////
==== Summary
//////////////////////////
==== まとめ

//////////////////////////
Hopefully now you understand and feel more comfortable with the `reset` command, but are probably still a little confused about how exactly it differs from `checkout` and could not possibly remember all the rules of the different invocations.
//////////////////////////
これまでの説明で `reset` コマンドについての不安は解消されたでしょうか。`checkout` との違いがまだまだ曖昧かもしれません。実行の仕方が多すぎて、違いを覚えるのは無理と言っても言い過ぎではないはずです。

//////////////////////////
Here's a cheat-sheet for which commands affect which trees.
The ``HEAD'' column reads ``REF'' if that command moves the reference (branch) that HEAD points to, and ``HEAD'' if it moves HEAD itself.
Pay especial attention to the 'WD Safe?' column – if it says *NO*, take a second to think before running that command.
//////////////////////////
どのコマンドがどのツリーを操作するか、以下の表にまとめておきました。
``HEAD'' の列は、該当のコマンドが HEAD が指し示すブランチの位置を動かす場合は ``REF''、動くのが HEAD そのものの場合は ``HEAD'' としてあります。
「作業ディレクトリ保護の有無」の列はよく見ておいてください。その列が *いいえ* の場合は、実行結果をよくよく踏まえてからコマンドを実行するようにしてください。

//////////////////////////
[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | Index | Workdir | WD Safe?
| *Commit Level* | | | |
| `reset --soft [commit]` | REF | NO | NO | YES
| `reset [commit]` | REF | YES | NO | YES
| `reset --hard [commit]` | REF | YES | YES | *NO*
| `checkout [commit]` | HEAD | YES | YES | YES
| *File Level* | | | |
| `reset (commit) [file]` | NO | YES | NO | YES
| `checkout (commit) [file]` | NO | YES | YES | *NO*
|================================
//////////////////////////
[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | インデックス | 作業ディレクトリ | 作業ディレクトリ保護の有無
| *Commit Level* | | | |
| `reset --soft [commit]` | REF | いいえ | いいえ | はい
| `reset [commit]` | REF | はい | いいえ | はい
| `reset --hard [commit]` | REF | はい | はい | *いいえ*
| `checkout [commit]` | HEAD | はい | はい | はい
| *File Level* | | | |
| `reset (commit) [file]` | いいえ | はい | いいえ | はい
| `checkout (commit) [file]` | いいえ | はい | はい | *いいえ*
|================================
