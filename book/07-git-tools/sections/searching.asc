[[_searching]]
//////////////////////////
=== Searching
//////////////////////////
=== 検索

//////////////////////////
With just about any size codebase, you'll often need to find where a function is called or defined, or find the history of a method.
Git provides a couple of useful tools for looking through the code and commits stored in its database quickly and easily.
We'll go through a few of them.
//////////////////////////
コード量の大小を問わず、関数の参照位置・定義やメソッドの変更履歴を確認したくなることはよくあります。Git には便利なツールがいくつも用意されていて、コードやコミット履歴の確認が簡単にできるようになっています。具体的な方法をいくつか見ていきましょう。

[[_git_grep]]
==== Git Grep

//////////////////////////
Git ships with a command called `grep` that allows you to easily search through any committed tree or the working directory for a string or regular expression.
For these examples, we'll look through the Git source code itself.
//////////////////////////
Git に付属する `grep` コマンドを使うと、コミット済みのツリーや作業ディレクトリが簡単に検索（文字列・正規表現）できます。使い方の説明を兼ねて、Git のソースコードを覗いてみることにしましょう。

//////////////////////////
By default, it will look through the files in your working directory.
You can pass `-n` to print out the line numbers where Git has found matches.
//////////////////////////
このコマンドはデフォルトでは作業ディレクトリを検索します。`-n` オプションと一緒に使うと、検索条件とマッチした行の番号も表示してくれます。

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:429:             if (gmtime_r(&now, &now_tm))
date.c:492:             if (gmtime_r(&time, tm)) {
git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:723:#define gmtime_r git_gmtime_r
----

//////////////////////////
There are a number of interesting options you can provide the `grep` command.
//////////////////////////
その他にも、興味深いオプションがこのコマンドにはいくつも用意されています。


//////////////////////////
For instance, instead of the previous call, you can have Git summarize the output by just showing you which files matched and how many matches there were in each file with the `--count` option:
//////////////////////////
上記の実行例とは違い、コマンド出力を Git に要約させることもできます。例えば、検索にマッチしたファイルの名前とマッチ回数を表示させるには、`--count` オプションを使います。

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:2
git-compat-util.h:2
----

//////////////////////////
If you want to see what method or function it thinks it has found a match in, you can pass `-p`:
//////////////////////////
検索にマッチした結果からメソッドや関数と思われるものだけを確認したい場合は、`-p` オプションを使いましょう。

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
----

//////////////////////////
So here we can see that `gmtime_r` is called in the `match_multi_number` and `match_digit` functions in the date.c file.
//////////////////////////
この例では、`gmtime_r` が date.c ファイルにある関数 `match_multi_number` と `match_digit` から呼び出されていることがわかります。

//////////////////////////
You can also look for complex combinations of strings with the `--and` flag, which makes sure that multiple matches are in the same line.
For instance, let's look for any lines that define a constant with either the strings ``LINK'' or ``BUF_MAX'' in them in the Git codebase in an older 1.8.0 version.
//////////////////////////
また、文字列の複雑な組み合わせを探したい場合は `--and` オプションを使いましょう。検索条件がすべて同一行に含まれている行だけを返すためのオプションです。例として、文字列 ``LINK'' か ``BUF_MAX'' を含む定数が記述されている行を、Git の古いバージョン 1.8.0 から探してみます。

//////////////////////////
Here we'll also use the `--break` and `--heading` options which help split up the output into a more readable format.
//////////////////////////
なお、この例では `--break` と `--heading` のオプションも使っています。出力を分割して読みやすくするためです。

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

//////////////////////////
The `git grep` command has a few advantages over normal searching commands like `grep` and `ack`.
The first is that it's really fast, the second is that you can search through any tree in Git, not just the working directory.
As we saw in the above example, we looked for terms in an older version of the Git source code, not the version that was currently checked out.
//////////////////////////
`grep` や `ack` のような他の検索用コマンドと比較すると、`git grep` コマンドには利点がふたつあります。とても早く動作することと、作業ディレクトリだけでなくコミット済みの全ツリーが検索対象であることです。上記の例ではその利点を示すために、検索対象を古いバージョンの Git のソースコードとし、チェックアウトされたバージョンのものにはしませんでした。

//////////////////////////
==== Git Log Searching
//////////////////////////
==== Git ログの検索

//////////////////////////
Perhaps you're looking not for **where** a term exists, but **when** it existed or was introduced.
The `git log` command has a number of powerful tools for finding specific commits by the content of their messages or even the content of the diff they introduce.
//////////////////////////
場合によっては、探しているのは語句の **所在** ではなく、語句が存在した・追加された **時期**、ということもあるでしょう。`git log` コマンドの強力なオプションを使うと、コミットメッセージの内容やコミットごとの差分をもとに、特定のコミットを絞り込めます。


//////////////////////////
If we want to find out for example when the `ZLIB_BUF_MAX` constant was originally introduced, we can tell Git to only show us the commits that either added or removed that string with the `-S` option.
//////////////////////////
ここでは、定数 `ZLIB_BUF_MAX` が追加された時期を調べてみましょう。その文字列が追加、あるいは削除されたコミットだけを表示するには、`-S` オプションを用います。

[source,console]
----
$ git log -SZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time
----

//////////////////////////
If we look at the diff of those commits we can see that in `ef49a7a` the constant was introduced and in `e01503b` it was modified.
//////////////////////////
これらのコミットの差分を見てみると、コミット `ef49a7a` でこの定数が追加され、コミット `e01503b` でそれが変更されたことがわかります。

//////////////////////////
If you need to be more specific, you can provide a regular expression to search for with the `-G` option.
//////////////////////////
より詳しく調べたいのなら、`-G` オプションをつけましょう。検索に正規表現が使えるようになります。

//////////////////////////
===== Line Log Search
//////////////////////////
===== ログの行指向検索

//////////////////////////
Another fairly advanced log search that is insanely useful is the line history search.
This is a fairly recent addition and not very well known, but it can be really helpful.
It is called with the `-L` option to `git log` and will show you the history of a function or line of code in your codebase.
//////////////////////////
一歩進んだログ検索の方法をもうひとつ見ておきましょう。履歴を行指向で検索するという、ものすごく便利な方法です。最近になって Git に追加された機能であまり知られていませんが、本当に便利です。`git log` コマンドに `-L` オプションをつけると行指向検索が有効になり、指定した行（関数など）の履歴を確認できます。

//////////////////////////
For example, if we wanted to see every change made to the function `git_deflate_bound` in the `zlib.c` file, we could run `git log -L :git_deflate_bound:zlib.c`.
This will try to figure out what the bounds of that function are and then look through the history and show us every change that was made to the function as a series of patches back to when the function was first created.
//////////////////////////
ここでは仮に、`zlib.c` ファイルにある `git_deflate_bound` 関数の変更履歴を確認したいとしましょう。用いるコマンドは `git log -L :git_deflate_bound:zlib.c` です。これを実行すると、指定された関数の定義範囲がまずは推測されます。そして、その範囲の全変更履歴をパッチの形でひとつずつ、関数が追加されたときの履歴にまでさかのぼって表示します。

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

//////////////////////////
If Git can't figure out how to match a function or method in your programming language, you can also provide it a regex.
For example, this would have done the same thing: `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`.
You could also give it a range of lines or a single line number and you'll get the same sort of output.
//////////////////////////
検索対象のコードで用いられているプログラミング言語によっては、 Git が関数やメソッドの定義範囲を絞り込めないことがあります。そんな場合は、正規表現を使いましょう。上記の例でいえば `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c` はまったく同じ結果を出力します。また、行番号で検索対象を指定（単一行の指定、複数行で範囲指定の両方が可能）しても、同じような結果が得られます。
