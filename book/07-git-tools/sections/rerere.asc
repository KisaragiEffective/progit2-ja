[[_rerere]]
=== Rerere

//////////////////////////
The `git rerere` functionality is a bit of a hidden feature.
The name stands for ``reuse recorded resolution'' and as the name implies, it allows you to ask Git to remember how you've resolved a hunk conflict so that the next time it sees the same conflict, Git can automatically resolve it for you.
//////////////////////////
`git rerere` コマンドはベールに包まれた機能といってもいいでしょう。これは ``reuse recorded resolution'' の略です。その名が示すとおり、このコマンドは、コンフリクトがどのように解消されたかを記録してくれます。そして、同じコンフリクトに次に出くわしたときに、自動で解消してくれるのです。

//////////////////////////
There are a number of scenarios in which this functionality might be really handy.
One of the examples that is mentioned in the documentation is if you want to make sure a long lived topic branch will merge cleanly but don't want to have a bunch of intermediate merge commits.
With `rerere` turned on you can merge occasionally, resolve the conflicts, then back out the merge.
If you do this continuously, then the final merge should be easy because `rerere` can just do everything for you automatically.
//////////////////////////
いくつもの場面で、この機能がとても役立つと思います。Git のドキュメントで挙げられている例は、長期にわたって開発が続いているトピックブランチを問題なくマージされるようにしておきたいけれど、そのためのマージコミットがいくつも生まれるような状況は避けたい、というものです。`rerere` を有効にした状態で、マージをときおり実行し、コンフリクトをそのたびに解消したうえで、マージを取り消してみてください。この手順を継続的に行っておけば、最終的なマージは容易なものになるはずです。`rerere` がすべてを自動で処理してくれるからです。

//////////////////////////
This same tactic can be used if you want to keep a branch rebased so you don't have to deal with the same rebasing conflicts each time you do it.
Or if you want to take a branch that you merged and fixed a bunch of conflicts and then decide to rebase it instead - you likely won't have to do all the same conflicts again.
//////////////////////////
リベースする度に同じコンフリクトを処理することなく、ブランチをリベースされた状態に保っておくときにもこの方法が使えます。あるいは、コンフリクトをすべて解消して、ようやっとマージし終えた後に、リベースを使うことに方針を変更したとしましょう。`rerere` を使えば、同じコンフリクトを再度処理せずに済みます。

//////////////////////////
Another situation is where you merge a bunch of evolving topic branches together into a testable head occasionally, as the Git project itself often does.
If the tests fail, you can rewind the merges and re-do them without the topic branch that made the tests fail without having to re-resolve the conflicts again.
//////////////////////////
その他にも、開発中のトピックブランチをいくつもまとめてマージして、テスト可能な HEAD を生成するとき（Git 本体のプロジェクトでよく行われています）にもこのコマンドが使えます。テストが失敗したら、マージを取り消したうえで失敗の原因となったブランチを除外してからテストを再実行するわけですが、`rerere` を使えばその際にコンフリクトを解消する必要がなくなるのです。

//////////////////////////
To enable the `rerere` functionality, you simply have to run this config setting:
//////////////////////////
`rerere` を有効にするには、以下の設定コマンドを実行しましょう。

[source,console]
----
$ git config --global rerere.enabled true
----

//////////////////////////
You can also turn it on by creating the `.git/rr-cache` directory in a specific repository, but the config setting is clearer and it can be done globally.
//////////////////////////
該当のリポジトリに `.git/rr-cache` というディレクトリを作成しても `rerere` は有効になりますが、設定するほうがわかりやすいでしょう。設定であれば、全リポジトリに適用することもできます。

//////////////////////////
Now let's see a simple example, similar to our previous one.
Let's say we have a file named `hello.rb` that looks like this:
//////////////////////////
では実際の例を見てみましょう。以前使ったような単純な例です。
`hello.rb` というファイル名の、以下のようなファイルがあったとします。

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end
----

//////////////////////////
In one branch we change the word ``hello'' to ``hola'', then in another branch we change the ``world'' to ``mundo'', just like before.
//////////////////////////
今いるブランチではこのファイルの ``hello'' という単語を ``hola'' に変更し、別のブランチでは ``world'' を ``mundo'' に変更したとします。前回と同様ですね。

image::images/rerere1.png[]

//////////////////////////
When we merge the two branches together, we'll get a merge conflict:
//////////////////////////
これら2つのブランチをマージしようとすると、コンフリクトが発生します。

[source,console]
----
$ git merge i18n-world
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Recorded preimage for 'hello.rb'
Automatic merge failed; fix conflicts and then commit the result.
----

//////////////////////////
You should notice the new line `Recorded preimage for FILE` in there.
Otherwise it should look exactly like a normal merge conflict.
At this point, `rerere` can tell us a few things.
Normally, you might run `git status` at this point to see what all conflicted:
//////////////////////////
コマンド出力に `Recorded preimage for FILE` という見慣れない行があるのに気づかれたでしょう。他の部分は、よくあるコンフリクトのメッセージと変わりありません。この時点で、`rerere` からわかることがいくつかあります。こういった場合、いつもであれば以下のように `git status` を実行し、何がコンフリクトしているのかを確認するものです。

[source,console]
----
$ git status
# On branch master
# Unmerged paths:
#   (use "git reset HEAD <file>..." to unstage)
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      hello.rb
#
----

//////////////////////////
However, `git rerere` will also tell you what it has recorded the pre-merge state for with `git rerere status`:
//////////////////////////
ですが、ここで `git rerere status` を実行すると、どのファイルのマージ前の状態が `git rerere` によって保存されたかがわかります。

[source,console]
----
$ git rerere status
hello.rb
----

//////////////////////////
And `git rerere diff` will show the current state of the resolution - what you started with to resolve and what you've resolved it to.
//////////////////////////
更に、`git rerere diff` を実行すると、コンフリクト解消の状況がわかります。具体的には、着手前がどういう状態であったか、どういう風に解消したのか、がわかります。

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,11 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
+<<<<<<< HEAD
   puts 'hola world'
->>>>>>>
+=======
+  puts 'hello mundo'
+>>>>>>> i18n-world
 end
----

//////////////////////////
Also (and this isn't really related to `rerere`), you can use `ls-files -u` to see the conflicted files and the before, left and right versions:
//////////////////////////
また（`rerere` 特有の話ではありませんが）、コンフリクトしているファイルと、そのファイルの3バージョン（マージ前・コンフリクトマーカー左向き・コンフリクトマーカー右向き）が `ls-files -u` を使うとわかります。

[source,console]
----
$ git ls-files -u
100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1	hello.rb
100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2	hello.rb
100644 54336ba847c3758ab604876419607e9443848474 3	hello.rb
----

//////////////////////////
Now you can resolve it to just be `puts 'hola mundo'` and you can run the `rerere diff` command again to see what rerere will remember:
//////////////////////////
さて、このコンフリクトは `puts 'hola mundo'` と修正しておきます。そして、 もう一度 `rerere diff` コマンドを実行すると、rerere が記録する内容を確認できます。

[source,console]
----
$ git rerere diff
--- a/hello.rb
+++ b/hello.rb
@@ -1,11 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-<<<<<<<
-  puts 'hello mundo'
-=======
-  puts 'hola world'
->>>>>>>
+  puts 'hola mundo'
 end
----

//////////////////////////
So that basically says, when Git sees a hunk conflict in a `hello.rb` file that has ``hello mundo'' on one side and ``hola world'' on the other, it will resolve it to ``hola mundo''.
//////////////////////////
これを記録したということは、`hello.rb` に同じコンフリクト（一方は ``hello mundo'' でもう一方が ``hola world''）が見つかった場合、自動的に ``hola mundo'' に修正されるということになります。

//////////////////////////
Now we can mark it as resolved and commit it:
//////////////////////////
では、この変更内容をコミットしましょう。

[source,console]
----
$ git add hello.rb
$ git commit
Recorded resolution for 'hello.rb'.
[master 68e16e5] Merge branch 'i18n'
----

//////////////////////////
You can see that it "Recorded resolution for FILE".
//////////////////////////
コマンド出力から、Git がコンフリクト解消方法を記録した（"Recorded resolution for FILE"）ことがわかります。

image::images/rerere2.png[]

//////////////////////////
Now, let's undo that merge and then rebase it on top of our master branch instead.
We can move our branch back by using `reset` as we saw in <<_git_reset>>.
//////////////////////////
ではここで、このマージを取り消して master ブランチにリベースしてみましょう。<<_git_reset>> で紹介したとおり、ブランチを巻き戻すには `reset` を使います。

[source,console]
----
$ git reset --hard HEAD^
HEAD is now at ad63f15 i18n the hello
----

//////////////////////////
Our merge is undone.
Now let's rebase the topic branch.
//////////////////////////
マージが取り消されました。続いてトピックブランチをリベースしてみます。

[source,console]
----
$ git checkout i18n-world
Switched to branch 'i18n-world'

$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: i18n one word
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Failed to merge in the changes.
Patch failed at 0001 i18n one word
----

//////////////////////////
Now, we got the same merge conflict like we expected, but take a look at the `Resolved FILE using previous resolution` line.
If we look at the file, we'll see that it's already been resolved, there are no merge conflict markers in it.
//////////////////////////
予想どおり、マージコンフリクトが発生しました。一方、`Resolved FILE using previous resolution` というメッセージも出力されています。該当のファイルを確認してみてください。コンフリクトはすでに解消されていて、コンフリクトを示すマーカーは挿入されていないはずです。

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

//////////////////////////
Also, `git diff` will show you how it was automatically re-resolved:
//////////////////////////
また、ここで `git diff` を実行すると、コンフリクトの再解消がどのように自動処理されたかがわかります。

[source,console]
----
$ git diff
diff --cc hello.rb
index a440db6,54336ba..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end
----

image::images/rerere3.png[]

//////////////////////////
You can also recreate the conflicted file state with the `checkout` command:
//////////////////////////
なお、`checkout` コマンドを使うと、ファイルがコンフリクトした状態を再現できます。

[source,console]
----
$ git checkout --conflict=merge hello.rb
$ cat hello.rb
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end
----

//////////////////////////
We saw an example of this in <<_advanced_merging>>.
For now though, let's re-resolve it by just running `rerere` again:
//////////////////////////
これは <<_advanced_merging>> で使用した例と同じ内容ですが、ここでは `rerere` を使ってコンフリクトをもう一度解消してみましょう。

[source,console]
----
$ git rerere
Resolved 'hello.rb' using previous resolution.
$ cat hello.rb
#! /usr/bin/env ruby

def hello
  puts 'hola mundo'
end
----

//////////////////////////
We have re-resolved the file automatically using the `rerere` cached resolution.
You can now add and continue the rebase to complete it.
//////////////////////////
`rerere` がキャッシュした解消方法で、再処理が自動的に行われたようです。結果をインデックスに追加して、リベースを先に進めましょう。

[source,console]
----
$ git add hello.rb
$ git rebase --continue
Applying: i18n one word
----

//////////////////////////
So, if you do a lot of re-merges, or want to keep a topic branch up to date with your master branch without a ton of merges, or you rebase often, you can turn on `rerere` to help your life out a bit.
//////////////////////////
マージの再実行を何度も行うことがある、頻繁に master ブランチをマージせずにトピックブランチを最新の状態に保ちたい、リベースをよく行う……いずれかに当てはまる場合は `rerere` を有効にしておきましょう。日々の生活がちょっとだけ楽になると思います。
