[#ch09-git-and-other-scms]
//////////////////////////
== Git and Other Systems
//////////////////////////
== Gitとその他のシステムの連携

//////////////////////////
The world isn't perfect.
Usually, you can't immediately switch every project you come in contact with to Git.
Sometimes you're stuck on a project using another VCS, and wish it was Git.
We'll spend the first part of this chapter learning about ways to use Git as a client when the project you're working on is hosted in a different system.
//////////////////////////
世の中はそんなにうまくいくものではありません。
あなたが関わることになったプロジェクトで使うバージョン管理システムを、すぐさまGitに切り替えられることはほとんどないでしょう。
また、関わっているプロジェクトが他のVCSを使っていて、もしこれがGitだったらなぁと思うことも時々あると思います。
この章の前半では、作業中のプロジェクトが他のバージョン管理システムを使っていた場合に、Git をクライアントとして使用する方法を学びます。

//////////////////////////
At some point, you may want to convert your existing project to Git.
The second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists.
//////////////////////////
どこかの時点で、既存のプロジェクトを Git へ変換したくなることもあるでしょう。
この章の後半では、いくつかの特定のシステムから Git へ、プロジェクトを移行する方法と、既存のインポート用ツールがない場合に使える手法について説明します。

//////////////////////////
=== Git as a Client
//////////////////////////
=== Git をクライアントとして使用する

(((Git as a client)))
//////////////////////////
Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called ``bridges,'' available.
Here we'll cover the ones you're most likely to run into in the wild.
//////////////////////////
Git は開発者に対し、非常に優れたユーザ体験を提供してくれます。このユーザ体験は、多くの人々がこれまでに編み出した、自分の端末上で Git を使用する方法に基づいています。それは、同じチームの他のメンバーがまったく別の VCS を使用している場合でも同様です。
そのような場合には ``ブリッジ'' と呼ばれるアダプタが利用できます。
ここでは、その中でも遭遇する機会が多いであろうものを取り上げます。

include::book/09-git-and-other-scms/sections/client-svn.asc[]

include::book/09-git-and-other-scms/sections/client-hg.asc[]

include::book/09-git-and-other-scms/sections/client-p4.asc[]

include::book/09-git-and-other-scms/sections/client-tfs.asc[]

[[r_migrating]]
//////////////////////////
=== Migrating to Git
//////////////////////////
=== Git へ移行する

(((Migrating to Git)))
//////////////////////////
If you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.
//////////////////////////
Git 以外のバージョン管理システムで管理しているコードベースがあるけれど、Git を使いはじめることにした、という場合、どうにかしてプロジェクトを移行する必要があります。
この節では、主要なバージョン管理システム用のインポーターについて触れた後、独自のインポーターを自前で開発する方法を実際に見ていきます。
ここでは、いくつかの大きくてプロ仕様のソースコード管理システムからデータをインポートする方法を学びます。これは、移行するユーザの多くがそういったシステムのユーザであるのと、そういったシステムでは高品質なツールが簡単に手に入るためです。

include::book/09-git-and-other-scms/sections/import-svn.asc[]

include::book/09-git-and-other-scms/sections/import-hg.asc[]

include::book/09-git-and-other-scms/sections/import-p4.asc[]

include::book/09-git-and-other-scms/sections/import-tfs.asc[]

include::book/09-git-and-other-scms/sections/import-custom.asc[]

//////////////////////////
=== Summary
//////////////////////////
=== まとめ

//////////////////////////
You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.
//////////////////////////
これで、Git を他のバージョン管理システムのクライアントとして使ったり、既存のリポジトリのほぼすべてを、データを失うことなく Git リポジトリにインポートしたりといった作業を、安心して行えるようになったと思います。
次章では、Git の内部に踏み込みます。必要とあらばバイト単位での操作もできることでしょう。
